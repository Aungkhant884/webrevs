{"files":[{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.interrupts;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.runner.options.TimeValue;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(1)\n+public class InterruptibleInterruptTest {\n+\n+    @Benchmark\n+    public void test() {\n+        try {\n+            Thread.sleep(5_000);\n+        } catch (InterruptedException e) {\n+            \/\/ Harness delivered, just exit.\n+        }\n+    }\n+\n+    @Test\n+    public void invokeAPI() throws RunnerException {\n+        for (Mode m : Mode.values()) {\n+            if (m != Mode.All) continue;\n+            Options opt = new OptionsBuilder()\n+                    .include(Fixtures.getTestMask(this.getClass()))\n+                    .shouldFailOnError(true)\n+                    .mode(m)\n+                    .timeout(TimeValue.seconds(1))\n+                    .build();\n+\n+            new Runner(opt).run();\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interrupts\/InterruptibleInterruptTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.interrupts;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.runner.options.TimeValue;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(1)\n+public class NonInterruptibleInterruptTest {\n+\n+    @Benchmark\n+    public void test() {\n+        \/\/ This method deliberately does not check interrupt status.\n+        long start = System.currentTimeMillis();\n+        long end = start + 5_000;\n+        while (System.currentTimeMillis() < end) {\n+            Blackhole.consumeCPU(10_000);\n+        }\n+    }\n+\n+    @Test\n+    public void invokeAPI() throws RunnerException {\n+        for (Mode m : Mode.values()) {\n+            if (m != Mode.All) continue;\n+            Options opt = new OptionsBuilder()\n+                    .include(Fixtures.getTestMask(this.getClass()))\n+                    .shouldFailOnError(true)\n+                    .mode(m)\n+                    .timeout(TimeValue.seconds(1))\n+                    .build();\n+\n+            new Runner(opt).run();\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interrupts\/NonInterruptibleInterruptTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -598,3 +598,2 @@\n-            writer.println(ident(4) + \"control.preTearDown();\");\n-            writer.println(ident(3) + \"} catch (InterruptedException ie) {\");\n-            writer.println(ident(4) + \"control.preTearDownForce();\");\n+            writer.println(ident(3) + \"} catch (Throwable e) {\");\n+            writer.println(ident(4) + \"if (!(e instanceof InterruptedException)) throw e;\");\n@@ -602,0 +601,1 @@\n+            writer.println(ident(3) + \"control.preTearDown();\");\n@@ -731,3 +731,2 @@\n-            writer.println(ident(4) + \"control.preTearDown();\");\n-            writer.println(ident(3) + \"} catch (InterruptedException ie) {\");\n-            writer.println(ident(4) + \"control.preTearDownForce();\");\n+            writer.println(ident(3) + \"} catch (Throwable e) {\");\n+            writer.println(ident(4) + \"if (!(e instanceof InterruptedException)) throw e;\");\n@@ -735,0 +734,1 @@\n+            writer.println(ident(3) + \"control.preTearDown();\");\n@@ -894,3 +894,2 @@\n-            writer.println(ident(4) + \"control.preTearDown();\");\n-            writer.println(ident(3) + \"} catch (InterruptedException ie) {\");\n-            writer.println(ident(4) + \"control.preTearDownForce();\");\n+            writer.println(ident(3) + \"} catch (Throwable e) {\");\n+            writer.println(ident(4) + \"if (!(e instanceof InterruptedException)) throw e;\");\n@@ -898,0 +897,1 @@\n+            writer.println(ident(3) + \"control.preTearDown();\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/BenchmarkGenerator.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -80,5 +80,9 @@\n-        try {\n-            preSetup.countDown();\n-            preSetup.await();\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n+        preSetup.countDown();\n+\n+        while (true) {\n+            try {\n+                preSetup.await();\n+                return;\n+            } catch (InterruptedException e) {\n+                \/\/ Do not accept interrupts here.\n+            }\n@@ -88,1 +92,1 @@\n-    public void preTearDown() throws InterruptedException {\n+    public void preTearDown() {\n@@ -90,1 +94,9 @@\n-        preTearDown.await();\n+\n+        while (true) {\n+            try {\n+                preTearDown.await();\n+                return;\n+            } catch (InterruptedException e) {\n+                \/\/ Do not accept interrupts here.\n+            }\n+        }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/InfraControl.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"}]}