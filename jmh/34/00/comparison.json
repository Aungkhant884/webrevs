{"files":[{"patch":"@@ -241,0 +241,1 @@\n+        \/\/ Since JDK 17, there is Console.charset(), which we can use reflectively.\n@@ -246,5 +247,6 @@\n-                Field f = Console.class.getDeclaredField(\"cs\");\n-                setAccessible(console, f);\n-                Object res = f.get(console);\n-                if (res instanceof Charset) {\n-                    return (Charset) res;\n+                {\n+                    Method m = Console.class.getDeclaredMethod(\"charset\");\n+                    Object res = m.invoke(console);\n+                    if (res instanceof Charset) {\n+                        return (Charset) res;\n+                    }\n@@ -252,5 +254,15 @@\n-                Method m = Console.class.getDeclaredMethod(\"encoding\");\n-                setAccessible(console, m);\n-                res = m.invoke(null);\n-                if (res instanceof String) {\n-                    return Charset.forName((String) res);\n+                {\n+                    Field f = Console.class.getDeclaredField(\"cs\");\n+                    setAccessible(console, f);\n+                    Object res = f.get(console);\n+                    if (res instanceof Charset) {\n+                        return (Charset) res;\n+                    }\n+                }\n+                {\n+                    Method m = Console.class.getDeclaredMethod(\"encoding\");\n+                    setAccessible(console, m);\n+                    Object res = m.invoke(null);\n+                    if (res instanceof String) {\n+                        return Charset.forName((String) res);\n+                    }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"}]}