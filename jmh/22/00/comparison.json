{"files":[{"patch":"@@ -90,1 +90,3 @@\n-        Collection<String> messages = Utils.destroy(dtraceProcess);\n+        \/\/ We cannot use Process.destroy, because it closes the streams right away.\n+        \/\/ Instead, deliver TERM by hand and wait for process to gracefully terminate.\n+        Collection<String> messages = Utils.tryWith(\"sudo\", \"kill\", \"-TERM\", Long.toString(pid));\n@@ -95,0 +97,8 @@\n+        try {\n+            \/\/ dtrace would exit with non-zero exit code due to TERM,\n+            \/\/ so we cannot test for errcode == 0 on this path.\n+            dtraceProcess.waitFor();\n+        } catch (InterruptedException e) {\n+            throw new IllegalStateException(\"Interrupted while waiting for profiler to stop\");\n+        }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/DTraceAsmProfiler.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -481,17 +481,0 @@\n-    public static Collection<String> destroy(Process process) {\n-        Collection<String> messages = new ArrayList<>();\n-        try {\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            process.destroy();\n-            int exitCode = process.waitFor();\n-            if (exitCode == 0) {\n-                return Collections.emptyList();\n-            }\n-\n-            messages.add(baos.toString());\n-            return messages;\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        }\n-    }\n-\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"}]}