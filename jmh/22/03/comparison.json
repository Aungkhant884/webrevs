{"files":[{"patch":"@@ -90,1 +90,8 @@\n-        Collection<String> messages = Utils.destroy(dtraceProcess);\n+        \/\/ We cannot use Process.destroy, because it closes the streams right away.\n+        \/\/ Instead, deliver TERM by hand and wait for process to gracefully terminate.\n+        long dtracePid = Utils.getPid(dtraceProcess);\n+        if (dtracePid == 0) {\n+            throw new IllegalStateException(\"Cannot determine dtrace process PID\");\n+        }\n+\n+        Collection<String> messages = Utils.tryWith(\"sudo\", \"kill\", \"-TERM\", Long.toString(dtracePid));\n@@ -95,0 +102,10 @@\n+        \/\/ Wait for dtrace to finish.\n+        try {\n+            int errcode = dtraceProcess.waitFor();\n+            if (errcode != 0) {\n+                throw new IllegalStateException(\"Non-zero error code from dtrace: \" + errcode);\n+            }\n+        } catch (InterruptedException e) {\n+            throw new IllegalStateException(\"Interrupted while waiting for profiler to stop\");\n+        }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/DTraceAsmProfiler.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -443,0 +443,48 @@\n+    \/**\n+     * Gets the PID of the target process.\n+     * @param process to poll\n+     * @return PID, or zero if no PID is found\n+     *\/\n+    public static long getPid(Process process) {\n+        \/\/ Step 1. Try Process.pid, available since Java 9.\n+        try {\n+            Method m = Process.class.getMethod(\"pid\");\n+            Object pid = m.invoke(process);\n+            if (pid instanceof Long) {\n+                return (long) pid;\n+            }\n+        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n+            \/\/ Fallthrough\n+        }\n+\n+        \/\/ Step 2. Try to hack into the JDK 8- UNIXProcess.\n+        try {\n+            Class<?> c = Class.forName(\"java.lang.UNIXProcess\");\n+            Field f = c.getDeclaredField(\"pid\");\n+            setAccessible(process, f);\n+            Object o = f.get(process);\n+            if (o instanceof Integer) {\n+                return (int) o;\n+            }\n+        } catch (NoSuchFieldException | ClassNotFoundException | IllegalAccessException e) {\n+            \/\/ Fallthrough\n+        }\n+\n+        \/\/ Step 3. Try to hack into JDK 9+ ProcessImpl.\n+        \/\/ Renamed from UNIXProcess with JDK-8071481.\n+        try {\n+            Class<?> c = Class.forName(\"java.lang.ProcessImpl\");\n+            Field f = c.getDeclaredField(\"pid\");\n+            setAccessible(process, f);\n+            Object o = f.get(process);\n+            if (o instanceof Integer) {\n+                return (int) o;\n+            }\n+        } catch (NoSuchFieldException | ClassNotFoundException | IllegalAccessException e) {\n+            \/\/ Fallthrough\n+        }\n+\n+        \/\/ No dice, return zero\n+        return 0;\n+    }\n+\n@@ -481,17 +529,0 @@\n-    public static Collection<String> destroy(Process process) {\n-        Collection<String> messages = new ArrayList<>();\n-        try {\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            process.destroy();\n-            int exitCode = process.waitFor();\n-            if (exitCode == 0) {\n-                return Collections.emptyList();\n-            }\n-\n-            messages.add(baos.toString());\n-            return messages;\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        }\n-    }\n-\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":48,"deletions":17,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.io.IOException;\n@@ -35,2 +36,12 @@\n-    public void testPID() {\n-        Assert.assertFalse(Utils.getPid() == 0);\n+    public void testPID_Current() {\n+        Assert.assertTrue(Utils.getPid() != 0);\n+    }\n+\n+    @Test\n+    public void testPID_Other() throws IOException, InterruptedException {\n+        if (!Utils.isWindows()) {\n+            ProcessBuilder pb = new ProcessBuilder().command(\"sleep\", \"1\");\n+            Process p = pb.start();\n+            Assert.assertTrue(Utils.getPid(p) != 0);\n+            p.waitFor();\n+        }\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/TestUtil.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}