{"files":[{"patch":"@@ -462,1 +462,1 @@\n-        Paddings.padding(writer);\n+        Paddings.padding(writer, \"p\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/BenchmarkGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,4 @@\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringJoiner;\n@@ -33,1 +35,2 @@\n-    private static final List<String> PADDING_CACHE;\n+    private static final Map<String, String> PADDING_CACHE =\n+            Collections.synchronizedMap(new HashMap<>());\n@@ -35,2 +38,5 @@\n-    static {\n-        PADDING_CACHE = new ArrayList<>();\n+    private static String generate(String prefix) {\n+        if (prefix.isEmpty()) {\n+            throw new IllegalArgumentException(\"prefix must not be empty\");\n+        }\n+        StringJoiner sj = new StringJoiner(\"\");\n@@ -38,5 +44,7 @@\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(\"    \");\n-            sb.append(String.format(\"byte p%03d\", p * 16 + 0));\n-            for (int q = 1; q < 16; q++) {\n-                sb.append(String.format(\", p%03d\", p * 16 + q));\n+            sj.add(\"    byte \");\n+            for (int q = 0; q < 16; q++) {\n+                if (q != 0) {\n+                    sj.add(\", \");\n+                }\n+                sj.add(prefix);\n+                sj.add(String.format(\"%03d\", p * 16 + q));\n@@ -44,2 +52,2 @@\n-            sb.append(\";\");\n-            PADDING_CACHE.add(sb.toString());\n+            sj.add(\";\");\n+            sj.add(System.lineSeparator());\n@@ -47,0 +55,1 @@\n+        return sj.toString();\n@@ -49,8 +58,2 @@\n-    public static void padding(List<String> lines) {\n-        lines.addAll(PADDING_CACHE);\n-    }\n-\n-    public static void padding(PrintWriter writer) {\n-        for (String s : PADDING_CACHE) {\n-            writer.println(s);\n-        }\n+    public static void padding(PrintWriter writer, String prefix) {\n+        writer.print(PADDING_CACHE.computeIfAbsent(prefix, Paddings::generate));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/Paddings.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -969,1 +969,3 @@\n-                Paddings.padding(pw);\n+                \/\/ The prefix for padding should be different from the one used in _B3 to avoid\n+                \/\/ \"hiding field of the same name in superclass\" warning\n+                Paddings.padding(pw, \"b1_\");\n@@ -1018,1 +1020,3 @@\n-                Paddings.padding(pw);\n+                \/\/ The prefix for padding should be different from the one used in _B1 to avoid\n+                \/\/ \"hiding field of the same name in superclass\" warning\n+                Paddings.padding(pw, \"b3_\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/StateObjectHandler.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}