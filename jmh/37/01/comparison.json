{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import java.util.LinkedHashSet;\n@@ -65,1 +66,2 @@\n-    private final String event;\n+    private final List<String> events;\n+    private final String onlyEvent;\n@@ -67,0 +69,1 @@\n+    private File trialOutDir;\n@@ -70,0 +73,2 @@\n+    private boolean isVersion1x = false;\n+\n@@ -73,1 +78,1 @@\n-    private final List<File> generated = new ArrayList<>();\n+    private final LinkedHashSet<File> generated = new LinkedHashSet<>();\n@@ -95,1 +100,1 @@\n-                \"Event to sample: cpu, alloc, wall, lock, cache-misses, etc.\")\n+                \"Event(s) to sample: cpu, alloc, lock, wall, itimer; com.foo.Bar.methodName; any event from `perf list` e.g. cache-misses\")\n@@ -190,2 +195,2 @@\n-            this.event = optEvent.value(set);\n-            builder.append(optEvent);\n+            this.events = optEvent.values(set);\n+            builder.appendMulti(optEvent);\n@@ -225,1 +230,0 @@\n-\n@@ -239,0 +243,8 @@\n+            try {\n+                String version = instance.execute(\"version\");\n+                if (version.startsWith(\"1.\")) {\n+                    isVersion1x = true;\n+                }\n+            } catch (IOException e) {\n+                throw new ProfilerException(e);\n+            }\n@@ -241,0 +253,11 @@\n+            if (events.size() > 1) {\n+                if (isVersion1x) {\n+                    throw new ProfilerException(\"Multiple event capture not supported on async-profiler 1.x\");\n+                }\n+                if (output.size() > 1 || output.get(0) != OutputType.jfr) {\n+                    throw new ProfilerException(\"When multiple events are selected, the only output=jfr is supported, found: \" + output);\n+                }\n+                onlyEvent = null;\n+            } else {\n+                onlyEvent = events.get(0);\n+            }\n@@ -249,0 +272,3 @@\n+        if (trialOutDir == null) {\n+            createTrialOutDir(benchmarkParams);\n+        }\n@@ -252,1 +278,1 @@\n-                execute(\"start,\" + profilerConfig);\n+                start();\n@@ -262,2 +288,1 @@\n-                \/\/ ...and start collecting again.\n-                execute(\"start,\" + profilerConfig);\n+                start();\n@@ -269,0 +294,10 @@\n+    private void start() {\n+        String fileConfig = \"\";\n+        if (output.contains(OutputType.jfr)) {\n+            File jfrFile = new File(trialOutDir, \"profile.jfr\");\n+            generated.add(jfrFile);\n+            fileConfig = \",file=\" + jfrFile.getAbsolutePath();\n+        }\n+        execute(\"start,\" + profilerConfig + fileConfig);\n+    }\n+\n@@ -275,2 +310,1 @@\n-                File trialOutDir = createTrialOutDir(benchmarkParams);\n-                return Collections.singletonList(stopAndDump(trialOutDir));\n+                return Collections.singletonList(stopAndDump());\n@@ -283,5 +317,8 @@\n-    private File createTrialOutDir(BenchmarkParams benchmarkParams) {\n-        String fileName = benchmarkParams.id();\n-        File trialOutDir = new File(this.outDir, fileName);\n-        trialOutDir.mkdirs();\n-        return trialOutDir;\n+    private void createTrialOutDir(BenchmarkParams benchmarkParams) {\n+        if (trialOutDir == null) {\n+            \/\/ async-profiler expands %p to PID and %t to timestamp, make sure we don't\n+            \/\/ include % in the file name.\n+            String fileName = benchmarkParams.id().replace(\"%\", \"_\");\n+            trialOutDir = new File(this.outDir, fileName);\n+            trialOutDir.mkdirs();\n+        }\n@@ -290,1 +327,1 @@\n-    private TextResult stopAndDump(File trialOutDir) {\n+    private TextResult stopAndDump() {\n@@ -298,2 +335,8 @@\n-                    String textOutput = dump(trialOutDir, \"summary-%s.txt\", \"summary,flat=\" + flat + \",traces=\" + traces);\n-                    pw.println(textOutput);\n+                    File textOutput = dump(trialOutDir, \"summary-%s.txt\", \"summary,flat=\" + flat + \",traces=\" + traces);\n+                    try {\n+                        for (String line : FileUtils.readAllLines(textOutput)) {\n+                            pw.println(line);\n+                        }\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n@@ -306,2 +349,1 @@\n-                    String ver = execute(\"version\");\n-                    String ext = ver.startsWith(\"1.\") ? \"svg\" : \"html\";\n+                    String ext = isVersion1x ? \"svg\" : \"html\";\n@@ -319,1 +361,0 @@\n-                    dump(trialOutDir, \"%s.jfr\", \"jfr\");\n@@ -335,9 +376,3 @@\n-    private String dump(File specificOutDir, String fileNameFormatString, String content) {\n-        File output = new File(specificOutDir, String.format(fileNameFormatString, event));\n-        generated.add(output);\n-        String result = execute(content + \",\" + profilerConfig);\n-        try {\n-            FileUtils.writeLines(output, Collections.singletonList(result));\n-            return result;\n-        } catch (IOException e) {\n-            return \"N\/A\";\n+    private File dump(File specificOutDir, String fileNameFormatString, String content) {\n+        if (onlyEvent == null) {\n+            throw new IllegalStateException(\"Expected only one event, found: \" + events);\n@@ -345,0 +380,4 @@\n+        File output = new File(specificOutDir, String.format(fileNameFormatString, onlyEvent));\n+        execute(content + \",\" + profilerConfig + \",file=\" + output.getAbsolutePath());\n+        generated.add(output);\n+        return output;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AsyncProfiler.java","additions":70,"deletions":31,"binary":false,"changes":101,"status":"modified"}]}