{"files":[{"patch":"@@ -42,1 +42,1 @@\n-    protected final List<String> events;\n+    protected final List<String> requestedEventNames;\n@@ -201,1 +201,1 @@\n-            this.events = set.valuesOf(optEvents);\n+            requestedEventNames = set.valuesOf(optEvents);\n@@ -313,0 +313,10 @@\n+    \/**\n+     * Some profilers strip modifiers from event names.\n+     * To properly match the events in shared code, we need to know\n+     * what those events were stripped to.\n+     * @return stripped events\n+     *\/\n+    protected List<String> stripEventNames(List<String> src) {\n+        return src;\n+    }\n+\n@@ -370,0 +380,1 @@\n+        List<String> evNames = stripEventNames(requestedEventNames);\n@@ -374,2 +385,6 @@\n-            for (String event : this.events) {\n-                pw.printf(\" Column %d: %s (%d events)%n\", cnt, event, events.get(event).size());\n+            for (int i = 0; i < evNames.size(); i++) {\n+                String stripped = evNames.get(i);\n+                String requested = requestedEventNames.get(i);\n+                pw.printf(\" Column %d: %s%s (%d events)%n\", cnt,\n+                        stripped, (requested.equals(stripped) ? \"\" : \" (\" + requested + \")\"),\n+                        events.get(stripped).size());\n@@ -397,1 +412,1 @@\n-        final String mainEvent = this.events.get(0);\n+        final String mainEvent = evNames.get(0);\n@@ -424,1 +439,1 @@\n-                for (String event : this.events) {\n+                for (String event : evNames) {\n@@ -455,1 +470,1 @@\n-                    for (String event : this.events) {\n+                    for (String event : evNames) {\n@@ -460,1 +475,1 @@\n-                    for (String event : this.events) {\n+                    for (String event : evNames) {\n@@ -464,1 +479,1 @@\n-                for (String event : this.events) {\n+                for (String event : evNames) {\n@@ -470,1 +485,1 @@\n-                for (String event : this.events) {\n+                for (String event : evNames) {\n@@ -477,1 +492,1 @@\n-            for (String event : this.events) {\n+            for (String event : evNames) {\n@@ -487,1 +502,1 @@\n-        for (String event : this.events) {\n+        for (String event : evNames) {\n@@ -493,1 +508,1 @@\n-            for (String event : this.events) {\n+            for (String event : evNames) {\n@@ -513,1 +528,1 @@\n-                    for (String event : this.events) {\n+                    for (String event : evNames) {\n@@ -518,1 +533,1 @@\n-                    for (String event : this.events) {\n+                    for (String event : evNames) {\n@@ -522,1 +537,1 @@\n-                for (String event : this.events) {\n+                for (String event : evNames) {\n@@ -528,1 +543,1 @@\n-                for (String event : this.events) {\n+                for (String event : evNames) {\n@@ -535,1 +550,1 @@\n-            for (String event : this.events) {\n+            for (String event : evNames) {\n@@ -549,1 +564,1 @@\n-                for (String event : this.events) {\n+                for (String event : evNames) {\n@@ -557,1 +572,1 @@\n-            for (String event : this.events) {\n+            for (String event : evNames) {\n@@ -636,1 +651,1 @@\n-                    for (String event : this.events) {\n+                    for (String event : evNames) {\n@@ -684,0 +699,1 @@\n+        List<String> strippedEvents = stripEventNames(requestedEventNames);\n@@ -701,1 +717,1 @@\n-                regions.add(new GeneratedRegion(this.events, asms, desc, intv.src, intv.dst,\n+                regions.add(new GeneratedRegion(strippedEvents, asms, desc, intv.src, intv.dst,\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AbstractPerfAsmProfiler.java","additions":38,"deletions":22,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -208,3 +208,3 @@\n-            assert this.events.size() == 1;\n-            allEvents.put(this.events.get(0), events);\n-            return new PerfEvents(this.events, allEvents, methodMap);\n+            assert requestedEventNames.size() == 1;\n+            allEvents.put(requestedEventNames.get(0), events);\n+            return new PerfEvents(requestedEventNames, allEvents, methodMap);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/DTraceAsmProfiler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        return Arrays.asList(PerfSupport.PERF_EXEC, \"record\", \"--freq\", String.valueOf(sampleFrequency), \"--event\", Utils.join(events, \",\"), \"--output\", perfBinData.getAbsolutePath());\n+        return Arrays.asList(PerfSupport.PERF_EXEC, \"record\", \"--freq\", String.valueOf(sampleFrequency), \"--event\", Utils.join(requestedEventNames, \",\"), \"--output\", perfBinData.getAbsolutePath());\n@@ -145,0 +145,4 @@\n+        int tagIdx = evName.lastIndexOf(\":\");\n+        if (tagIdx != -1) {\n+            evName = evName.substring(0, tagIdx);\n+        }\n@@ -217,0 +221,2 @@\n+        List<String> evNames = stripEventNames(requestedEventNames);\n+\n@@ -223,1 +229,1 @@\n-            for (String evName : this.events) {\n+            for (String evName : evNames) {\n@@ -264,1 +270,1 @@\n-            return new PerfEvents(this.events, events, methodMap);\n+            return new PerfEvents(evNames, events, methodMap);\n@@ -275,0 +281,18 @@\n+\n+    @Override\n+    protected List<String> stripEventNames(List<String> events) {\n+        return stripPerfEventNames(events);\n+    }\n+\n+    static List<String> stripPerfEventNames(List<String> events) {\n+        List<String> res = new ArrayList<>();\n+        for (String ev : events) {\n+            int tagIdx = ev.indexOf(':');\n+            if (tagIdx != -1) {\n+                res.add(ev.substring(0, tagIdx));\n+            } else {\n+                res.add(ev);\n+            }\n+        }\n+        return res;\n+    }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/LinuxPerfAsmProfiler.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-            for (String evName : this.events) {\n+            for (String evName : requestedEventNames) {\n@@ -215,1 +215,1 @@\n-                if (!this.events.get(0).equals(evName))\n+                if (!requestedEventNames.get(0).equals(evName))\n@@ -272,1 +272,1 @@\n-            return new PerfEvents(this.events, events, methodMap);\n+            return new PerfEvents(requestedEventNames, events, methodMap);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/WinPerfAsmProfiler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+\n@@ -67,7 +70,7 @@\n-        String[][] lines = new String[][] {\n-            { \"328650.667569: \", \"instructions:u\", \":      7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\" },\n-            { \"328650.667569: \", \"instructions:uk\", \":     7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\" },\n-            { \"328650.667569: \", \"instructions:k\", \":      7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\" },\n-            { \"328650.667569: \", \"instructions:HG\", \":     7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\" },\n-            { \"328650.667569: \", \"instructions:H\", \":      7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\" },\n-            { \"328650.667569: \", \"instructions:\", \":       7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\" }\n+        String[] lines = new String[] {\n+                \"328650.667569: instructions:u:      7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\",\n+                \"328650.667569: instructions:uk:     7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\",\n+                \"328650.667569: instructions:k:      7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\",\n+                \"328650.667569: instructions:HG:     7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\",\n+                \"328650.667569: instructions:H:      7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\",\n+                \"328650.667569: instructions::       7f82b6a8beb4 ConstantPoolCache::allocate (\/somewhere\/on\/my\/filesystem\/libjvm.so)\"\n@@ -75,2 +78,2 @@\n-        for (String[] line : lines) {\n-            LinuxPerfAsmProfiler.PerfLine perfLine = LinuxPerfAsmProfiler.parsePerfLine(line[0] + line[1] + line[2]);\n+        for (String line : lines) {\n+            LinuxPerfAsmProfiler.PerfLine perfLine = LinuxPerfAsmProfiler.parsePerfLine(line);\n@@ -79,1 +82,1 @@\n-            Assert.assertEquals(line[1], perfLine.eventName());\n+            Assert.assertEquals(\"instructions\", perfLine.eventName());\n@@ -86,0 +89,13 @@\n+    @Test\n+    public void stripEvents() {\n+        List<String> list = new ArrayList<>();\n+        list.add(\"cycles\");\n+        list.add(\"instructions:u:\");\n+        list.add(\"branches:pppu:\");\n+\n+        List<String> stripped = LinuxPerfAsmProfiler.stripPerfEventNames(list);\n+\n+        Assert.assertEquals(\"cycles\", stripped.get(0));\n+        Assert.assertEquals(\"instructions\", stripped.get(1));\n+        Assert.assertEquals(\"branches\", stripped.get(2));\n+    }\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/profile\/PerfParseTest.java","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"}]}