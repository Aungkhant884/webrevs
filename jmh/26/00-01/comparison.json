{"files":[{"patch":"@@ -56,1 +56,1 @@\n-    private final ConcurrentMap<Thread, ThreadData> threadData;\n+    private final ConcurrentMap<Thread, WorkerData> workerData;\n@@ -80,1 +80,1 @@\n-        threadData = new ConcurrentHashMap<>();\n+        workerData = new ConcurrentHashMap<>();\n@@ -272,1 +272,1 @@\n-        threadData.clear();\n+        workerData.clear();\n@@ -318,1 +318,1 @@\n-            runners[i] = new BenchmarkTask(clazz, tps, control);\n+            runners[i] = new BenchmarkTask(control);\n@@ -425,0 +425,25 @@\n+    private WorkerData newWorkerData(Thread worker) {\n+        WorkerData wd = workerData.get(worker);\n+        if (wd != null) {\n+            return wd;\n+        }\n+\n+        try {\n+            Object o = clazz.getConstructor().newInstance();\n+            ThreadParams t = tps.poll();\n+            if (t == null) {\n+                throw new IllegalStateException(\"Cannot get another thread params\");\n+            }\n+\n+            wd = new WorkerData(o, t);\n+            WorkerData exist = workerData.put(worker, wd);\n+            if (exist != null) {\n+                throw new IllegalStateException(\"Duplicate thread data\");\n+            }\n+\n+            return wd;\n+        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n+            throw new RuntimeException(\"Class \" + clazz.getName() + \" instantiation error \", e);\n+        }\n+    }\n+\n@@ -430,2 +455,0 @@\n-        private final Class<?> clazz;\n-        private final BlockingQueue<ThreadParams> tps;\n@@ -434,3 +457,1 @@\n-        BenchmarkTask(Class<?> clazz, BlockingQueue<ThreadParams> tps, InfraControl control) {\n-            this.clazz = clazz;\n-            this.tps = tps;\n+        BenchmarkTask(InfraControl control) {\n@@ -447,17 +468,1 @@\n-                ThreadData td = threadData.get(runner);\n-                if (td == null) {\n-                    try {\n-                        Object o = clazz.getConstructor().newInstance();\n-                        ThreadParams t = tps.poll();\n-                        if (t == null) {\n-                            throw new IllegalStateException(\"Cannot get another thread params\");\n-                        }\n-                        td = new ThreadData(o, t);\n-                        ThreadData exist = threadData.put(runner, td);\n-                        if (exist != null) {\n-                            throw new IllegalStateException(\"Duplicate thread data\");\n-                        }\n-                    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n-                        throw new RuntimeException(\"Class \" + clazz.getName() + \" instantiation error \", e);\n-                    }\n-                }\n+                WorkerData wd = newWorkerData(runner);\n@@ -465,1 +470,1 @@\n-                return (BenchmarkTaskResult) method.invoke(td.instance, control, td.params);\n+                return (BenchmarkTaskResult) method.invoke(wd.instance, control, wd.params);\n@@ -496,0 +501,1 @@\n+\n@@ -502,1 +508,1 @@\n-    private static class ThreadData {\n+    private static class WorkerData {\n@@ -515,1 +521,1 @@\n-        public ThreadData(Object instance, ThreadParams params) {\n+        public WorkerData(Object instance, ThreadParams params) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkHandler.java","additions":35,"deletions":29,"binary":false,"changes":64,"status":"modified"}]}