{"files":[{"patch":"@@ -56,2 +56,2 @@\n-    \/\/ (Aleksey) Forgive me, Father, for I have sinned.\n-    private final ThreadLocal<ThreadData> threadData;\n+    private final ConcurrentMap<Thread, ThreadData> threadData;\n+    private final BlockingQueue<ThreadParams> tps;\n@@ -63,0 +63,1 @@\n+    private final Class<?> clazz;\n@@ -68,1 +69,1 @@\n-        final Class<?> clazz = ClassUtils.loadClass(target.substring(0, lastDot));\n+        clazz = ClassUtils.loadClass(target.substring(0, lastDot));\n@@ -70,3 +71,4 @@\n-        this.method = BenchmarkHandler.findBenchmarkMethod(clazz, target.substring(lastDot + 1));\n-        this.profilers = ProfilerFactory.getSupportedInternal(options.getProfilers());\n-        this.profilersRev = new ArrayList<>(profilers);\n+        method = BenchmarkHandler.findBenchmarkMethod(clazz, target.substring(lastDot + 1));\n+\n+        profilers = ProfilerFactory.getSupportedInternal(options.getProfilers());\n+        profilersRev = new ArrayList<>(profilers);\n@@ -75,1 +77,1 @@\n-        final BlockingQueue<ThreadParams> tps = new ArrayBlockingQueue<>(executionParams.getThreads());\n+        tps = new ArrayBlockingQueue<>(executionParams.getThreads());\n@@ -78,15 +80,1 @@\n-        this.threadData = new ThreadLocal<ThreadData>() {\n-            @Override\n-            protected ThreadData initialValue() {\n-                try {\n-                    Object o = clazz.getConstructor().newInstance();\n-                    ThreadParams t = tps.poll();\n-                    if (t == null) {\n-                        throw new IllegalStateException(\"Cannot get another thread params\");\n-                    }\n-                    return new ThreadData(o, t);\n-                } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n-                    throw new RuntimeException(\"Class \" + clazz.getName() + \" instantiation error \", e);\n-                }\n-            }\n-        };\n+        threadData = new ConcurrentHashMap<>();\n@@ -96,1 +84,1 @@\n-            this.executor = EXECUTOR_TYPE.createExecutor(executionParams.getThreads(), executionParams.getBenchmark());\n+            executor = EXECUTOR_TYPE.createExecutor(executionParams.getThreads(), executionParams.getBenchmark());\n@@ -283,0 +271,3 @@\n+        \/\/ No transient data is shared between benchmarks, purge it.\n+        threadData.clear();\n+\n@@ -327,1 +318,1 @@\n-            runners[i] = new BenchmarkTask(control);\n+            runners[i] = new BenchmarkTask(clazz, tps, control);\n@@ -439,0 +430,2 @@\n+        private final Class<?> clazz;\n+        private final BlockingQueue<ThreadParams> tps;\n@@ -441,1 +434,3 @@\n-        BenchmarkTask(InfraControl control) {\n+        BenchmarkTask(Class<?> clazz, BlockingQueue<ThreadParams> tps, InfraControl control) {\n+            this.clazz = clazz;\n+            this.tps = tps;\n@@ -451,2 +446,19 @@\n-                \/\/ go for the run\n-                ThreadData td = threadData.get();\n+                \/\/ poll the current data, or instantiate in this thread, if needed\n+                ThreadData td = threadData.get(runner);\n+                if (td == null) {\n+                    try {\n+                        Object o = clazz.getConstructor().newInstance();\n+                        ThreadParams t = tps.poll();\n+                        if (t == null) {\n+                            throw new IllegalStateException(\"Cannot get another thread params\");\n+                        }\n+                        td = new ThreadData(o, t);\n+                        ThreadData exist = threadData.put(runner, td);\n+                        if (exist != null) {\n+                            throw new IllegalStateException(\"Duplicate thread data\");\n+                        }\n+                    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n+                        throw new RuntimeException(\"Class \" + clazz.getName() + \" instantiation error \", e);\n+                    }\n+                }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkHandler.java","additions":39,"deletions":27,"binary":false,"changes":66,"status":"modified"}]}