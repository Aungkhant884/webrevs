{"files":[{"patch":"@@ -56,2 +56,2 @@\n-    \/\/ (Aleksey) Forgive me, Father, for I have sinned.\n-    private final ThreadLocal<ThreadData> threadData;\n+    private final ConcurrentMap<Thread, WorkerData> workerData;\n+    private final BlockingQueue<ThreadParams> tps;\n@@ -63,0 +63,1 @@\n+    private final Class<?> clazz;\n@@ -68,1 +69,1 @@\n-        final Class<?> clazz = ClassUtils.loadClass(target.substring(0, lastDot));\n+        clazz = ClassUtils.loadClass(target.substring(0, lastDot));\n@@ -70,3 +71,4 @@\n-        this.method = BenchmarkHandler.findBenchmarkMethod(clazz, target.substring(lastDot + 1));\n-        this.profilers = ProfilerFactory.getSupportedInternal(options.getProfilers());\n-        this.profilersRev = new ArrayList<>(profilers);\n+        method = BenchmarkHandler.findBenchmarkMethod(clazz, target.substring(lastDot + 1));\n+\n+        profilers = ProfilerFactory.getSupportedInternal(options.getProfilers());\n+        profilersRev = new ArrayList<>(profilers);\n@@ -75,1 +77,1 @@\n-        final BlockingQueue<ThreadParams> tps = new ArrayBlockingQueue<>(executionParams.getThreads());\n+        tps = new ArrayBlockingQueue<>(executionParams.getThreads());\n@@ -78,15 +80,1 @@\n-        this.threadData = new ThreadLocal<ThreadData>() {\n-            @Override\n-            protected ThreadData initialValue() {\n-                try {\n-                    Object o = clazz.getConstructor().newInstance();\n-                    ThreadParams t = tps.poll();\n-                    if (t == null) {\n-                        throw new IllegalStateException(\"Cannot get another thread params\");\n-                    }\n-                    return new ThreadData(o, t);\n-                } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n-                    throw new RuntimeException(\"Class \" + clazz.getName() + \" instantiation error \", e);\n-                }\n-            }\n-        };\n+        workerData = new ConcurrentHashMap<>();\n@@ -96,1 +84,1 @@\n-            this.executor = EXECUTOR_TYPE.createExecutor(executionParams.getThreads(), executionParams.getBenchmark());\n+            executor = EXECUTOR_TYPE.createExecutor(executionParams.getThreads(), executionParams.getBenchmark());\n@@ -283,0 +271,3 @@\n+        \/\/ No transient data is shared between benchmarks, purge it.\n+        workerData.clear();\n+\n@@ -434,0 +425,25 @@\n+    private WorkerData newWorkerData(Thread worker) {\n+        WorkerData wd = workerData.get(worker);\n+        if (wd != null) {\n+            return wd;\n+        }\n+\n+        try {\n+            Object o = clazz.getConstructor().newInstance();\n+            ThreadParams t = tps.poll();\n+            if (t == null) {\n+                throw new IllegalStateException(\"Cannot get another thread params\");\n+            }\n+\n+            wd = new WorkerData(o, t);\n+            WorkerData exist = workerData.put(worker, wd);\n+            if (exist != null) {\n+                throw new IllegalStateException(\"Duplicate thread data\");\n+            }\n+\n+            return wd;\n+        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n+            throw new RuntimeException(\"Class \" + clazz.getName() + \" instantiation error \", e);\n+        }\n+    }\n+\n@@ -451,3 +467,4 @@\n-                \/\/ go for the run\n-                ThreadData td = threadData.get();\n-                return (BenchmarkTaskResult) method.invoke(td.instance, control, td.params);\n+                \/\/ poll the current data, or instantiate in this thread, if needed\n+                WorkerData wd = newWorkerData(runner);\n+\n+                return (BenchmarkTaskResult) method.invoke(wd.instance, control, wd.params);\n@@ -484,0 +501,1 @@\n+\n@@ -490,1 +508,1 @@\n-    private static class ThreadData {\n+    private static class WorkerData {\n@@ -503,1 +521,1 @@\n-        public ThreadData(Object instance, ThreadParams params) {\n+        public WorkerData(Object instance, ThreadParams params) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkHandler.java","additions":46,"deletions":28,"binary":false,"changes":74,"status":"modified"}]}