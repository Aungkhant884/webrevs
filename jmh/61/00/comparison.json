{"files":[{"patch":"@@ -121,2 +121,0 @@\n-                expectedScore = 1.0 * realTime \/ (realOps * opsPerInv);\n-                break;\n@@ -124,1 +122,1 @@\n-                expectedScore = 1.0 * realTime \/ realOps;\n+                expectedScore = 1.0 * realTime \/ (realOps * opsPerInv);\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/OpsPerInvSanityTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1027,1 +1027,1 @@\n-                writer.println(ident(3) + \"results.add(new SingleShotResult(ResultRole.PRIMARY, \\\"\" + method.getName() + \"\\\", res.getTime(), benchmarkParams.getTimeUnit()));\");\n+                writer.println(ident(3) + \"results.add(new SingleShotResult(ResultRole.PRIMARY, \\\"\" + method.getName() + \"\\\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\");\n@@ -1029,2 +1029,2 @@\n-                writer.println(ident(3) + \"results.add(new SingleShotResult(ResultRole.PRIMARY, \\\"\" + methodGroup.getName() + \"\\\", res.getTime(), benchmarkParams.getTimeUnit()));\");\n-                writer.println(ident(3) + \"results.add(new SingleShotResult(ResultRole.SECONDARY, \\\"\" + method.getName() + \"\\\", res.getTime(), benchmarkParams.getTimeUnit()));\");\n+                writer.println(ident(3) + \"results.add(new SingleShotResult(ResultRole.PRIMARY, \\\"\" + methodGroup.getName() + \"\\\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\");\n+                writer.println(ident(3) + \"results.add(new SingleShotResult(ResultRole.SECONDARY, \\\"\" + method.getName() + \"\\\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/BenchmarkGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,5 @@\n+        \/\/ TODO: Transition interface, should be removed when we decide it is OK to break the publicly leaked API.\n+        this(role, label, duration, 1, outputTimeUnit);\n+    }\n+\n+    public SingleShotResult(ResultRole role, String label, long duration, long ops, TimeUnit outputTimeUnit) {\n@@ -42,1 +47,1 @@\n-                of(1.0D * duration \/ TimeUnit.NANOSECONDS.convert(1, outputTimeUnit)),\n+                of(1.0D * duration \/ ops \/ TimeUnit.NANOSECONDS.convert(1, outputTimeUnit)),\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/SingleShotResult.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -152,4 +152,4 @@\n-        ir.addResult(new SingleShotResult(ResultRole.PRIMARY, \"\", 10_000, TimeUnit.NANOSECONDS));\n-        ir.addResult(new SingleShotResult(ResultRole.PRIMARY, \"\", 10_000, TimeUnit.NANOSECONDS));\n-        ir.addResult(new SingleShotResult(ResultRole.SECONDARY, \"sec\", 5_000, TimeUnit.NANOSECONDS));\n-        ir.addResult(new SingleShotResult(ResultRole.SECONDARY, \"sec\", 5_000, TimeUnit.NANOSECONDS));\n+        ir.addResult(new SingleShotResult(ResultRole.PRIMARY, \"\", 10_000, 1, TimeUnit.NANOSECONDS));\n+        ir.addResult(new SingleShotResult(ResultRole.PRIMARY, \"\", 10_000, 1, TimeUnit.NANOSECONDS));\n+        ir.addResult(new SingleShotResult(ResultRole.SECONDARY, \"sec\", 5_000, 1, TimeUnit.NANOSECONDS));\n+        ir.addResult(new SingleShotResult(ResultRole.SECONDARY, \"sec\", 5_000, 1, TimeUnit.NANOSECONDS));\n@@ -164,1 +164,1 @@\n-        br.addBenchmarkResult(new SingleShotResult(ResultRole.SECONDARY, \"bench\", 3_000, TimeUnit.NANOSECONDS));\n+        br.addBenchmarkResult(new SingleShotResult(ResultRole.SECONDARY, \"bench\", 3_000, 1, TimeUnit.NANOSECONDS));\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/ResultAggregationTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-        SingleShotResult r1 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 1000L, TimeUnit.MICROSECONDS);\n-        SingleShotResult r2 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 2000L, TimeUnit.MICROSECONDS);\n+        SingleShotResult r1 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 1000L, 1, TimeUnit.MICROSECONDS);\n+        SingleShotResult r2 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 2000L, 1, TimeUnit.MICROSECONDS);\n@@ -50,2 +50,2 @@\n-        SingleShotResult r1 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 1000L, TimeUnit.MICROSECONDS);\n-        SingleShotResult r2 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 2000L, TimeUnit.MICROSECONDS);\n+        SingleShotResult r1 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 1000L, 1, TimeUnit.MICROSECONDS);\n+        SingleShotResult r2 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 2000L, 1, TimeUnit.MICROSECONDS);\n@@ -58,0 +58,9 @@\n+    @Test\n+    public void testMultiops() {\n+        SingleShotResult r1 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 1000L, 1, TimeUnit.MICROSECONDS);\n+        SingleShotResult r2 = new SingleShotResult(ResultRole.PRIMARY, \"Test1\", 1000L, 2, TimeUnit.MICROSECONDS);\n+\n+        assertEquals(1, r1.getScore(), ASSERT_ACCURACY);\n+        assertEquals(0.5, r2.getScore(), ASSERT_ACCURACY);\n+    }\n+\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/TestSingleShotResult.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"}]}