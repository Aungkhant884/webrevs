{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.reflect.AccessibleObject;\n@@ -32,0 +33,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -224,0 +226,22 @@\n+    private static void setAccessible(Object holder, AccessibleObject o) throws IllegalAccessException {\n+        \/\/ JDK 9+ has the module protections in place, which would print the warning\n+        \/\/ to the console if we try setAccessible(true) on inaccessible object.\n+        \/\/ JDK 16 would deny access by default, so we have no recourse at all.\n+        \/\/ Try to check with JDK 9+ AccessibleObject.canAccess before doing this\n+        \/\/ to avoid the confusing console warnings. Force the break in if user asks\n+        \/\/ explicitly.\n+\n+        if (!Boolean.getBoolean(\"jmh.forceSetAccessible\")) {\n+            try {\n+                Method canAccess = AccessibleObject.class.getDeclaredMethod(\"canAccess\", Object.class);\n+                if (!(boolean) canAccess.invoke(o, holder)) {\n+                    throw new IllegalAccessException(o + \" is not accessible\");\n+                }\n+            } catch (NoSuchMethodException | InvocationTargetException e) {\n+                \/\/ fall-through\n+            }\n+        }\n+\n+        o.setAccessible(true);\n+    }\n+\n@@ -235,1 +259,1 @@\n-                f.setAccessible(true);\n+                setAccessible(console, f);\n@@ -241,1 +265,1 @@\n-                m.setAccessible(true);\n+                setAccessible(console, m);\n@@ -259,1 +283,1 @@\n-                f.setAccessible(true);\n+                setAccessible(out, f);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"}]}