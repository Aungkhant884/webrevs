{"files":[{"patch":"@@ -435,1 +435,1 @@\n-                pw.printf(\"%s, %s (%d bytes) %n%n\", r.desc().source(), r.desc().name(), r.end - r.begin);\n+                pw.printf(\"%s, %s %n%n\", r.desc().source(), r.desc().name());\n@@ -473,1 +473,1 @@\n-                    pw.printf(\"%\" + lenSource + \"s  %s (%d bytes) %n\", r.desc().source(), r.desc().name(), r.end - r.begin);\n+                    pw.printf(\"%\" + lenSource + \"s  %s %n\", r.desc().source(), r.desc().name());\n@@ -819,0 +819,2 @@\n+        CountingMap<String> methodVersions = new CountingMap<>();\n+\n@@ -922,0 +924,7 @@\n+                        MethodDesc desc = MethodDesc.javaMethod(\n+                                map.get(\"method\"),\n+                                map.get(\"compiler\"),\n+                                map.get(\"level\"),\n+                                methodVersions.incrementAndGet(map.get(\"method\")),\n+                                map.get(\"compile_id\"));\n+\n@@ -923,1 +932,1 @@\n-                                MethodDesc.javaMethod(map.get(\"method\"), map.get(\"compiler\"), map.get(\"level\"), map.get(\"compile_id\")),\n+                                desc,\n@@ -1303,1 +1312,1 @@\n-        public static MethodDesc javaMethod(String name, String compiler, String level, String ver) {\n+        public static MethodDesc javaMethod(String name, String compiler, String level, int ver, String compileId) {\n@@ -1306,1 +1315,1 @@\n-                    methodName + \", version \" + ver,\n+                    methodName + \", version \" + ver + \", compile id \" + compileId,\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AbstractPerfAsmProfiler.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CountingMap<K> {\n+\n+    final Map<K, MutableInt> map = new HashMap<>();\n+\n+    public int incrementAndGet(K k) {\n+        MutableInt mi = map.get(k);\n+        if (mi == null) {\n+            mi = new MutableInt();\n+            map.put(k, mi);\n+        }\n+        return mi.incrementAndGet();\n+    }\n+\n+    private static class MutableInt {\n+        int value;\n+        int incrementAndGet() {\n+            return ++value;\n+        }\n+    }\n+\n+}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/CountingMap.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}