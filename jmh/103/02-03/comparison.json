{"files":[{"patch":"@@ -123,1 +123,2 @@\n-        if(benchmarkExecutorType != ExecutorType.CACHED_TPE) { \/\/ CachedThreadPool doesn't guarantee same thread rule\n+        if (benchmarkExecutorType == ExecutorType.FIXED_TPE ||\n+                benchmarkExecutorType == ExecutorType.VIRTUAL_TPE) { \/\/ only fixed and virtual guarantee same thread rule\n@@ -131,1 +132,1 @@\n-        if(benchmarkExecutorType == ExecutorType.VIRTUAL_TPE) {\n+        if (benchmarkExecutorType == ExecutorType.VIRTUAL_TPE) {\n@@ -148,1 +149,1 @@\n-        if(benchmarkExecutorType == ExecutorType.FJP) {\n+        if (benchmarkExecutorType == ExecutorType.FJP) {\n@@ -220,0 +221,13 @@\n+    @Test\n+    public void invokeAPI_fjp_common() throws RunnerException {\n+        for (int c = 0; c < Fixtures.repetitionCount(); c++) {\n+            Options opt = new OptionsBuilder()\n+                    .include(Fixtures.getTestMask(this.getClass()))\n+                    .jvmArgsAppend(\"-Djmh.executor=FJP_COMMON\")\n+                    .param(\"benchmarkExecutorType\", \"FJP\")\n+                    .shouldFailOnError(true)\n+                    .build();\n+            new Runner(opt).run();\n+        }\n+    }\n+\n@@ -226,1 +240,1 @@\n-                    .jvmArgsAppend(\"-Djmh.executor.class=\"+CustomExecutor.class.getName())\n+                    .jvmArgsAppend(\"-Djmh.executor.class=\" + CustomExecutor.class.getName())\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/BenchmarkBenchSameThreadTest.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -250,0 +250,1 @@\n+        boolean isFirstIteration = true;\n@@ -261,1 +262,1 @@\n-            IterationResult ir = handler.runIteration(benchParams, wp, isLastIteration);\n+            IterationResult ir = handler.runIteration(benchParams, wp, isFirstIteration, isLastIteration);\n@@ -263,0 +264,1 @@\n+            isFirstIteration = false;\n@@ -281,1 +283,1 @@\n-            IterationResult ir = handler.runIteration(benchParams, mp, isLastIteration);\n+            IterationResult ir = handler.runIteration(benchParams, mp, isFirstIteration, isLastIteration);\n@@ -283,0 +285,1 @@\n+            isFirstIteration = false;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BaseRunner.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+    private final BlockingQueue<WorkerData> orphanedWokerData;\n+\n+    private final CyclicBarrier wdBarrier;\n@@ -77,2 +80,6 @@\n-        tps = new ArrayBlockingQueue<>(executionParams.getThreads());\n-        tps.addAll(distributeThreads(executionParams.getThreads(), executionParams.getThreadGroups()));\n+        int threads = executionParams.getThreads();\n+        wdBarrier = new CyclicBarrier(threads, this::adoptWorkerData);\n+\n+        orphanedWokerData = new ArrayBlockingQueue<>(threads);\n+        tps = new ArrayBlockingQueue<>(threads);\n+        tps.addAll(distributeThreads(threads, executionParams.getThreadGroups()));\n@@ -84,1 +91,1 @@\n-            executor = EXECUTOR_TYPE.createExecutor(executionParams.getThreads(), executionParams.getBenchmark());\n+            executor = EXECUTOR_TYPE.createExecutor(threads, executionParams.getBenchmark());\n@@ -311,1 +318,1 @@\n-    public IterationResult runIteration(BenchmarkParams benchmarkParams, IterationParams params, boolean last) {\n+    public IterationResult runIteration(BenchmarkParams benchmarkParams, IterationParams params, boolean first, boolean last) {\n@@ -322,1 +329,1 @@\n-                preSetupBarrier, preTearDownBarrier, last,\n+                preSetupBarrier, preTearDownBarrier, first, last,\n@@ -440,5 +447,4 @@\n-    private WorkerData newWorkerData(Thread worker) {\n-        WorkerData wd = workerData.get(worker);\n-        if (wd != null) {\n-            return wd;\n-        }\n+    private void adoptWorkerData() {\n+        orphanedWokerData.addAll(workerData.values());\n+        workerData.clear();\n+    }\n@@ -446,0 +452,1 @@\n+    private WorkerData newWorkerData(Thread worker) {\n@@ -453,1 +460,1 @@\n-            wd = new WorkerData(o, t);\n+            WorkerData wd = new WorkerData(o, t);\n@@ -465,0 +472,20 @@\n+    private WorkerData findWorkerData(Thread worker) {\n+        WorkerData wd = workerData.remove(worker);\n+        try {\n+            wdBarrier.await();\n+        } catch (InterruptedException | BrokenBarrierException e) {\n+            throw new RuntimeException(\"Worker data barrier error \", e);\n+        }\n+        if (wd == null) {\n+            wd = orphanedWokerData.poll();\n+            if (wd == null) {\n+                throw new IllegalStateException(\"Cannot get another thread working data\");\n+            }\n+        }\n+        WorkerData exist = workerData.put(worker, wd);\n+        if (exist != null) {\n+            throw new IllegalStateException(\"Duplicate thread data\");\n+        }\n+        return wd;\n+    }\n+\n@@ -483,1 +510,1 @@\n-                WorkerData wd = newWorkerData(runner);\n+                WorkerData wd = control.isFirstIteration() ? newWorkerData(runner) : findWorkerData(runner);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkHandler.java","additions":39,"deletions":12,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                        CountDownLatch preSetup, CountDownLatch preTearDown, boolean lastIteration,\n+                        CountDownLatch preSetup, CountDownLatch preTearDown, boolean firstIteration, boolean lastIteration,\n@@ -61,1 +61,1 @@\n-        super(benchmarkParams, iterationParams, preSetup, preTearDown, lastIteration, notifyControl);\n+        super(benchmarkParams, iterationParams, preSetup, preTearDown, firstIteration, lastIteration, notifyControl);\n@@ -113,0 +113,4 @@\n+    public boolean isFirstIteration() {\n+        return firstIteration;\n+    }\n+\n@@ -164,0 +168,1 @@\n+    public final boolean firstIteration;\n@@ -178,1 +183,1 @@\n-                          CountDownLatch preSetup, CountDownLatch preTearDown, boolean lastIteration,\n+                          CountDownLatch preSetup, CountDownLatch preTearDown, boolean firstIteration, boolean lastIteration,\n@@ -196,0 +201,1 @@\n+        this.firstIteration = firstIteration;\n@@ -277,1 +283,1 @@\n-                          CountDownLatch preSetup, CountDownLatch preTearDown, boolean lastIteration,\n+                          CountDownLatch preSetup, CountDownLatch preTearDown, boolean firstIteration, boolean lastIteration,\n@@ -279,1 +285,1 @@\n-        super(benchmarkParams, iterationParams, preSetup, preTearDown, lastIteration, notifyControl);\n+        super(benchmarkParams, iterationParams, preSetup, preTearDown, firstIteration, lastIteration, notifyControl);\n@@ -287,1 +293,1 @@\n-                          CountDownLatch preSetup, CountDownLatch preTearDown, boolean lastIteration,\n+                          CountDownLatch preSetup, CountDownLatch preTearDown, boolean firstIteration, boolean lastIteration,\n@@ -289,1 +295,1 @@\n-        super(benchmarkParams, iterationParams, preSetup, preTearDown, lastIteration, notifyControl);\n+        super(benchmarkParams, iterationParams, preSetup, preTearDown, firstIteration, lastIteration, notifyControl);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/InfraControl.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"}]}