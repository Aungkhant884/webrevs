{"files":[{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.ct.states.dag.cycles;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.ct.CompileTest;\n+\n+public class NoDoubleUseCycleBenchmarkTest {\n+\n+    @State(Scope.Benchmark)\n+    public static class B {\n+    }\n+\n+    @State(Scope.Benchmark)\n+    public static class A {\n+        @Setup\n+        public void setup(B b1, B b2) {\n+\n+        }\n+        @TearDown\n+        public void teardown(B b1, B b2) {\n+\n+        }\n+    }\n+\n+    @Benchmark\n+    public void test(A a1, A a2) {\n+\n+    }\n+\n+    @Test\n+    public void compileTest() {\n+        CompileTest.assertOK(this.getClass());\n+    }\n+\n+}\n","filename":"jmh-core-ct\/src\/test\/java\/org\/openjdk\/jmh\/ct\/states\/dag\/cycles\/NoDoubleUseCycleBenchmarkTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.ct.states.dag.cycles;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.ct.CompileTest;\n+\n+public class NoDoubleUseCycleThreadTest {\n+\n+    @State(Scope.Thread)\n+    public static class B {\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class A {\n+        @Setup\n+        public void setup(B b1, B b2) {\n+\n+        }\n+        @TearDown\n+        public void teardown(B b1, B b2) {\n+\n+        }\n+    }\n+\n+    @Benchmark\n+    public void test(A a1, A a2) {\n+\n+    }\n+\n+    @Test\n+    public void compileTest() {\n+        CompileTest.assertOK(this.getClass());\n+    }\n+\n+}\n","filename":"jmh-core-ct\/src\/test\/java\/org\/openjdk\/jmh\/ct\/states\/dag\/cycles\/NoDoubleUseCycleThreadTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -222,7 +222,1 @@\n-        try {\n-            validateNoCyclesStep(Collections.<String>emptyList(), method, true);\n-        } catch (StackOverflowError e) {\n-            \/\/ \"YOLO Engineering\"\n-            throw new GenerationException(\"@\" + State.class.getSimpleName() +\n-                    \" dependency cycle is detected.\", method);\n-        }\n+        validateNoCyclesStep(Collections.<ClassQName>emptySet(), method, true);\n@@ -231,2 +225,3 @@\n-    private static void validateNoCyclesStep(List<String> states, MethodInfo method, boolean includeHolder) {\n-        List<ClassInfo> stratum = new ArrayList<>();\n+    private static void validateNoCyclesStep(Set<ClassQName> alreadySeen, MethodInfo method, boolean includeHolder) {\n+        \/\/ Collect and check outgoing edges\n+        Set<ClassQName> outgoing = new HashSet<>();\n@@ -234,1 +229,1 @@\n-            stratum.add(method.getDeclaringClass());\n+            outgoing.add(new ClassQName(method.getDeclaringClass()));\n@@ -237,1 +232,1 @@\n-            stratum.add(ppi.getType());\n+            outgoing.add(new ClassQName(ppi.getType()));\n@@ -239,5 +234,3 @@\n-\n-        List<String> newStates = new ArrayList<>();\n-        newStates.addAll(states);\n-        for (ClassInfo ci : stratum) {\n-            newStates.add(ci.getQualifiedName());\n+        if (outgoing.isEmpty()) {\n+            \/\/ No outgoing edges, checks complete.\n+            return;\n@@ -246,2 +239,17 @@\n-        for (ClassInfo ci : stratum) {\n-            for (MethodInfo mi : BenchmarkGeneratorUtils.getMethods(ci)) {\n+        Set<ClassQName> currentSeen = new HashSet<>();\n+        currentSeen.addAll(alreadySeen);\n+\n+        for (ClassQName ci : outgoing) {\n+            \/\/ Try see if we have already seen these edges for current method.\n+            \/\/ If so, this is a dependency cycle.\n+            if (!currentSeen.add(ci)) {\n+                throw new GenerationException(\"@\" + State.class.getSimpleName() +\n+                        \" dependency cycle is detected: \" + ci.ci.getQualifiedName() + \" \" + currentSeen, method);\n+            }\n+\n+            \/\/ For each fixture method that needs the state, see if we need to initialize those as well.\n+            \/\/ Restart the search from already seen + the outgoing edge.\n+            Set<ClassQName> nextSeen = new HashSet<>();\n+            nextSeen.addAll(alreadySeen);\n+            nextSeen.add(ci);\n+            for (MethodInfo mi : BenchmarkGeneratorUtils.getMethods(ci.ci)) {\n@@ -249,1 +257,1 @@\n-                    validateNoCyclesStep(newStates, mi, false);\n+                    validateNoCyclesStep(nextSeen, mi, false);\n@@ -255,0 +263,21 @@\n+    private static class ClassQName {\n+        private final ClassInfo ci;\n+\n+        private ClassQName(ClassInfo ci) {\n+            this.ci = ci;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ClassQName cycleInfo = (ClassQName) o;\n+            return Objects.equals(ci.getQualifiedName(), cycleInfo.ci.getQualifiedName());\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(ci.getQualifiedName());\n+        }\n+    }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/StateObjectHandler.java","additions":48,"deletions":19,"binary":false,"changes":67,"status":"modified"}]}