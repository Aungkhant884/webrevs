{"files":[{"patch":"@@ -38,1 +38,1 @@\n-public class ScoreStabilityBench {\n+public class BurstStabilityBench {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/benchmarks\/BurstStabilityBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/benchmarks\/ScoreStabilityBench.java","status":"renamed"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.benchmarks;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@Threads(1)\n+@State(Scope.Thread)\n+public class LongStabilityBench {\n+\n+    @Benchmark\n+    public void test() {\n+        Blackhole.consumeCPU(1_000_000);\n+    }\n+\n+}\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/benchmarks\/LongStabilityBench.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -161,2 +161,20 @@\n-                case stability:\n-                    new ScoreStabilityTest().runWith(pw, opts);\n+                case long_stability:\n+                    switch (mode) {\n+                        case flash:\n+                            new LongStabilityTest(3).runWith(pw, opts);\n+                            break;\n+                        case quick:\n+                            new LongStabilityTest(5).runWith(pw, opts);\n+                            break;\n+                        case normal:\n+                            new LongStabilityTest(18).runWith(pw, opts);\n+                            break;\n+                        case longer:\n+                            new LongStabilityTest(60).runWith(pw, opts);\n+                            break;\n+                        default:\n+                            throw new IllegalStateException();\n+                    }\n+                    break;\n+                case burst_stability:\n+                    new BurstStabilityTest().runWith(pw, opts);\n@@ -245,1 +263,2 @@\n-        stability,\n+        long_stability,\n+        burst_stability,\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/Main.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jmh.benchmarks.ScoreStabilityBench;\n+import org.openjdk.jmh.benchmarks.BurstStabilityBench;\n@@ -40,1 +40,1 @@\n-public class ScoreStabilityTest extends ValidationTest {\n+public class BurstStabilityTest extends ValidationTest {\n@@ -43,1 +43,1 @@\n-        pw.println(\"--------- SCORE STABILITY TEST\");\n+        pw.println(\"--------- BURST STABILITY TEST\");\n@@ -77,1 +77,1 @@\n-                        .include(ScoreStabilityBench.class.getCanonicalName())\n+                        .include(BurstStabilityBench.class.getCanonicalName())\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BurstStabilityTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/ScoreStabilityTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.validation.tests;\n+\n+import org.openjdk.jmh.benchmarks.LongStabilityBench;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.runner.options.TimeValue;\n+import org.openjdk.jmh.runner.options.VerboseMode;\n+import org.openjdk.jmh.validation.ValidationTest;\n+\n+import java.io.PrintWriter;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public class LongStabilityTest extends ValidationTest {\n+    private final int tries;\n+\n+    public LongStabilityTest(int tries) {\n+        this.tries = tries;\n+    }\n+\n+    @Override\n+    public void runWith(PrintWriter pw, Options parent) throws RunnerException {\n+        pw.println(\"--------- LONG STABILITY TEST\");\n+        pw.println();\n+\n+        org.openjdk.jmh.util.Utils.reflow(pw,\n+                \"This test verifies the performance for a single test by running it several times with some \" +\n+                        \"delays between the runs. The performance should be the same across all runs. \" +\n+                        \"If there is a significant difference between the runs, this is usually \" +\n+                        \"indicative of noisy environment, e.g. a busy virtualized node, or background processes \" +\n+                        \"interfering with the run, making the benchmarks unreliable.\",\n+                80, 2);\n+        pw.println();\n+\n+        for (int t = 0; t < tries; t++) {\n+            int ms = (t == 0) ? 0 : ThreadLocalRandom.current().nextInt(5_000, 30_000);\n+\n+            pw.printf(\"  Sleeping for %6d ms...\", ms);\n+            pw.flush();\n+            try {\n+                Thread.sleep(ms);\n+            } catch (InterruptedException e) {\n+                \/\/ Do nothing.\n+            }\n+\n+            pw.print(\"  Run: \");\n+            pw.flush();\n+\n+            Options opts = new OptionsBuilder()\n+                    .parent(parent)\n+                    .include(LongStabilityBench.class.getCanonicalName())\n+                    .warmupIterations(5)\n+                    .warmupTime(TimeValue.seconds(1))\n+                    .measurementIterations(5)\n+                    .measurementTime(TimeValue.seconds(1))\n+                    .forks(1)\n+                    .verbosity(VerboseMode.SILENT)\n+                    .build();\n+\n+            RunResult result = new Runner(opts).runSingle();\n+            Result r = result.getPrimaryResult();\n+            pw.printf(\" %16s\", String.format(\"%.2f \\u00b1 %.2f %s%n\", r.getScore(), r.getScoreError(), r.getScoreUnit()));\n+            pw.flush();\n+        }\n+    }\n+}\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/LongStabilityTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}