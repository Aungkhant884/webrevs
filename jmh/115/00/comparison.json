{"files":[{"patch":"@@ -94,1 +94,1 @@\n-        double classLoad = ProfilerTestUtils.checkedGet(sr, \"·class.load.norm\").getScore();\n+        double classLoad = ProfilerTestUtils.checkedGet(sr, \"class.load.norm\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/ClassloadProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-        double timeTotal = ProfilerTestUtils.checkedGet(sr, \"·compiler.time.total\").getScore();\n-        double timeProfiled = ProfilerTestUtils.checkedGet(sr, \"·compiler.time.profiled\").getScore();\n+        double timeTotal = ProfilerTestUtils.checkedGet(sr, \"compiler.time.total\").getScore();\n+        double timeProfiled = ProfilerTestUtils.checkedGet(sr, \"compiler.time.profiled\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/CompilerProfilerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        String out = ProfilerTestUtils.checkedGet(sr, \"·asm\").extendedInfo();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"asm\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/DTraceAsmProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,2 +87,2 @@\n-        double allocRateMB = ProfilerTestUtils.checkedGet(sr, \"·gc.alloc.rate\").getScore();\n-        double allocRateNormB = ProfilerTestUtils.checkedGet(sr, \"·gc.alloc.rate.norm\").getScore();\n+        double allocRateMB = ProfilerTestUtils.checkedGet(sr, \"gc.alloc.rate\").getScore();\n+        double allocRateNormB = ProfilerTestUtils.checkedGet(sr, \"gc.alloc.rate.norm\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/GCProfilerAllocRateTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        double allocRateNormB = ProfilerTestUtils.checkedGet(sr, \"·gc.alloc.rate.norm\").getScore();\n+        double allocRateNormB = ProfilerTestUtils.checkedGet(sr, \"gc.alloc.rate.norm\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/GCProfilerSeparateThreadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        String out = ProfilerTestUtils.checkedGet(sr, \"·asm\").extendedInfo();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"asm\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfAsmProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        String text = ProfilerTestUtils.checkedGet(sr, \"·perfc2c\").extendedInfo();\n+        String text = ProfilerTestUtils.checkedGet(sr, \"perfc2c\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfC2CProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        String msg = ProfilerTestUtils.checkedGet(sr, \"·perf\").extendedInfo();\n+        String msg = ProfilerTestUtils.checkedGet(sr, \"perf\").extendedInfo();\n@@ -79,3 +79,3 @@\n-        if (sr.containsKey(\"·ipc\")) {\n-            double ipc = ProfilerTestUtils.checkedGet(sr, \"·ipc\").getScore();\n-            double cpi = ProfilerTestUtils.checkedGet(sr, \"·cpi\").getScore();\n+        if (sr.containsKey(\"ipc\")) {\n+            double ipc = ProfilerTestUtils.checkedGet(sr, \"ipc\").getScore();\n+            double cpi = ProfilerTestUtils.checkedGet(sr, \"cpi\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfProfilerTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,3 +63,3 @@\n-        double usedMetaspace = ProfilerTestUtils.checkedGet(sr, \"·mempool.Metaspace.used\").getScore();\n-        double usedTotal = ProfilerTestUtils.checkedGet(sr, \"·mempool.total.used\").getScore();\n-        double usedTotalCodeheap = ProfilerTestUtils.checkedGet(sr, \"·mempool.total.codeheap.used\").getScore();\n+        double usedMetaspace = ProfilerTestUtils.checkedGet(sr, \"mempool.Metaspace.used\").getScore();\n+        double usedTotal = ProfilerTestUtils.checkedGet(sr, \"mempool.total.used\").getScore();\n+        double usedTotalCodeheap = ProfilerTestUtils.checkedGet(sr, \"mempool.total.codeheap.used\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/MemPoolProfilerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,3 +64,3 @@\n-        double interval = ProfilerTestUtils.checkedGet(sr, \"·safepoints.interval\").getScore();\n-        double pauseTotal = ProfilerTestUtils.checkedGet(sr, \"·safepoints.pause\").getScore();\n-        double ttspTotal = ProfilerTestUtils.checkedGet(sr, \"·safepoints.ttsp\").getScore();\n+        double interval = ProfilerTestUtils.checkedGet(sr, \"safepoints.interval\").getScore();\n+        double pauseTotal = ProfilerTestUtils.checkedGet(sr, \"safepoints.pause\").getScore();\n+        double ttspTotal = ProfilerTestUtils.checkedGet(sr, \"safepoints.ttsp\").getScore();\n@@ -68,2 +68,2 @@\n-        double pauseCount = ProfilerTestUtils.checkedGet(sr, \"·safepoints.pause.count\").getScore();\n-        double ttspCount = ProfilerTestUtils.checkedGet(sr, \"·safepoints.ttsp.count\").getScore();\n+        double pauseCount = ProfilerTestUtils.checkedGet(sr, \"safepoints.pause.count\").getScore();\n+        double ttspCount = ProfilerTestUtils.checkedGet(sr, \"safepoints.ttsp.count\").getScore();\n@@ -101,2 +101,2 @@\n-            double curPause = ProfilerTestUtils.checkedGet(sr, \"·safepoints.pause.p\" + suff).getScore();\n-            double curTTSP = ProfilerTestUtils.checkedGet(sr, \"·safepoints.ttsp.p\" + suff).getScore();\n+            double curPause = ProfilerTestUtils.checkedGet(sr, \"safepoints.pause.p\" + suff).getScore();\n+            double curTTSP = ProfilerTestUtils.checkedGet(sr, \"safepoints.ttsp.p\" + suff).getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/SafepointsProfilerTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        String out = ProfilerTestUtils.checkedGet(sr, \"·stack\").extendedInfo();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"stack\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/StackProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        String out = ProfilerTestUtils.checkedGet(sr, \"·asm\").extendedInfo();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"asm\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/WinPerfAsmProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-            results.add(new ScalarResult(Defaults.PREFIX + \"class.load\", loaded \/ time, \"classes\/sec\", AggregationPolicy.AVG));\n-            results.add(new ScalarResult(Defaults.PREFIX + \"class.load.norm\", 1.0 * loaded \/ allOps, \"classes\/op\", AggregationPolicy.AVG));\n+            results.add(new ScalarResult(\"class.load\", loaded \/ time, \"classes\/sec\", AggregationPolicy.AVG));\n+            results.add(new ScalarResult(\"class.load.norm\", 1.0 * loaded \/ allOps, \"classes\/op\", AggregationPolicy.AVG));\n@@ -91,2 +91,2 @@\n-            results.add(new ScalarResult(Defaults.PREFIX + \"class.unload\", unloaded \/ time, \"classes\/sec\", AggregationPolicy.AVG));\n-            results.add(new ScalarResult(Defaults.PREFIX + \"class.unload.norm\", 1.0 * unloaded \/ allOps, \"classes\/op\", AggregationPolicy.AVG));\n+            results.add(new ScalarResult(\"class.unload\", unloaded \/ time, \"classes\/sec\", AggregationPolicy.AVG));\n+            results.add(new ScalarResult(\"class.unload.norm\", 1.0 * unloaded \/ allOps, \"classes\/op\", AggregationPolicy.AVG));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/ClassloaderProfiler.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-                new ScalarResult(Defaults.PREFIX + \"compiler.time.profiled\", curTime - startCompTime, \"ms\", AggregationPolicy.SUM),\n-                new ScalarResult(Defaults.PREFIX + \"compiler.time.total\", curTime, \"ms\", AggregationPolicy.MAX)\n+                new ScalarResult(\"compiler.time.profiled\", curTime - startCompTime, \"ms\", AggregationPolicy.SUM),\n+                new ScalarResult(\"compiler.time.total\", curTime, \"ms\", AggregationPolicy.MAX)\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/CompilerProfiler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-                Defaults.PREFIX + \"gc.count\",\n+                \"gc.count\",\n@@ -146,1 +146,1 @@\n-                    Defaults.PREFIX + \"gc.time\",\n+                    \"gc.time\",\n@@ -157,1 +157,1 @@\n-                results.add(new ScalarResult(Defaults.PREFIX + \"gc.alloc.rate\",\n+                results.add(new ScalarResult(\"gc.alloc.rate\",\n@@ -164,1 +164,1 @@\n-                    results.add(new ScalarResult(Defaults.PREFIX + \"gc.alloc.rate.norm\",\n+                    results.add(new ScalarResult(\"gc.alloc.rate.norm\",\n@@ -172,1 +172,1 @@\n-                results.add(new ScalarResult(Defaults.PREFIX + \"gc.alloc.rate\",\n+                results.add(new ScalarResult(\"gc.alloc.rate\",\n@@ -190,1 +190,1 @@\n-                        Defaults.PREFIX + \"gc.churn.\" + spaceName + \"\",\n+                        \"gc.churn.\" + spaceName + \"\",\n@@ -196,1 +196,1 @@\n-                        Defaults.PREFIX + \"gc.churn.\" + spaceName + \".norm\",\n+                        \"gc.churn.\" + spaceName + \".norm\",\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/GCProfiler.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-            super(ResultRole.SECONDARY, Defaults.PREFIX + \"perf\", of(Double.NaN), \"---\", AggregationPolicy.AVG);\n+            super(ResultRole.SECONDARY, \"perf\", of(Double.NaN), \"---\", AggregationPolicy.AVG);\n@@ -229,2 +229,2 @@\n-                res.add(new ScalarDerivativeResult(Defaults.PREFIX + \"ipc\", 1.0 * instructions \/ cycles, \"insns\/clk\", AggregationPolicy.AVG));\n-                res.add(new ScalarDerivativeResult(Defaults.PREFIX + \"cpi\", 1.0 * cycles \/ instructions, \"clks\/insn\", AggregationPolicy.AVG));\n+                res.add(new ScalarDerivativeResult(\"ipc\", 1.0 * instructions \/ cycles, \"insns\/clk\", AggregationPolicy.AVG));\n+                res.add(new ScalarDerivativeResult(\"cpi\", 1.0 * cycles \/ instructions, \"clks\/insn\", AggregationPolicy.AVG));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/LinuxPerfProfiler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-            results.add(new ScalarResult(Defaults.PREFIX + \"mempool.\" + bean.getName() + \".used\", used \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n+            results.add(new ScalarResult(\"mempool.\" + bean.getName() + \".used\", used \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n@@ -68,2 +68,2 @@\n-        results.add(new ScalarResult(Defaults.PREFIX + \"mempool.total.codeheap.used\", sumCodeHeap \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n-        results.add(new ScalarResult(Defaults.PREFIX + \"mempool.total.used\", sum \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n+        results.add(new ScalarResult(\"mempool.total.codeheap.used\", sumCodeHeap \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n+        results.add(new ScalarResult(\"mempool.total.used\", sum \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/MemPoolProfiler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-            super(ResultRole.SECONDARY, Defaults.PREFIX + \"pauses\", buffer.getStatistics(1D \/ 1_000_000), \"ms\", AggregationPolicy.SUM);\n+            super(ResultRole.SECONDARY, \"pauses\", buffer.getStatistics(1D \/ 1_000_000), \"ms\", AggregationPolicy.SUM);\n@@ -179,10 +179,10 @@\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.avg\",      statistics.getMean(),           \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.count\",    statistics.getN(),              \"#\",  AggregationPolicy.SUM),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p0.00\",    statistics.getMin(),            \"ms\", AggregationPolicy.MIN),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p0.50\",    statistics.getPercentile(50),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p0.90\",    statistics.getPercentile(90),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p0.95\",    statistics.getPercentile(95),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p0.99\",    statistics.getPercentile(99),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p0.999\",   statistics.getPercentile(99.9), \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p0.9999\",  statistics.getPercentile(99.99),\"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"pauses.p1.00\",    statistics.getMax(),            \"ms\", AggregationPolicy.MAX)\n+                new ScalarDerivativeResult(\"pauses.avg\",      statistics.getMean(),           \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"pauses.count\",    statistics.getN(),              \"#\",  AggregationPolicy.SUM),\n+                new ScalarDerivativeResult(\"pauses.p0.00\",    statistics.getMin(),            \"ms\", AggregationPolicy.MIN),\n+                new ScalarDerivativeResult(\"pauses.p0.50\",    statistics.getPercentile(50),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"pauses.p0.90\",    statistics.getPercentile(90),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"pauses.p0.95\",    statistics.getPercentile(95),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"pauses.p0.99\",    statistics.getPercentile(99),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"pauses.p0.999\",   statistics.getPercentile(99.9), \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"pauses.p0.9999\",  statistics.getPercentile(99.99),\"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"pauses.p1.00\",    statistics.getMax(),            \"ms\", AggregationPolicy.MAX)\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/PausesProfiler.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-        results.add(new ScalarResult(Defaults.PREFIX + \"safepoints.interval\",\n+        results.add(new ScalarResult(\"safepoints.interval\",\n@@ -156,1 +156,1 @@\n-            super(ResultRole.SECONDARY, Defaults.PREFIX + \"safepoints.\" + suffix, buffer.getStatistics(1D \/ 1_000_000), \"ms\", AggregationPolicy.SUM);\n+            super(ResultRole.SECONDARY, \"safepoints.\" + suffix, buffer.getStatistics(1D \/ 1_000_000), \"ms\", AggregationPolicy.SUM);\n@@ -174,10 +174,10 @@\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".avg\",      statistics.getMean(),           \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".count\",    statistics.getN(),              \"#\",  AggregationPolicy.SUM),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p0.00\",    statistics.getMin(),            \"ms\", AggregationPolicy.MIN),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p0.50\",    statistics.getPercentile(50),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p0.90\",    statistics.getPercentile(90),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p0.95\",    statistics.getPercentile(95),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p0.99\",    statistics.getPercentile(99),   \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p0.999\",   statistics.getPercentile(99.9), \"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p0.9999\",  statistics.getPercentile(99.99),\"ms\", AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(Defaults.PREFIX + \"safepoints.\" + suffix + \".p1.00\",    statistics.getMax(),            \"ms\", AggregationPolicy.MAX)\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".avg\",      statistics.getMean(),           \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".count\",    statistics.getN(),              \"#\",  AggregationPolicy.SUM),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p0.00\",    statistics.getMin(),            \"ms\", AggregationPolicy.MIN),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p0.50\",    statistics.getPercentile(50),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p0.90\",    statistics.getPercentile(90),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p0.95\",    statistics.getPercentile(95),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p0.99\",    statistics.getPercentile(99),   \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p0.999\",   statistics.getPercentile(99.9), \"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p0.9999\",  statistics.getPercentile(99.99),\"ms\", AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(\"safepoints.\" + suffix + \".p1.00\",    statistics.getMax(),            \"ms\", AggregationPolicy.MAX)\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/SafepointsProfiler.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-            super(ResultRole.SECONDARY, Defaults.PREFIX + \"stack\", of(Double.NaN), \"---\", AggregationPolicy.AVG);\n+            super(ResultRole.SECONDARY, \"stack\", of(Double.NaN), \"---\", AggregationPolicy.AVG);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/StackProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.results;\n-\n-public class Defaults {\n-\n-    public static final String PREFIX = \"\\u00b7\";\n-\n-}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/Defaults.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -67,0 +67,1 @@\n+        String s = role.isPrimary() ? \"\" : (label + \":\");\n@@ -68,8 +69,8 @@\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p0.00\",   statistics.getPercentile(0),        getScoreUnit(), AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p0.50\",   statistics.getPercentile(50),       getScoreUnit(), AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p0.90\",   statistics.getPercentile(90),       getScoreUnit(), AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p0.95\",   statistics.getPercentile(95),       getScoreUnit(), AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p0.99\",   statistics.getPercentile(99),       getScoreUnit(), AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p0.999\",  statistics.getPercentile(99.9),     getScoreUnit(), AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p0.9999\", statistics.getPercentile(99.99),    getScoreUnit(), AggregationPolicy.AVG),\n-                new ScalarDerivativeResult(label + Defaults.PREFIX + \"p1.00\",   statistics.getPercentile(100),      getScoreUnit(), AggregationPolicy.AVG)\n+                new ScalarDerivativeResult(s + \"p0.00\",   statistics.getPercentile(0),        getScoreUnit(), AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(s + \"p0.50\",   statistics.getPercentile(50),       getScoreUnit(), AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(s + \"p0.90\",   statistics.getPercentile(90),       getScoreUnit(), AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(s + \"p0.95\",   statistics.getPercentile(95),       getScoreUnit(), AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(s + \"p0.99\",   statistics.getPercentile(99),       getScoreUnit(), AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(s + \"p0.999\",  statistics.getPercentile(99.9),     getScoreUnit(), AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(s + \"p0.9999\", statistics.getPercentile(99.99),    getScoreUnit(), AggregationPolicy.AVG),\n+                new ScalarDerivativeResult(s + \"p1.00\",   statistics.getPercentile(100),      getScoreUnit(), AggregationPolicy.AVG)\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/SampleTimeResult.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-        super(ResultRole.SECONDARY, Defaults.PREFIX + label, of(Double.NaN), \"---\", AggregationPolicy.AVG);\n+        super(ResultRole.SECONDARY, label, of(Double.NaN), \"---\", AggregationPolicy.AVG);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/TextResult.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,21 +172,21 @@\n-              Benchmark                                                            (type)  Mode  Cnt    Score     Error   Units\n-\n-              JMHSample_35_Profilers.Maps.test                                   hashmap  avgt    5  1553.201 ±   6.199   ns\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.alloc.rate                    hashmap  avgt    5  1257.046 ±   5.675  MB\/sec\n-              JMHSample_35_Profilers.Maps.test:·gc.alloc.rate.norm               hashmap  avgt    5  2048.001 ±   0.001    B\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Eden_Space           hashmap  avgt    5  1259.148 ± 315.277  MB\/sec\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Eden_Space.norm      hashmap  avgt    5  2051.519 ± 520.324    B\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Survivor_Space       hashmap  avgt    5     0.175 ±   0.386  MB\/sec\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Survivor_Space.norm  hashmap  avgt    5     0.285 ±   0.629    B\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.count                         hashmap  avgt    5    29.000            counts\n-              JMHSample_35_Profilers.Maps.test:·gc.time                          hashmap  avgt    5    16.000                ms\n-\n-              JMHSample_35_Profilers.Maps.test                                   treemap  avgt    5  5177.065 ± 361.278   ns\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.alloc.rate                    treemap  avgt    5   377.251 ±  26.188  MB\/sec\n-              JMHSample_35_Profilers.Maps.test:·gc.alloc.rate.norm               treemap  avgt    5  2048.003 ±   0.001    B\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Eden_Space           treemap  avgt    5   392.743 ± 174.156  MB\/sec\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Eden_Space.norm      treemap  avgt    5  2131.767 ± 913.941    B\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Survivor_Space       treemap  avgt    5     0.131 ±   0.215  MB\/sec\n-              JMHSample_35_Profilers.Maps.test:·gc.churn.PS_Survivor_Space.norm  treemap  avgt    5     0.709 ±   1.125    B\/op\n-              JMHSample_35_Profilers.Maps.test:·gc.count                         treemap  avgt    5    25.000            counts\n-              JMHSample_35_Profilers.Maps.test:·gc.time                          treemap  avgt    5    26.000                ms\n+              Benchmark                                                           (type)  Mode  Cnt    Score     Error   Units\n+\n+              JMHSample_35_Profilers.Maps.test                                  hashmap  avgt    5  1553.201 ±   6.199   ns\/op\n+              JMHSample_35_Profilers.Maps.test:gc.alloc.rate                    hashmap  avgt    5  1257.046 ±   5.675  MB\/sec\n+              JMHSample_35_Profilers.Maps.test:gc.alloc.rate.norm               hashmap  avgt    5  2048.001 ±   0.001    B\/op\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Eden_Space           hashmap  avgt    5  1259.148 ± 315.277  MB\/sec\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Eden_Space.norm      hashmap  avgt    5  2051.519 ± 520.324    B\/op\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Survivor_Space       hashmap  avgt    5     0.175 ±   0.386  MB\/sec\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Survivor_Space.norm  hashmap  avgt    5     0.285 ±   0.629    B\/op\n+              JMHSample_35_Profilers.Maps.test:gc.count                         hashmap  avgt    5    29.000            counts\n+              JMHSample_35_Profilers.Maps.test:gc.time                          hashmap  avgt    5    16.000                ms\n+\n+              JMHSample_35_Profilers.Maps.test                                  treemap  avgt    5  5177.065 ± 361.278   ns\/op\n+              JMHSample_35_Profilers.Maps.test:gc.alloc.rate                    treemap  avgt    5   377.251 ±  26.188  MB\/sec\n+              JMHSample_35_Profilers.Maps.test:gc.alloc.rate.norm               treemap  avgt    5  2048.003 ±   0.001    B\/op\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Eden_Space           treemap  avgt    5   392.743 ± 174.156  MB\/sec\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Eden_Space.norm      treemap  avgt    5  2131.767 ± 913.941    B\/op\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Survivor_Space       treemap  avgt    5     0.131 ±   0.215  MB\/sec\n+              JMHSample_35_Profilers.Maps.test:gc.churn.PS_Survivor_Space.norm  treemap  avgt    5     0.709 ±   1.125    B\/op\n+              JMHSample_35_Profilers.Maps.test:gc.count                         treemap  avgt    5    25.000            counts\n+              JMHSample_35_Profilers.Maps.test:gc.time                          treemap  avgt    5    26.000                ms\n@@ -290,6 +290,6 @@\n-                Benchmark                                              Mode  Cnt      Score      Error        Units\n-                JMHSample_35_Profilers.Classy.load                     avgt   15  34215.363 ±  545.892        ns\/op\n-                JMHSample_35_Profilers.Classy.load:·class.load         avgt   15  29374.097 ±  716.743  classes\/sec\n-                JMHSample_35_Profilers.Classy.load:·class.load.norm    avgt   15      1.000 ±    0.001   classes\/op\n-                JMHSample_35_Profilers.Classy.load:·class.unload       avgt   15  29598.233 ± 3420.181  classes\/sec\n-                JMHSample_35_Profilers.Classy.load:·class.unload.norm  avgt   15      1.008 ±    0.119   classes\/op\n+                Benchmark                                             Mode  Cnt      Score      Error        Units\n+                JMHSample_35_Profilers.Classy.load                    avgt   15  34215.363 ±  545.892        ns\/op\n+                JMHSample_35_Profilers.Classy.load:class.load         avgt   15  29374.097 ±  716.743  classes\/sec\n+                JMHSample_35_Profilers.Classy.load:class.load.norm    avgt   15      1.000 ±    0.001   classes\/op\n+                JMHSample_35_Profilers.Classy.load:class.unload       avgt   15  29598.233 ± 3420.181  classes\/sec\n+                JMHSample_35_Profilers.Classy.load:class.unload.norm  avgt   15      1.008 ±    0.119   classes\/op\n@@ -309,4 +309,4 @@\n-                Benchmark                                                   Mode  Cnt      Score      Error  Units\n-                JMHSample_35_Profilers.Classy.load                          avgt    5  33523.875 ± 3026.025  ns\/op\n-                JMHSample_35_Profilers.Classy.load:·compiler.time.profiled  avgt    5      5.000                ms\n-                JMHSample_35_Profilers.Classy.load:·compiler.time.total     avgt    5    479.000                ms\n+                Benchmark                                                  Mode  Cnt      Score      Error  Units\n+                JMHSample_35_Profilers.Classy.load                         avgt    5  33523.875 ± 3026.025  ns\/op\n+                JMHSample_35_Profilers.Classy.load:compiler.time.profiled  avgt    5      5.000                ms\n+                JMHSample_35_Profilers.Classy.load:compiler.time.total     avgt    5    479.000                ms\n@@ -422,26 +422,26 @@\n-                Benchmark                                                   Mode  Cnt   Score    Error  Units\n-                JMHSample_35_Profilers.Atomic.test                          avgt   15   6.551 ±  0.023  ns\/op\n-                JMHSample_35_Profilers.Atomic.test:·CPI                     avgt    3   0.933 ±  0.026   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-load-misses   avgt    3   0.001 ±  0.022   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-loads         avgt    3  12.267 ±  1.324   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-store-misses  avgt    3   0.001 ±  0.006   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-stores        avgt    3   4.090 ±  0.402   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-icache-load-misses   avgt    3   0.001 ±  0.011   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·LLC-loads               avgt    3   0.001 ±  0.004   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·LLC-stores              avgt    3  ≈ 10⁻⁴            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·branch-misses           avgt    3  ≈ 10⁻⁴            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·branches                avgt    3   6.152 ±  0.385   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·bus-cycles              avgt    3   0.670 ±  0.048   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·context-switches        avgt    3  ≈ 10⁻⁶            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·cpu-migrations          avgt    3  ≈ 10⁻⁷            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·cycles                  avgt    3  26.790 ±  1.393   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-load-misses        avgt    3  ≈ 10⁻⁴            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-loads              avgt    3  12.278 ±  0.277   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-store-misses       avgt    3  ≈ 10⁻⁵            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-stores             avgt    3   4.113 ±  0.437   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·iTLB-load-misses        avgt    3  ≈ 10⁻⁵            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·iTLB-loads              avgt    3   0.001 ±  0.034   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·instructions            avgt    3  28.729 ±  1.297   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·minor-faults            avgt    3  ≈ 10⁻⁷            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·page-faults             avgt    3  ≈ 10⁻⁷            #\/op\n-                JMHSample_35_Profilers.Atomic.test:·ref-cycles              avgt    3  26.734 ±  2.081   #\/op\n+                Benchmark                                                  Mode  Cnt   Score    Error  Units\n+                JMHSample_35_Profilers.Atomic.test                         avgt   15   6.551 ±  0.023  ns\/op\n+                JMHSample_35_Profilers.Atomic.test:CPI                     avgt    3   0.933 ±  0.026   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-load-misses   avgt    3   0.001 ±  0.022   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-loads         avgt    3  12.267 ±  1.324   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-store-misses  avgt    3   0.001 ±  0.006   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-stores        avgt    3   4.090 ±  0.402   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-icache-load-misses   avgt    3   0.001 ±  0.011   #\/op\n+                JMHSample_35_Profilers.Atomic.test:LLC-loads               avgt    3   0.001 ±  0.004   #\/op\n+                JMHSample_35_Profilers.Atomic.test:LLC-stores              avgt    3  ≈ 10⁻⁴            #\/op\n+                JMHSample_35_Profilers.Atomic.test:branch-misses           avgt    3  ≈ 10⁻⁴            #\/op\n+                JMHSample_35_Profilers.Atomic.test:branches                avgt    3   6.152 ±  0.385   #\/op\n+                JMHSample_35_Profilers.Atomic.test:bus-cycles              avgt    3   0.670 ±  0.048   #\/op\n+                JMHSample_35_Profilers.Atomic.test:context-switches        avgt    3  ≈ 10⁻⁶            #\/op\n+                JMHSample_35_Profilers.Atomic.test:cpu-migrations          avgt    3  ≈ 10⁻⁷            #\/op\n+                JMHSample_35_Profilers.Atomic.test:cycles                  avgt    3  26.790 ±  1.393   #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-load-misses        avgt    3  ≈ 10⁻⁴            #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-loads              avgt    3  12.278 ±  0.277   #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-store-misses       avgt    3  ≈ 10⁻⁵            #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-stores             avgt    3   4.113 ±  0.437   #\/op\n+                JMHSample_35_Profilers.Atomic.test:iTLB-load-misses        avgt    3  ≈ 10⁻⁵            #\/op\n+                JMHSample_35_Profilers.Atomic.test:iTLB-loads              avgt    3   0.001 ±  0.034   #\/op\n+                JMHSample_35_Profilers.Atomic.test:instructions            avgt    3  28.729 ±  1.297   #\/op\n+                JMHSample_35_Profilers.Atomic.test:minor-faults            avgt    3  ≈ 10⁻⁷            #\/op\n+                JMHSample_35_Profilers.Atomic.test:page-faults             avgt    3  ≈ 10⁻⁷            #\/op\n+                JMHSample_35_Profilers.Atomic.test:ref-cycles              avgt    3  26.734 ±  2.081   #\/op\n@@ -458,26 +458,26 @@\n-                Benchmark                                                   Mode  Cnt    Score     Error  Units\n-                JMHSample_35_Profilers.Atomic.test                          avgt   15  143.595 ±   1.968  ns\/op\n-                JMHSample_35_Profilers.Atomic.test:·CPI                     avgt    3   17.741 ±  28.761   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-load-misses   avgt    3    0.175 ±   0.406   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-loads         avgt    3   11.872 ±   0.786   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-store-misses  avgt    3    0.184 ±   0.505   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-dcache-stores        avgt    3    4.422 ±   0.561   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·L1-icache-load-misses   avgt    3    0.015 ±   0.083   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·LLC-loads               avgt    3    0.015 ±   0.128   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·LLC-stores              avgt    3    1.036 ±   0.045   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·branch-misses           avgt    3    0.224 ±   0.492   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·branches                avgt    3    6.524 ±   2.873   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·bus-cycles              avgt    3   13.475 ±  14.502   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·context-switches        avgt    3   ≈ 10⁻⁴             #\/op\n-                JMHSample_35_Profilers.Atomic.test:·cpu-migrations          avgt    3   ≈ 10⁻⁶             #\/op\n-                JMHSample_35_Profilers.Atomic.test:·cycles                  avgt    3  537.874 ± 595.723   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-load-misses        avgt    3    0.001 ±   0.006   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-loads              avgt    3   12.032 ±   2.430   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-store-misses       avgt    3   ≈ 10⁻⁴             #\/op\n-                JMHSample_35_Profilers.Atomic.test:·dTLB-stores             avgt    3    4.557 ±   0.948   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·iTLB-load-misses        avgt    3   ≈ 10⁻³             #\/op\n-                JMHSample_35_Profilers.Atomic.test:·iTLB-loads              avgt    3    0.016 ±   0.052   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·instructions            avgt    3   30.367 ±  15.052   #\/op\n-                JMHSample_35_Profilers.Atomic.test:·minor-faults            avgt    3   ≈ 10⁻⁵             #\/op\n-                JMHSample_35_Profilers.Atomic.test:·page-faults             avgt    3   ≈ 10⁻⁵             #\/op\n-                JMHSample_35_Profilers.Atomic.test:·ref-cycles              avgt    3  538.697 ± 590.183   #\/op\n+                Benchmark                                                  Mode  Cnt    Score     Error  Units\n+                JMHSample_35_Profilers.Atomic.test                         avgt   15  143.595 ±   1.968  ns\/op\n+                JMHSample_35_Profilers.Atomic.test:CPI                     avgt    3   17.741 ±  28.761   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-load-misses   avgt    3    0.175 ±   0.406   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-loads         avgt    3   11.872 ±   0.786   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-store-misses  avgt    3    0.184 ±   0.505   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-dcache-stores        avgt    3    4.422 ±   0.561   #\/op\n+                JMHSample_35_Profilers.Atomic.test:L1-icache-load-misses   avgt    3    0.015 ±   0.083   #\/op\n+                JMHSample_35_Profilers.Atomic.test:LLC-loads               avgt    3    0.015 ±   0.128   #\/op\n+                JMHSample_35_Profilers.Atomic.test:LLC-stores              avgt    3    1.036 ±   0.045   #\/op\n+                JMHSample_35_Profilers.Atomic.test:branch-misses           avgt    3    0.224 ±   0.492   #\/op\n+                JMHSample_35_Profilers.Atomic.test:branches                avgt    3    6.524 ±   2.873   #\/op\n+                JMHSample_35_Profilers.Atomic.test:bus-cycles              avgt    3   13.475 ±  14.502   #\/op\n+                JMHSample_35_Profilers.Atomic.test:context-switches        avgt    3   ≈ 10⁻⁴             #\/op\n+                JMHSample_35_Profilers.Atomic.test:cpu-migrations          avgt    3   ≈ 10⁻⁶             #\/op\n+                JMHSample_35_Profilers.Atomic.test:cycles                  avgt    3  537.874 ± 595.723   #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-load-misses        avgt    3    0.001 ±   0.006   #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-loads              avgt    3   12.032 ±   2.430   #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-store-misses       avgt    3   ≈ 10⁻⁴             #\/op\n+                JMHSample_35_Profilers.Atomic.test:dTLB-stores             avgt    3    4.557 ±   0.948   #\/op\n+                JMHSample_35_Profilers.Atomic.test:iTLB-load-misses        avgt    3   ≈ 10⁻³             #\/op\n+                JMHSample_35_Profilers.Atomic.test:iTLB-loads              avgt    3    0.016 ±   0.052   #\/op\n+                JMHSample_35_Profilers.Atomic.test:instructions            avgt    3   30.367 ±  15.052   #\/op\n+                JMHSample_35_Profilers.Atomic.test:minor-faults            avgt    3   ≈ 10⁻⁵             #\/op\n+                JMHSample_35_Profilers.Atomic.test:page-faults             avgt    3   ≈ 10⁻⁵             #\/op\n+                JMHSample_35_Profilers.Atomic.test:ref-cycles              avgt    3  538.697 ± 590.183   #\/op\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_35_Profilers.java","additions":83,"deletions":83,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -111,14 +111,14 @@\n-        Benchmark                                                       Mode  Cnt   Score    Error  Units\n-        JMHSample_36_BranchPrediction.sorted                            avgt   25   2.160 ±  0.049  ns\/op\n-        JMHSample_36_BranchPrediction.sorted:·CPI                       avgt    5   0.286 ±  0.025   #\/op\n-        JMHSample_36_BranchPrediction.sorted:·branch-misses             avgt    5  ≈ 10⁻⁴            #\/op\n-        JMHSample_36_BranchPrediction.sorted:·branches                  avgt    5   7.606 ±  1.742   #\/op\n-        JMHSample_36_BranchPrediction.sorted:·cycles                    avgt    5   8.998 ±  1.081   #\/op\n-        JMHSample_36_BranchPrediction.sorted:·instructions              avgt    5  31.442 ±  4.899   #\/op\n-\n-        JMHSample_36_BranchPrediction.unsorted                          avgt   25   5.943 ±  0.018  ns\/op\n-        JMHSample_36_BranchPrediction.unsorted:·CPI                     avgt    5   0.775 ±  0.052   #\/op\n-        JMHSample_36_BranchPrediction.unsorted:·branch-misses           avgt    5   0.529 ±  0.026   #\/op  <--- OOPS\n-        JMHSample_36_BranchPrediction.unsorted:·branches                avgt    5   7.841 ±  0.046   #\/op\n-        JMHSample_36_BranchPrediction.unsorted:·cycles                  avgt    5  24.793 ±  0.434   #\/op\n-        JMHSample_36_BranchPrediction.unsorted:·instructions            avgt    5  31.994 ±  2.342   #\/op\n+        Benchmark                                                      Mode  Cnt   Score    Error  Units\n+        JMHSample_36_BranchPrediction.sorted                           avgt   25   2.160 ±  0.049  ns\/op\n+        JMHSample_36_BranchPrediction.sorted:CPI                       avgt    5   0.286 ±  0.025   #\/op\n+        JMHSample_36_BranchPrediction.sorted:branch-misses             avgt    5  ≈ 10⁻⁴            #\/op\n+        JMHSample_36_BranchPrediction.sorted:branches                  avgt    5   7.606 ±  1.742   #\/op\n+        JMHSample_36_BranchPrediction.sorted:cycles                    avgt    5   8.998 ±  1.081   #\/op\n+        JMHSample_36_BranchPrediction.sorted:instructions              avgt    5  31.442 ±  4.899   #\/op\n+\n+        JMHSample_36_BranchPrediction.unsorted                         avgt   25   5.943 ±  0.018  ns\/op\n+        JMHSample_36_BranchPrediction.unsorted:CPI                     avgt    5   0.775 ±  0.052   #\/op\n+        JMHSample_36_BranchPrediction.unsorted:branch-misses           avgt    5   0.529 ±  0.026   #\/op  <--- OOPS\n+        JMHSample_36_BranchPrediction.unsorted:branches                avgt    5   7.841 ±  0.046   #\/op\n+        JMHSample_36_BranchPrediction.unsorted:cycles                  avgt    5  24.793 ±  0.434   #\/op\n+        JMHSample_36_BranchPrediction.unsorted:instructions            avgt    5  31.994 ±  2.342   #\/op\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_36_BranchPrediction.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -100,16 +100,16 @@\n-        Benchmark                                                 Mode  Cnt   Score    Error  Units\n-        JMHSample_37_MatrixCopy.colFirst                          avgt   25   5.306 ±  0.020  ns\/op\n-        JMHSample_37_MatrixCopy.colFirst:·CPI                     avgt    5   0.621 ±  0.011   #\/op\n-        JMHSample_37_MatrixCopy.colFirst:·L1-dcache-load-misses   avgt    5   2.177 ±  0.044   #\/op <-- OOPS\n-        JMHSample_37_MatrixCopy.colFirst:·L1-dcache-loads         avgt    5  14.804 ±  0.261   #\/op\n-        JMHSample_37_MatrixCopy.colFirst:·LLC-loads               avgt    5   2.165 ±  0.091   #\/op\n-        JMHSample_37_MatrixCopy.colFirst:·cycles                  avgt    5  22.272 ±  0.372   #\/op\n-        JMHSample_37_MatrixCopy.colFirst:·instructions            avgt    5  35.888 ±  1.215   #\/op\n-\n-        JMHSample_37_MatrixCopy.rowFirst                          avgt   25   2.662 ±  0.003  ns\/op\n-        JMHSample_37_MatrixCopy.rowFirst:·CPI                     avgt    5   0.312 ±  0.003   #\/op\n-        JMHSample_37_MatrixCopy.rowFirst:·L1-dcache-load-misses   avgt    5   0.066 ±  0.001   #\/op\n-        JMHSample_37_MatrixCopy.rowFirst:·L1-dcache-loads         avgt    5  14.570 ±  0.400   #\/op\n-        JMHSample_37_MatrixCopy.rowFirst:·LLC-loads               avgt    5   0.002 ±  0.001   #\/op\n-        JMHSample_37_MatrixCopy.rowFirst:·cycles                  avgt    5  11.046 ±  0.343   #\/op\n-        JMHSample_37_MatrixCopy.rowFirst:·instructions            avgt    5  35.416 ±  1.248   #\/op\n+        Benchmark                                                Mode  Cnt   Score    Error  Units\n+        JMHSample_37_MatrixCopy.colFirst                         avgt   25   5.306 ±  0.020  ns\/op\n+        JMHSample_37_MatrixCopy.colFirst:CPI                     avgt    5   0.621 ±  0.011   #\/op\n+        JMHSample_37_MatrixCopy.colFirst:L1-dcache-load-misses   avgt    5   2.177 ±  0.044   #\/op <-- OOPS\n+        JMHSample_37_MatrixCopy.colFirst:L1-dcache-loads         avgt    5  14.804 ±  0.261   #\/op\n+        JMHSample_37_MatrixCopy.colFirst:LLC-loads               avgt    5   2.165 ±  0.091   #\/op\n+        JMHSample_37_MatrixCopy.colFirst:cycles                  avgt    5  22.272 ±  0.372   #\/op\n+        JMHSample_37_MatrixCopy.colFirst:instructions            avgt    5  35.888 ±  1.215   #\/op\n+\n+        JMHSample_37_MatrixCopy.rowFirst                         avgt   25   2.662 ±  0.003  ns\/op\n+        JMHSample_37_MatrixCopy.rowFirst:CPI                     avgt    5   0.312 ±  0.003   #\/op\n+        JMHSample_37_MatrixCopy.rowFirst:L1-dcache-load-misses   avgt    5   0.066 ±  0.001   #\/op\n+        JMHSample_37_MatrixCopy.rowFirst:L1-dcache-loads         avgt    5  14.570 ±  0.400   #\/op\n+        JMHSample_37_MatrixCopy.rowFirst:LLC-loads               avgt    5   0.002 ±  0.001   #\/op\n+        JMHSample_37_MatrixCopy.rowFirst:cycles                  avgt    5  11.046 ±  0.343   #\/op\n+        JMHSample_37_MatrixCopy.rowFirst:instructions            avgt    5  35.416 ±  1.248   #\/op\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_37_CacheAccess.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}