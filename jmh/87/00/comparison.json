{"files":[{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.GCProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+public class GCProfilerAllocRateTest {\n+\n+    @Benchmark\n+    public Object allocate() {\n+        return new byte[1000];\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(GCProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        double opsPerSec = rr.getPrimaryResult().getScore();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        double allocRateMB = sr.get(\"·gc.alloc.rate\").getScore();\n+        double allocRateNormB = sr.get(\"·gc.alloc.rate.norm\").getScore();\n+        double allocRatePrimaryMB = opsPerSec * allocRateNormB \/ 1024 \/ 1024;\n+\n+        \/\/ Allow 20% slack\n+        if (Math.abs(1 - allocRatePrimaryMB \/ allocRateMB) > 0.2) {\n+            Assert.fail(\"Allocation rates disagree. \" +\n+                    \"Reported by profiler: \" + allocRateMB +\n+                    \", computed from primary score: \" + allocRatePrimaryMB);\n+        }\n+    }\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/GCProfilerAllocRateTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -74,1 +74,0 @@\n-        VMSupport.finishChurnProfile();\n@@ -77,0 +76,2 @@\n+        VMSupport.finishChurnProfile();\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/GCProfiler.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}