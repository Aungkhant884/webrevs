{"files":[{"patch":"@@ -33,0 +33,7 @@\n+    - name: Set up perf (Linux)\n+      run: |\n+        sudo apt-get update\n+        sudo apt-get install -y linux-tools-common linux-tools-generic linux-tools-`uname -r`\n+        echo -1 | sudo tee \/proc\/sys\/kernel\/perf_event_paranoid\n+        perf stat echo 1\n+      if: (runner.os == 'Linux')\n","filename":".github\/workflows\/pre-integration.yml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.DTraceAsmProfiler;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+@State(Scope.Thread)\n+public abstract class AbstractAsmProfilerTest {\n+\n+    private static final int SIZE = 10_000;\n+\n+    private byte[] src, dst;\n+\n+    @Setup\n+    public void setup() {\n+        src = new byte[SIZE];\n+        dst = new byte[SIZE];\n+    }\n+\n+    @Benchmark\n+    public void work() {\n+        \/\/ Call something that definitely results in calling a native stub.\n+        \/\/ This should work on environments where hsdis is not available.\n+        System.arraycopy(src, 0, dst, 0, SIZE);\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/AbstractAsmProfilerTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.ClassloaderProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class ClassloadProfilerTest {\n+\n+    \/\/ Simplest Dummy class\n+    static final byte[] CLASS = new byte[] {\n+            (byte) 0xca, (byte) 0xfe, (byte) 0xba, (byte) 0xbe,\n+            0x00, 0x00, 0x00, 0x34,\n+            0x00, 0x0a, 0x0a, 0x00, 0x02, 0x00, 0x03, 0x07,\n+            0x00, 0x04, 0x0c, 0x00, 0x05, 0x00, 0x06, 0x01,\n+            0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,\n+            0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,\n+            0x63, 0x74, 0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e,\n+            0x69, 0x74, 0x3e, 0x01, 0x00, 0x03, 0x28, 0x29,\n+            0x56, 0x07, 0x00, 0x08, 0x01, 0x00, 0x05, 0x44,\n+            0x75, 0x6d, 0x6d, 0x79, 0x01, 0x00, 0x04, 0x43,\n+            0x6f, 0x64, 0x65, 0x00, 0x21, 0x00, 0x07, 0x00,\n+            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,\n+            0x01, 0x00, 0x05, 0x00, 0x06, 0x00, 0x01, 0x00,\n+            0x09, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00,\n+            0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, (byte) 0xb7, 0x00,\n+            0x01, (byte) 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n+    };\n+\n+    static class MyClassLoader extends ClassLoader {\n+        public Class<?> loadClass(String name) throws ClassNotFoundException {\n+            if (name.equals(\"Dummy\")) {\n+                return defineClass(name, CLASS, 0, CLASS.length, null);\n+            } else {\n+                return super.loadClass(name);\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public Class<?> work() throws Exception {\n+        Fixtures.work();\n+        ClassLoader loader = new MyClassLoader();\n+        return Class.forName(\"Dummy\", true, loader);\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(ClassloaderProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        double classLoad = ProfilerTestUtils.checkedGet(sr, \"Â·class.load.norm\").getScore();\n+\n+        \/\/ Allow 5% slack\n+        if (Math.abs(1 - classLoad) > 0.05) {\n+            Assert.fail(\"Class loading rate is incorrect. Reported by profiler: \" + classLoad);\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/ClassloadProfilerTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.CompilerProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class CompilerProfilerTest {\n+\n+    @Benchmark\n+    public void work() {\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(CompilerProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        double timeTotal = ProfilerTestUtils.checkedGet(sr, \"Â·compiler.time.total\").getScore();\n+        double timeProfiled = ProfilerTestUtils.checkedGet(sr, \"Â·compiler.time.profiled\").getScore();\n+\n+        if (timeProfiled > timeTotal) {\n+            throw new IllegalStateException(\"Profiled time is larger than total time. \" +\n+                    \"Total: \" + timeTotal + \", Profiled: \" + timeProfiled);\n+        }\n+\n+        if (timeProfiled <= 0) {\n+            throw new IllegalStateException(\"Should have profiled time: \" + timeProfiled);\n+        }\n+\n+        if (timeTotal <= 0) {\n+            throw new IllegalStateException(\"Should have total time: \" + timeTotal);\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/CompilerProfilerTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.DTraceAsmProfiler;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+\n+public class DTraceAsmProfilerTest extends AbstractAsmProfilerTest {\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        try {\n+            new DTraceAsmProfiler(\"\");\n+        } catch (ProfilerException e) {\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n+            return;\n+        }\n+\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(DTraceAsmProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"Â·asm\").extendedInfo();\n+        if (!out.contains(\"StubRoutines::\")) {\n+            throw new IllegalStateException(\"Profile does not contain the required frame\");\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/DTraceAsmProfilerTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -81,2 +81,2 @@\n-        double allocRateMB = sr.get(\"Â·gc.alloc.rate\").getScore();\n-        double allocRateNormB = sr.get(\"Â·gc.alloc.rate.norm\").getScore();\n+        double allocRateMB = ProfilerTestUtils.checkedGet(sr, \"Â·gc.alloc.rate\").getScore();\n+        double allocRateNormB = ProfilerTestUtils.checkedGet(sr, \"Â·gc.alloc.rate.norm\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/GCProfilerAllocRateTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.CompilerProfiler;\n+import org.openjdk.jmh.profile.JavaFlightRecorderProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class JavaFlightRecorderProfilerTest {\n+\n+    @Benchmark\n+    public void work() {\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(JavaFlightRecorderProfiler.class)\n+                .build();\n+\n+        new Runner(opts).runSingle();\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/JavaFlightRecorderProfilerTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.LinuxPerfAsmProfiler;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+\n+public class LinuxPerfAsmProfilerTest extends AbstractAsmProfilerTest {\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        try {\n+            new LinuxPerfAsmProfiler(\"\");\n+        } catch (ProfilerException e) {\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n+            return;\n+        }\n+\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(LinuxPerfAsmProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"Â·asm\").extendedInfo();\n+        if (!out.contains(\"StubRoutines::\")) {\n+            throw new IllegalStateException(\"Profile does not contain the required frame\");\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfAsmProfilerTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.LinuxPerfC2CProfiler;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class LinuxPerfC2CProfilerTest {\n+\n+    @Benchmark\n+    public void work() {\n+        somethingInTheMiddle();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void somethingInTheMiddle() {\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        try {\n+            new LinuxPerfC2CProfiler();\n+        } catch (ProfilerException e) {\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n+            return;\n+        }\n+\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(LinuxPerfC2CProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        String text = ProfilerTestUtils.checkedGet(sr, \"Â·perfc2c\").extendedInfo();\n+\n+        Assert.assertNotNull(text);\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfC2CProfilerTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.LinuxPerfNormProfiler;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class LinuxPerfNormProfilerTest {\n+\n+    @Benchmark\n+    public void work() {\n+        somethingInTheMiddle();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void somethingInTheMiddle() {\n+        Blackhole.consumeCPU(1);\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        try {\n+            new LinuxPerfNormProfiler(\"\");\n+        } catch (ProfilerException e) {\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n+            return;\n+        }\n+\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(LinuxPerfNormProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        double instructions = ProfilerTestUtils.checkedGet(sr, \"instructions\").getScore();\n+        double cycles = ProfilerTestUtils.checkedGet(sr, \"cycles\").getScore();\n+        double branches = ProfilerTestUtils.checkedGet(sr, \"branches\").getScore();\n+\n+        Assert.assertNotEquals(0, instructions);\n+        Assert.assertNotEquals(0, cycles);\n+        Assert.assertNotEquals(0, branches);\n+\n+        if (branches > instructions) {\n+            throw new IllegalStateException(String.format(\"Branches (%.2f) larger than instructions (%.3f)\", branches, instructions));\n+        }\n+\n+        double ipc = ProfilerTestUtils.checkedGet(sr, \"IPC\").getScore();\n+        double cpi = ProfilerTestUtils.checkedGet(sr, \"CPI\").getScore();\n+\n+        Assert.assertNotEquals(0, ipc);\n+        Assert.assertNotEquals(0, cpi);\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfNormProfilerTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.LinuxPerfAsmProfiler;\n+import org.openjdk.jmh.profile.LinuxPerfProfiler;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class LinuxPerfProfilerTest {\n+\n+    @Benchmark\n+    public void work() {\n+        somethingInTheMiddle();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void somethingInTheMiddle() {\n+        Blackhole.consumeCPU(1);\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        try {\n+            new LinuxPerfProfiler(\"\");\n+        } catch (ProfilerException e) {\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n+            return;\n+        }\n+\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(LinuxPerfProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        String msg = ProfilerTestUtils.checkedGet(sr, \"Â·perf\").extendedInfo();\n+\n+        if (sr.containsKey(\"Â·ipc\")) {\n+            double ipc = ProfilerTestUtils.checkedGet(sr, \"Â·ipc\").getScore();\n+            double cpi = ProfilerTestUtils.checkedGet(sr, \"Â·cpi\").getScore();\n+            Assert.assertNotEquals(0, ipc);\n+            Assert.assertNotEquals(0, cpi);\n+        }\n+\n+        Assert.assertTrue(msg.contains(\"cycles\"));\n+        Assert.assertTrue(msg.contains(\"instructions\"));\n+        Assert.assertTrue(msg.contains(\"branches\"));\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfProfilerTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.CompilerProfiler;\n+import org.openjdk.jmh.profile.MemPoolProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class MemPoolProfilerTest {\n+\n+    @Benchmark\n+    public void work() {\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(MemPoolProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+\n+        double usedMetaspace = ProfilerTestUtils.checkedGet(sr, \"Â·mempool.Metaspace.used\").getScore();\n+        double usedTotal = ProfilerTestUtils.checkedGet(sr, \"Â·mempool.total.used\").getScore();\n+        double usedTotalCodeheap = ProfilerTestUtils.checkedGet(sr, \"Â·mempool.total.codeheap.used\").getScore();\n+\n+        if (usedMetaspace == 0) {\n+            throw new IllegalStateException(\"Metaspace used is zero\");\n+        }\n+\n+        if (usedTotal == 0) {\n+            throw new IllegalStateException(\"Total used is zero\");\n+        }\n+\n+        if (usedTotalCodeheap == 0) {\n+            throw new IllegalStateException(\"Total codeheap used is zero\");\n+        }\n+\n+        if (usedMetaspace > usedTotal) {\n+            throw new IllegalStateException(\"Metaspace size is larger than total size. \" +\n+                    \"Total: \" + usedTotal + \", Metaspace: \" + usedMetaspace);\n+        }\n+\n+        if (usedTotalCodeheap > usedTotal) {\n+            throw new IllegalStateException(\"Codeheap size is larger than total size. \" +\n+                    \"Total: \" + usedTotal + \", Codeheap: \" + usedTotalCodeheap);\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/MemPoolProfilerTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.openjdk.jmh.results.Result;\n+\n+import java.util.Map;\n+\n+public class ProfilerTestUtils {\n+\n+    public static Result checkedGet(Map<String, Result> sr, String name) {\n+        Result r = sr.get(name);\n+        if (r != null) {\n+            return r;\n+        } else {\n+            StringBuilder sb = new StringBuilder();\n+            for (String k : sr.keySet()) {\n+                sb.append(k);\n+                sb.append(\" = \");\n+                sb.append(sr.get(k));\n+                sb.append(System.lineSeparator());\n+            }\n+            throw new IllegalStateException(\"Cannot find the result \\\"\" + name + \"\\\". Available entries: \" + sb);\n+        }\n+    }\n+\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/ProfilerTestUtils.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.MemPoolProfiler;\n+import org.openjdk.jmh.profile.SafepointsProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 1, jvmArgsAppend = {\"-Xms1g\", \"-Xmx1g\"})\n+public class SafepointsProfilerTest {\n+\n+    @Benchmark\n+    public int[] allocate() {\n+        return new int[1_000_000];\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(SafepointsProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+\n+        double interval = ProfilerTestUtils.checkedGet(sr, \"Â·safepoints.interval\").getScore();\n+        double pauseTotal = ProfilerTestUtils.checkedGet(sr, \"Â·safepoints.pause\").getScore();\n+        double ttspTotal = ProfilerTestUtils.checkedGet(sr, \"Â·safepoints.ttsp\").getScore();\n+\n+        double pauseCount = ProfilerTestUtils.checkedGet(sr, \"Â·safepoints.pause.count\").getScore();\n+        double ttspCount = ProfilerTestUtils.checkedGet(sr, \"Â·safepoints.ttsp.count\").getScore();\n+\n+        Assert.assertNotEquals(pauseTotal, 0);\n+        Assert.assertNotEquals(ttspTotal, 0);\n+\n+        Assert.assertNotEquals(pauseCount, 0);\n+        Assert.assertNotEquals(ttspCount, 0);\n+        Assert.assertEquals(ttspCount, pauseCount, 0);\n+\n+        if (interval < 3000) {\n+            throw new IllegalStateException(\"Interval time is too low. \" +\n+                    \" Interval: \" + interval);\n+        }\n+\n+        if (ttspTotal > interval) {\n+            throw new IllegalStateException(\"TTSP time is larger than interval time. \" +\n+                    \"TTSP: \" + ttspTotal + \", Interval: \" + interval);\n+        }\n+\n+        if (pauseTotal > interval) {\n+            throw new IllegalStateException(\"Pause time is larger than interval time. \" +\n+                    \"Pause: \" + pauseTotal + \", Interval: \" + interval);\n+        }\n+\n+        if (ttspTotal > pauseTotal) {\n+            throw new IllegalStateException(\"TTSP time is larger than pause time. \" +\n+                    \"TTSP: \" + ttspTotal + \", Pause: \" + pauseTotal);\n+        }\n+\n+        double lastPause = 0;\n+        double lastTTSP = 0;\n+        for (String suff : new String[] {\"0.00\", \"0.50\", \"0.90\", \"0.95\", \"0.99\", \"0.999\", \"0.9999\", \"1.00\"}) {\n+            double curPause = ProfilerTestUtils.checkedGet(sr, \"Â·safepoints.pause.p\" + suff).getScore();\n+            double curTTSP = ProfilerTestUtils.checkedGet(sr, \"Â·safepoints.ttsp.p\" + suff).getScore();\n+            if (curPause < lastPause) {\n+                throw new IllegalStateException(\"pause.p\" + suff + \" is not monotonic\");\n+            }\n+            if (curTTSP < lastTTSP) {\n+                throw new IllegalStateException(\"ttsp.p\" + suff + \" is not monotonic\");\n+            }\n+            lastPause = curPause;\n+            lastTTSP = curTTSP;\n+        }\n+\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/SafepointsProfilerTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.JavaFlightRecorderProfiler;\n+import org.openjdk.jmh.profile.StackProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class StackProfilerTest {\n+\n+    @Benchmark\n+    public void work() {\n+        somethingInTheMiddle();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void somethingInTheMiddle() {\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(StackProfiler.class, \"lines=10\")\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        String stack = ProfilerTestUtils.checkedGet(sr, \"Â·stack\").extendedInfo();\n+        if (!stack.contains(StackProfilerTest.class.getCanonicalName() + \".somethingInTheMiddle\")) {\n+            throw new IllegalStateException(\"Stack profiler does not contain the required frame\");\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/StackProfilerTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.profile.WinPerfAsmProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+\n+public class WinPerfAsmProfilerTest extends AbstractAsmProfilerTest {\n+\n+    @Test\n+    public void test() throws RunnerException {\n+        try {\n+            new WinPerfAsmProfiler(\"\");\n+        } catch (ProfilerException e) {\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n+            return;\n+        }\n+\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(WinPerfAsmProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"Â·asm\").extendedInfo();\n+        if (!out.contains(\"StubRoutines::\")) {\n+            throw new IllegalStateException(\"Profile does not contain the required frame\");\n+        }\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/WinPerfAsmProfilerTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -47,0 +47,5 @@\n+        Collection<String> failMsg = Utils.tryWith(PerfSupport.PERF_EXEC, \"c2c\", \"record\", \"echo\", \"1\");\n+        if (!failMsg.isEmpty()) {\n+            throw new ProfilerException(failMsg.toString());\n+        }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/LinuxPerfC2CProfiler.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            if (bean.getName().contains(\"CodeHeap\")) {\n+            if (bean.getName().contains(\"CodeHeap\") || bean.getName().contains(\"Code Cache\")) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/MemPoolProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}