{"files":[{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.DTraceAsmProfiler;\n+import org.openjdk.jmh.profile.ProfilerException;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+@State(Scope.Thread)\n+public abstract class AbstractAsmProfilerTest {\n+\n+    private static final int SIZE = 10_000;\n+\n+    private byte[] src, dst;\n+\n+    @Setup\n+    public void setup() {\n+        src = new byte[SIZE];\n+        dst = new byte[SIZE];\n+    }\n+\n+    @Benchmark\n+    public void work() {\n+        \/\/ Call something that definitely results in calling a native stub.\n+        \/\/ This should work on environments where hsdis is not available.\n+        System.arraycopy(src, 0, dst, 0, SIZE);\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/AbstractAsmProfilerTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -28,2 +28,0 @@\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.infra.Blackhole;\n@@ -41,1 +39,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -43,14 +40,1 @@\n-@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Fork(1)\n-public class DTraceAsmProfilerTest {\n-\n-    @Benchmark\n-    public void work() {\n-        somethingInTheMiddle();\n-    }\n-\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void somethingInTheMiddle() {\n-        Blackhole.consumeCPU(1);\n-    }\n+public class DTraceAsmProfilerTest extends AbstractAsmProfilerTest {\n@@ -63,1 +47,1 @@\n-            \/\/ Not supported\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n@@ -76,1 +60,1 @@\n-        if (!out.contains(\"somethingInTheMiddle\")) {\n+        if (!out.contains(\"StubRoutines::\")) {\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/DTraceAsmProfilerTest.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.infra.Blackhole;\n@@ -41,1 +39,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -43,14 +40,1 @@\n-@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Fork(1)\n-public class LinuxPerfAsmProfilerTest {\n-\n-    @Benchmark\n-    public void work() {\n-        somethingInTheMiddle();\n-    }\n-\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void somethingInTheMiddle() {\n-        Blackhole.consumeCPU(1);\n-    }\n+public class LinuxPerfAsmProfilerTest extends AbstractAsmProfilerTest {\n@@ -63,1 +47,1 @@\n-            \/\/ Not supported\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n@@ -76,1 +60,1 @@\n-        if (!out.contains(\"somethingInTheMiddle\")) {\n+        if (!out.contains(\"StubRoutines::\")) {\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfAsmProfilerTest.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            \/\/ Not supported\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfC2CProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-            \/\/ Not supported\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n@@ -76,2 +76,0 @@\n-        double ipc = ProfilerTestUtils.checkedGet(sr, \"IPC\").getScore();\n-        double cpi = ProfilerTestUtils.checkedGet(sr, \"CPI\").getScore();\n@@ -82,2 +80,0 @@\n-        Assert.assertNotEquals(0, ipc);\n-        Assert.assertNotEquals(0, cpi);\n@@ -91,0 +87,6 @@\n+\n+        double ipc = ProfilerTestUtils.checkedGet(sr, \"IPC\").getScore();\n+        double cpi = ProfilerTestUtils.checkedGet(sr, \"CPI\").getScore();\n+\n+        Assert.assertNotEquals(0, ipc);\n+        Assert.assertNotEquals(0, cpi);\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfNormProfilerTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-            \/\/ Not supported\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n@@ -77,2 +77,0 @@\n-        double ipc = ProfilerTestUtils.checkedGet(sr, \"·ipc\").getScore();\n-        double cpi = ProfilerTestUtils.checkedGet(sr, \"·cpi\").getScore();\n@@ -81,2 +79,6 @@\n-        Assert.assertNotEquals(0, ipc);\n-        Assert.assertNotEquals(0, cpi);\n+        if (sr.containsKey(\"·ipc\")) {\n+            double ipc = ProfilerTestUtils.checkedGet(sr, \"·ipc\").getScore();\n+            double cpi = ProfilerTestUtils.checkedGet(sr, \"·cpi\").getScore();\n+            Assert.assertNotEquals(0, ipc);\n+            Assert.assertNotEquals(0, cpi);\n+        }\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfProfilerTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.infra.Blackhole;\n@@ -31,1 +29,0 @@\n-import org.openjdk.jmh.profile.LinuxPerfAsmProfiler;\n@@ -42,1 +39,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -44,14 +40,1 @@\n-@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Fork(1)\n-public class WinPerfAsmProfilerTest {\n-\n-    @Benchmark\n-    public void work() {\n-        somethingInTheMiddle();\n-    }\n-\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void somethingInTheMiddle() {\n-        Blackhole.consumeCPU(1);\n-    }\n+public class WinPerfAsmProfilerTest extends AbstractAsmProfilerTest {\n@@ -64,1 +47,1 @@\n-            \/\/ Not supported\n+            System.out.println(\"Profiler is not supported or cannot be enabled, skipping test\");\n@@ -77,1 +60,1 @@\n-        if (!out.contains(\"somethingInTheMiddle\")) {\n+        if (!out.contains(\"StubRoutines::\")) {\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/WinPerfAsmProfilerTest.java","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"}]}