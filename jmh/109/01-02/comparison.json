{"files":[{"patch":"@@ -94,1 +94,1 @@\n-        double classLoad = sr.get(\"·class.load.norm\").getScore();\n+        double classLoad = ProfilerTestUtils.checkedGet(sr, \"·class.load.norm\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/ClassloadProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-        double timeTotal = sr.get(\"·compiler.time.total\").getScore();\n-        double timeProfiled = sr.get(\"·compiler.time.profiled\").getScore();\n+        double timeTotal = ProfilerTestUtils.checkedGet(sr, \"·compiler.time.total\").getScore();\n+        double timeProfiled = ProfilerTestUtils.checkedGet(sr, \"·compiler.time.profiled\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/CompilerProfilerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        String out = sr.get(\"·asm\").extendedInfo();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"·asm\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/DTraceAsmProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-        double allocRateMB = sr.get(\"·gc.alloc.rate\").getScore();\n-        double allocRateNormB = sr.get(\"·gc.alloc.rate.norm\").getScore();\n+        double allocRateMB = ProfilerTestUtils.checkedGet(sr, \"·gc.alloc.rate\").getScore();\n+        double allocRateNormB = ProfilerTestUtils.checkedGet(sr, \"·gc.alloc.rate.norm\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/GCProfilerAllocRateTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        String out = sr.get(\"·asm\").extendedInfo();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"·asm\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfAsmProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        String text = sr.get(\"·perfc2c\").extendedInfo();\n+        String text = ProfilerTestUtils.checkedGet(sr, \"·perfc2c\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfC2CProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,5 +76,5 @@\n-        double ipc = sr.get(\"·IPC\").getScore();\n-        double cpi = sr.get(\"·CPI\").getScore();\n-        double instructions = sr.get(\"·instructions\").getScore();\n-        double cycles = sr.get(\"·cycles\").getScore();\n-        double branches = sr.get(\"·branches\").getScore();\n+        double ipc = ProfilerTestUtils.checkedGet(sr, \"IPC\").getScore();\n+        double cpi = ProfilerTestUtils.checkedGet(sr, \"CPI\").getScore();\n+        double instructions = ProfilerTestUtils.checkedGet(sr, \"instructions\").getScore();\n+        double cycles = ProfilerTestUtils.checkedGet(sr, \"cycles\").getScore();\n+        double branches = ProfilerTestUtils.checkedGet(sr, \"branches\").getScore();\n@@ -88,2 +88,2 @@\n-        if (instructions > branches) {\n-            throw new IllegalStateException(String.format(\"Instructions (%.2f) larger than branches (%.3f)\", instructions, branches));\n+        if (branches > instructions) {\n+            throw new IllegalStateException(String.format(\"Branches (%.2f) larger than instructions (%.3f)\", branches, instructions));\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfNormProfilerTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -77,3 +77,3 @@\n-        double ipc = sr.get(\"·ipc\").getScore();\n-        double cpi = sr.get(\"·cpi\").getScore();\n-        String msg = sr.get(\"·perf\").extendedInfo();\n+        double ipc = ProfilerTestUtils.checkedGet(sr, \"·ipc\").getScore();\n+        double cpi = ProfilerTestUtils.checkedGet(sr, \"·cpi\").getScore();\n+        String msg = ProfilerTestUtils.checkedGet(sr, \"·perf\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfProfilerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,3 +63,3 @@\n-        double usedMetaspace = sr.get(\"·mempool.Metaspace.used\").getScore();\n-        double usedTotal = sr.get(\"·mempool.total.used\").getScore();\n-        double usedTotalCodeheap = sr.get(\"·mempool.total.codeheap.used\").getScore();\n+        double usedMetaspace = ProfilerTestUtils.checkedGet(sr, \"·mempool.Metaspace.used\").getScore();\n+        double usedTotal = ProfilerTestUtils.checkedGet(sr, \"·mempool.total.used\").getScore();\n+        double usedTotalCodeheap = ProfilerTestUtils.checkedGet(sr, \"·mempool.total.codeheap.used\").getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/MemPoolProfilerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.openjdk.jmh.results.Result;\n+\n+import java.util.Map;\n+\n+public class ProfilerTestUtils {\n+\n+    public static Result checkedGet(Map<String, Result> sr, String name) {\n+        Result r = sr.get(name);\n+        if (r != null) {\n+            return r;\n+        } else {\n+            StringBuilder sb = new StringBuilder();\n+            for (String k : sr.keySet()) {\n+                sb.append(k);\n+                sb.append(\" = \");\n+                sb.append(sr.get(k));\n+                sb.append(System.lineSeparator());\n+            }\n+            throw new IllegalStateException(\"Cannot find the result \\\"\" + name + \"\\\". Available entries: \" + sb);\n+        }\n+    }\n+\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/ProfilerTestUtils.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -64,3 +64,3 @@\n-        double interval = sr.get(\"·safepoints.interval\").getScore();\n-        double pauseTotal = sr.get(\"·safepoints.pause\").getScore();\n-        double ttspTotal = sr.get(\"·safepoints.ttsp\").getScore();\n+        double interval = ProfilerTestUtils.checkedGet(sr, \"·safepoints.interval\").getScore();\n+        double pauseTotal = ProfilerTestUtils.checkedGet(sr, \"·safepoints.pause\").getScore();\n+        double ttspTotal = ProfilerTestUtils.checkedGet(sr, \"·safepoints.ttsp\").getScore();\n@@ -68,2 +68,2 @@\n-        double pauseCount = sr.get(\"·safepoints.pause.count\").getScore();\n-        double ttspCount = sr.get(\"·safepoints.ttsp.count\").getScore();\n+        double pauseCount = ProfilerTestUtils.checkedGet(sr, \"·safepoints.pause.count\").getScore();\n+        double ttspCount = ProfilerTestUtils.checkedGet(sr, \"·safepoints.ttsp.count\").getScore();\n@@ -101,2 +101,2 @@\n-            double curPause = sr.get(\"·safepoints.pause.p\" + suff).getScore();\n-            double curTTSP = sr.get(\"·safepoints.ttsp.p\" + suff).getScore();\n+            double curPause = ProfilerTestUtils.checkedGet(sr, \"·safepoints.pause.p\" + suff).getScore();\n+            double curTTSP = ProfilerTestUtils.checkedGet(sr, \"·safepoints.ttsp.p\" + suff).getScore();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/SafepointsProfilerTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        String stack = sr.get(\"·stack\").extendedInfo();\n+        String stack = ProfilerTestUtils.checkedGet(sr, \"·stack\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/StackProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        String out = sr.get(\"·asm\").extendedInfo();\n+        String out = ProfilerTestUtils.checkedGet(sr, \"·asm\").extendedInfo();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/WinPerfAsmProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            if (bean.getName().contains(\"CodeHeap\")) {\n+            if (bean.getName().contains(\"CodeHeap\") || bean.getName().contains(\"Code Cache\")) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/MemPoolProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}