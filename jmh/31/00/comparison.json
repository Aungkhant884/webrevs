{"files":[{"patch":"@@ -27,1 +27,5 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n+import org.openjdk.jmh.ct.benchmark.PublicStaticBenchmarkTest;\n+import org.openjdk.jmh.ct.benchmark.PublicSynchronizedStaticBenchmarkStateBenchmarkTest;\n+import org.openjdk.jmh.ct.other.GenericReturnTest;\n+import org.openjdk.jmh.ct.other.SwingTest;\n@@ -91,1 +95,1 @@\n-            return doTestOther(source, destination);\n+            return doTestOther(klass, source, destination);\n@@ -100,1 +104,1 @@\n-            return doTestOther(source, destination);\n+            return doTestOther(klass, source, destination);\n@@ -107,0 +111,29 @@\n+    private static Collection<String> javacOptions(boolean annProc, Class<?> klass) {\n+        \/\/ These tests print warnings (as designed), so -Werror fails.\n+        if (klass.equals(SwingTest.class)) {\n+            if (annProc) {\n+                return Collections.emptyList();\n+            } else {\n+                return Collections.singleton(\"-proc:none\");\n+            }\n+        }\n+\n+        \/\/ These tests fail when generated code references the static target\n+        \/\/ through the instance.\n+        if (klass.equals(GenericReturnTest.class) ||\n+            klass.equals(PublicStaticBenchmarkTest.class) ||\n+            klass.equals(PublicSynchronizedStaticBenchmarkStateBenchmarkTest.class)) {\n+            if (annProc) {\n+                return Arrays.asList(\"-Xlint:all,-processing,-static\", \"-Werror\");\n+            } else {\n+                return Arrays.asList(\"-proc:none\", \"-Xlint:all,-static\", \"-Werror\");\n+            }\n+        }\n+\n+        \/\/ Regular tests should compile with full lint and Werror.\n+        if (annProc) {\n+            return Arrays.asList(\"-Xlint:all,-processing\", \"-Werror\");\n+        } else {\n+            return Arrays.asList(\"-proc:none\", \"-Xlint:all\", \"-Werror\");\n+        }\n+    }\n@@ -108,1 +141,1 @@\n-    public static boolean doTestOther(GeneratorSource source, InMemoryGeneratorDestination destination) {\n+    public static boolean doTestOther(Class<?> klass, GeneratorSource source, InMemoryGeneratorDestination destination) {\n@@ -128,1 +161,1 @@\n-        JavaCompiler.CompilationTask task = javac.getTask(null, fm, diagnostics, Collections.singleton(\"-proc:none\"), null, sources);\n+        JavaCompiler.CompilationTask task = javac.getTask(null, fm, diagnostics, javacOptions(false, klass), null, sources);\n@@ -161,1 +194,1 @@\n-            JavaCompiler.CompilationTask task = javac.getTask(null, fm, diagnostics, null, null, sources);\n+            JavaCompiler.CompilationTask task = javac.getTask(null, fm, diagnostics, javacOptions(true, klass), null, sources);\n","filename":"jmh-core-ct\/src\/test\/java\/org\/openjdk\/jmh\/ct\/CompileTest.java","additions":39,"deletions":6,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-ct\/src\/test\/java\/org\/openjdk\/jmh\/ct\/multsession\/MultipleSessionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/asymm\/ExactThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/asymm\/Zero1ThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/asymm\/Zero2ThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/BatchSizeSanityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/OpsPerInvSanityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/NonForkedModesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/WarmupMode0_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/WarmupMode1_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/WarmupMode2_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/WarmupMode3_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/WarmupMode4_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/WarmupMode5_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/bulkwarmup\/WarmupMode6_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/control\/ControlStartStopTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/BenchmarkIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/BenchmarkTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedBGTIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedBGTTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedBTGIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedBTGTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedGBTIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedGBTTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedGTBIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedGTBTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedTBGIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedTBGTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedTGBIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/MixedTGBTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/ThreadIterationDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/dagorder\/ThreadTrialDagOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/EmbeddedErrorsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/EmbeddedThrowExceptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/EmbeddedThrowRuntimeExceptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedErrorsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedExit0Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedExit1Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedExit42Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedHalt1Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedHalt42Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedStuckShutdownHookTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedStuckThreadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedThrowExceptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedThrowRuntimeExceptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/fails\/FailingBenchmarkBenchTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/fails\/FailingForkedBenchStackProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/fails\/FailingForkedBenchTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/fails\/FailingGroupBenchTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/fails\/FailingThreadBenchTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interorder\/BenchmarkBenchOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interorder\/BenchmarkStateOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interorder\/GroupBenchOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interorder\/GroupStateOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interorder\/ThreadBenchOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/interorder\/ThreadStateOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/CollidingParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EmptyLeadingStringParamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EmptyMiddleStringParamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EmptyTrailingStringParamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EnumBenchParamImplicitSequenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EnumParamSequenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EnumParamToStringOverridingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EnumStateParamImplicitSequenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/EscapedParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/IsolatedParamSequenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/OverridingParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/QuotedParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/Shared.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/params\/UTF8ParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/ChangeJVMOptsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/CountingExternalProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/DuplicateProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/ItExternalProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/order\/ProfilerOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/MaxThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/OneThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/TwoThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/GroupThreadStateHelperTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/BenchmarkInvocationFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/BenchmarkIterationFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/BenchmarkTrialFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/GroupInvocationFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/GroupIterationFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/GroupTrialFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/ThreadInvocationFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/ThreadIterationFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/times\/fail\/ThreadTrialFailureTimesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1025,1 +1025,1 @@\n-            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult((long)totalOps, (long)totalOps);\");\n+            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/BenchmarkGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/BlackholeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n@@ -35,0 +35,2 @@\n+    private static final double ASSERT_ACCURACY = 0.0000001;\n+\n@@ -44,1 +46,1 @@\n-            Assert.assertEquals(328650.667569D, perfLine.time());\n+            Assert.assertEquals(328650.667569D, perfLine.time(), ASSERT_ACCURACY);\n@@ -60,1 +62,1 @@\n-            Assert.assertEquals(328650.667569D, perfLine.time());\n+            Assert.assertEquals(328650.667569D, perfLine.time(), ASSERT_ACCURACY);\n@@ -81,1 +83,1 @@\n-            Assert.assertEquals(328650.667569D, perfLine.time());\n+            Assert.assertEquals(328650.667569D, perfLine.time(), ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/profile\/PerfParseTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/profile\/SafepointsProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n@@ -36,0 +36,2 @@\n+    private static final double ASSERT_ACCURACY = 0.0000001;\n+\n@@ -43,2 +45,2 @@\n-        Assert.assertEquals(20_000.0, ir.getPrimaryResult().getScore());\n-        Assert.assertEquals(10_000.0, ir.getSecondaryResults().get(\"sec\").getScore());\n+        Assert.assertEquals(20_000.0, ir.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(10_000.0, ir.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n@@ -52,3 +54,3 @@\n-        Assert.assertEquals(20_000.0, br.getPrimaryResult().getScore());\n-        Assert.assertEquals(10_000.0, br.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(20_000.0, br.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(10_000.0, br.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n@@ -61,3 +63,3 @@\n-        Assert.assertEquals(20_000.0, rr.getPrimaryResult().getScore());\n-        Assert.assertEquals(10_000.0, rr.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(20_000.0, rr.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(10_000.0, rr.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n@@ -77,2 +79,2 @@\n-        Assert.assertEquals(10_000.0, ir.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, ir.getSecondaryResults().get(\"sec\").getScore());\n+        Assert.assertEquals(10_000.0, ir.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, ir.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n@@ -86,3 +88,3 @@\n-        Assert.assertEquals(10_000.0, br.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, br.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(10_000.0, br.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, br.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n@@ -95,3 +97,3 @@\n-        Assert.assertEquals(10_000.0, rr.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, rr.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(10_000.0, rr.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, rr.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n@@ -120,2 +122,2 @@\n-        Assert.assertEquals(10_000.0, ir.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, ir.getSecondaryResults().get(\"sec\").getScore());\n+        Assert.assertEquals(10_000.0, ir.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, ir.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n@@ -129,3 +131,3 @@\n-        Assert.assertEquals(10_000.0, br.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, br.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(10_000.0, br.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, br.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n@@ -138,3 +140,3 @@\n-        Assert.assertEquals(10_000.0, rr.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, rr.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(10_000.0, rr.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, rr.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n@@ -154,2 +156,2 @@\n-        Assert.assertEquals(10_000.0, ir.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, ir.getSecondaryResults().get(\"sec\").getScore());\n+        Assert.assertEquals(10_000.0, ir.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, ir.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n@@ -163,3 +165,3 @@\n-        Assert.assertEquals(10_000.0, br.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, br.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(10_000.0, br.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, br.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, br.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n@@ -172,3 +174,3 @@\n-        Assert.assertEquals(10_000.0, rr.getPrimaryResult().getScore());\n-        Assert.assertEquals(5_000.0, rr.getSecondaryResults().get(\"sec\").getScore());\n-        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore());\n+        Assert.assertEquals(10_000.0, rr.getPrimaryResult().getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(5_000.0, rr.getSecondaryResults().get(\"sec\").getScore(), ASSERT_ACCURACY);\n+        Assert.assertEquals(3_000.0, rr.getSecondaryResults().get(\"bench\").getScore(), ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/ResultAggregationTest.java","additions":35,"deletions":33,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n@@ -36,0 +36,2 @@\n+    private static final double ASSERT_ACCURACY = 0.0000001;\n+\n@@ -42,1 +44,1 @@\n-        assertEquals(1.5, result.getScore());\n+        assertEquals(1.5, result.getScore(), ASSERT_ACCURACY);\n@@ -52,1 +54,1 @@\n-        assertEquals(1.0, result.getScore());\n+        assertEquals(1.0, result.getScore(), ASSERT_ACCURACY);\n@@ -62,1 +64,1 @@\n-        assertEquals(1.0, result.getScore());\n+        assertEquals(1.0, result.getScore(), ASSERT_ACCURACY);\n@@ -72,1 +74,1 @@\n-        assertEquals(1.5, result.getScore());\n+        assertEquals(1.5, result.getScore(), ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/TestAverageTimeResult.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n@@ -37,0 +37,2 @@\n+    private static final double ASSERT_ACCURACY = 0.0000001;\n+\n@@ -51,1 +53,1 @@\n-        assertEquals(2.5, result.getScore());\n+        assertEquals(2.5, result.getScore(), ASSERT_ACCURACY);\n@@ -69,1 +71,1 @@\n-        assertEquals(2.5, result.getScore());\n+        assertEquals(2.5, result.getScore(), ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/TestSampleTimeResult.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n@@ -36,0 +36,2 @@\n+    private static final double ASSERT_ACCURACY = 0.0000001;\n+\n@@ -42,1 +44,1 @@\n-        assertEquals(1.5, result.getScore());\n+        assertEquals(1.5, result.getScore(), ASSERT_ACCURACY);\n@@ -52,1 +54,1 @@\n-        assertEquals(1.5, result.getScore());\n+        assertEquals(1.5, result.getScore(), ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/TestSingleShotResult.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n@@ -36,0 +36,2 @@\n+    private static final double ASSERT_ACCURACY = 0.0000001;\n+\n@@ -86,1 +88,1 @@\n-        assertEquals(150.0, result.getScore());\n+        assertEquals(150.0, result.getScore(), ASSERT_ACCURACY);\n@@ -96,1 +98,1 @@\n-        assertEquals(100.0, result.getScore());\n+        assertEquals(100.0, result.getScore(), ASSERT_ACCURACY);\n@@ -106,1 +108,1 @@\n-        assertEquals(100_000_000.0, result.getScore());\n+        assertEquals(100_000_000.0, result.getScore(), ASSERT_ACCURACY);\n@@ -117,1 +119,1 @@\n-        assertEquals(300.0, result.getScore());\n+        assertEquals(300.0, result.getScore(), ASSERT_ACCURACY);\n@@ -127,1 +129,1 @@\n-        assertEquals(200.0, result.getScore());\n+        assertEquals(200.0, result.getScore(), ASSERT_ACCURACY);\n@@ -137,1 +139,1 @@\n-        assertEquals(200_000_000.0, result.getScore());\n+        assertEquals(200_000_000.0, result.getScore(), ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/TestThroughputResult.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/results\/format\/ResultFormatTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/DistributeGroupsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/parameters\/TimeValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/BoundedPriorityQueueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/MultisetsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/TestClassUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n@@ -50,0 +50,2 @@\n+    private static final double ASSERT_ACCURACY = 0.0000000001;\n+\n@@ -243,11 +245,11 @@\n-        Assert.assertEquals(Double.NaN, s.getSum());\n-        Assert.assertEquals(Double.NaN, s.getMin());\n-        Assert.assertEquals(Double.NaN, s.getMax());\n-        Assert.assertEquals(Double.NaN, s.getMean());\n-        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5));\n-        Assert.assertEquals(Double.NaN, s.getVariance());\n-        Assert.assertEquals(Double.NaN, s.getStandardDeviation());\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0]);\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1]);\n-        Assert.assertEquals(Double.NaN, s.getPercentile(0));\n-        Assert.assertEquals(Double.NaN, s.getPercentile(100));\n+        Assert.assertEquals(Double.NaN, s.getSum(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMin(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMax(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMean(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getVariance(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getStandardDeviation(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0], ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1], ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getPercentile(0), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getPercentile(100), ASSERT_ACCURACY);\n@@ -262,11 +264,11 @@\n-        Assert.assertEquals(42.0D, s.getSum());\n-        Assert.assertEquals(42.0D, s.getMin());\n-        Assert.assertEquals(42.0D, s.getMax());\n-        Assert.assertEquals(42.0D, s.getMean());\n-        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5));\n-        Assert.assertEquals(Double.NaN, s.getVariance());\n-        Assert.assertEquals(Double.NaN, s.getStandardDeviation());\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0]);\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1]);\n-        Assert.assertEquals(42.0D, s.getPercentile(0));\n-        Assert.assertEquals(42.0D, s.getPercentile(100));\n+        Assert.assertEquals(42.0D, s.getSum(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMin(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMax(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMean(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getVariance(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getStandardDeviation(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0], ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1], ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getPercentile(0), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getPercentile(100), ASSERT_ACCURACY);\n@@ -408,2 +410,2 @@\n-            Assert.assertEquals(entry.getKey(), item);\n-            Assert.assertEquals(entry.getValue().longValue(), 1L);\n+            Assert.assertEquals(entry.getKey(), item, ASSERT_ACCURACY);\n+            Assert.assertEquals(1L, entry.getValue().longValue());\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/TestListStatistics.java","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n@@ -50,0 +50,2 @@\n+    private static final double ASSERT_ACCURACY = 0.000000001;\n+\n@@ -237,11 +239,11 @@\n-        Assert.assertEquals(Double.NaN, s.getSum());\n-        Assert.assertEquals(Double.NaN, s.getMin());\n-        Assert.assertEquals(Double.NaN, s.getMax());\n-        Assert.assertEquals(Double.NaN, s.getMean());\n-        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5));\n-        Assert.assertEquals(Double.NaN, s.getVariance());\n-        Assert.assertEquals(Double.NaN, s.getStandardDeviation());\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0]);\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1]);\n-        Assert.assertEquals(Double.NaN, s.getPercentile(0));\n-        Assert.assertEquals(Double.NaN, s.getPercentile(100));\n+        Assert.assertEquals(Double.NaN, s.getSum(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMin(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMax(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMean(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getVariance(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getStandardDeviation(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0], ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1], ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getPercentile(0), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getPercentile(100), ASSERT_ACCURACY);\n@@ -256,11 +258,11 @@\n-        Assert.assertEquals(42.0D, s.getSum());\n-        Assert.assertEquals(42.0D, s.getMin());\n-        Assert.assertEquals(42.0D, s.getMax());\n-        Assert.assertEquals(42.0D, s.getMean());\n-        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5));\n-        Assert.assertEquals(Double.NaN, s.getVariance());\n-        Assert.assertEquals(Double.NaN, s.getStandardDeviation());\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0]);\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1]);\n-        Assert.assertEquals(42.0D, s.getPercentile(0));\n-        Assert.assertEquals(42.0D, s.getPercentile(100));\n+        Assert.assertEquals(42.0D, s.getSum(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMin(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMax(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMean(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getVariance(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getStandardDeviation(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0], ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1], ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getPercentile(0), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getPercentile(100), ASSERT_ACCURACY);\n@@ -443,1 +445,1 @@\n-            Assert.assertEquals(entry.getKey(), (double)(entry.getValue() * 10));\n+            Assert.assertEquals(entry.getKey(), (double)(entry.getValue() * 10), ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/TestMultisetStatistics.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n@@ -43,0 +43,1 @@\n+    private static final double ASSERT_ACCURACY = 0.000000001;\n@@ -149,11 +150,11 @@\n-        Assert.assertEquals(42.0D, s.getSum());\n-        Assert.assertEquals(42.0D, s.getMin());\n-        Assert.assertEquals(42.0D, s.getMax());\n-        Assert.assertEquals(42.0D, s.getMean());\n-        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5));\n-        Assert.assertEquals(Double.NaN, s.getVariance());\n-        Assert.assertEquals(Double.NaN, s.getStandardDeviation());\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0]);\n-        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1]);\n-        Assert.assertEquals(42.0D, s.getPercentile(0));\n-        Assert.assertEquals(42.0D, s.getPercentile(100));\n+        Assert.assertEquals(42.0D, s.getSum(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMin(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMax(), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getMean(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getMeanErrorAt(0.5), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getVariance(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getStandardDeviation(), ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[0], ASSERT_ACCURACY);\n+        Assert.assertEquals(Double.NaN, s.getConfidenceIntervalAt(0.50)[1], ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getPercentile(0), ASSERT_ACCURACY);\n+        Assert.assertEquals(42.0D, s.getPercentile(100), ASSERT_ACCURACY);\n@@ -260,1 +261,1 @@\n-        Assert.assertEquals(entry.getKey(), VALUE);\n+        Assert.assertEquals(entry.getKey(), VALUE, ASSERT_ACCURACY);\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/TestSingletonStatistics.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/TestUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/Util.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import junit.framework.Assert;\n+import org.junit.Assert;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/lines\/TestLineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}