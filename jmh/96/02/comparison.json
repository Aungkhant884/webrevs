{"files":[{"patch":"@@ -52,0 +52,1 @@\n+    static final String COMPILER_HINTS_MODE       = \"jmh.compilerhints.mode\";\n@@ -104,0 +105,47 @@\n+    public enum CompilerHintsSelect {\n+        FORCE_ON(\"Forced on\", false, true),\n+        FORCE_OFF(\"Forced off\", false, false),\n+        AUTO_ON(\"Automatically enabled\", true, true),\n+        AUTO_OFF(\"Automatically disabled\", true, false);\n+\n+        private final String desc;\n+        private final boolean auto;\n+        private final boolean enabled;\n+\n+        CompilerHintsSelect(String desc, boolean auto, boolean enabled) {\n+            this.desc = desc;\n+            this.auto = auto;\n+            this.enabled = enabled;\n+        }\n+\n+        public String desc() {\n+            return desc;\n+        }\n+\n+        public boolean isAuto() {\n+            return auto;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+    }\n+\n+    static CompilerHintsSelect compilerHintsSelect;\n+\n+    public static CompilerHintsSelect compilerHintsSelect() {\n+        if (compilerHintsSelect == null) {\n+            compilerHintsSelect = checkCompilerHintsState();\n+        }\n+        return compilerHintsSelect;\n+    }\n+\n+    static void resetCompilerHintsSelect() {\n+        \/\/ only used by tests\n+        compilerHintsSelect = null;\n+    }\n+\n+    private static boolean compilerHintsEnabled() {\n+        return compilerHintsSelect().isEnabled();\n+    }\n+\n@@ -108,1 +156,14 @@\n-    private static boolean isHintCompatibleVM() {\n+    private static CompilerHintsSelect checkCompilerHintsState() {\n+        String propMode = System.getProperty(COMPILER_HINTS_MODE);\n+        if (propMode != null) {\n+            CompilerHintsSelect forced;\n+            try {\n+                forced = CompilerHintsSelect.valueOf(propMode);\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(COMPILER_HINTS_MODE + \" should be set to FORCE_ON or FORCE_OFF\", e);\n+            }\n+            if (forced.isAuto()) {\n+                throw new IllegalArgumentException(COMPILER_HINTS_MODE + \" should be set to FORCE_ON or FORCE_OFF\");\n+            }\n+            return forced;\n+        }\n@@ -112,1 +173,1 @@\n-                return true;\n+                return CompilerHintsSelect.AUTO_ON;\n@@ -122,1 +183,1 @@\n-                    return true;\n+                    return CompilerHintsSelect.AUTO_ON;\n@@ -124,1 +185,1 @@\n-                    return true;\n+                    return CompilerHintsSelect.AUTO_ON;\n@@ -131,1 +192,1 @@\n-        return false;\n+        return CompilerHintsSelect.AUTO_OFF;\n@@ -191,1 +252,1 @@\n-        if (!isHintCompatibleVM()) {\n+        if (compilerHintsSelect() == CompilerHintsSelect.AUTO_OFF) {\n@@ -194,1 +255,3 @@\n-                    + \"\\\"), compilerHints are disabled.\");\n+                    + \"\\\"), compiler hints are disabled.\");\n+        }\n+        if (!compilerHintsEnabled()) {\n@@ -393,1 +456,5 @@\n-    public static void printBlackhole(PrintStream out) {\n+    public static void printHints(PrintStream out) {\n+        if (!compilerHintsSelect().isAuto()) {\n+            out.print(\"# Compiler hints: \" + (compilerHintsEnabled() ? \"enabled\" : \"disabled\") + \" (\" + compilerHintsSelect().desc() + \")\");\n+            out.println();\n+        }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/CompilerHints.java","additions":75,"deletions":8,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        CompilerHints.printBlackhole(out);\n+        CompilerHints.printHints(out);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/format\/TextReportFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+            CompilerHints.resetCompilerHintsSelect();\n@@ -60,0 +61,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n@@ -70,0 +72,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n@@ -79,0 +82,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n@@ -87,0 +91,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/CompilerHintsTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}