{"files":[{"patch":"@@ -106,3 +106,4 @@\n-        FORCE_ON(\"Forced on\"),\n-        FORCE_OFF(\"Forced off\"),\n-        AUTO(\"Automatically selected\");\n+        FORCE_ON(\"Forced on\", false, true),\n+        FORCE_OFF(\"Forced off\", false, false),\n+        AUTO_ON(\"Automatically enabled\", true, true),\n+        AUTO_OFF(\"Automatically disabled\", true, false);\n@@ -111,0 +112,2 @@\n+        private final boolean auto;\n+        private final boolean enabled;\n@@ -112,1 +115,1 @@\n-        CompilerHintsSelect(String desc) {\n+        CompilerHintsSelect(String desc, boolean auto, boolean enabled) {\n@@ -114,0 +117,2 @@\n+            this.auto = auto;\n+            this.enabled = enabled;\n@@ -119,0 +124,8 @@\n+\n+        public boolean isAuto() {\n+            return auto;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n@@ -121,1 +134,0 @@\n-    static Boolean compilerHintsEnabled;\n@@ -125,1 +137,3 @@\n-        compilerHintsEnabled();\n+        if (compilerHintsSelect == null) {\n+            compilerHintsSelect = checkCompilerHintsState();\n+        }\n@@ -129,0 +143,9 @@\n+    static void resetCompilerHintsSelect() {\n+        \/\/ only used by tests\n+        compilerHintsSelect = null;\n+    }\n+\n+    private static boolean compilerHintsEnabled() {\n+        return compilerHintsSelect().isEnabled();\n+    }\n+\n@@ -133,4 +156,1 @@\n-    private static boolean compilerHintsEnabled() {\n-        if (compilerHintsEnabled != null) {\n-            return compilerHintsEnabled;\n-        }\n+    private static CompilerHintsSelect checkCompilerHintsState() {\n@@ -139,9 +159,10 @@\n-            compilerHintsSelect = CompilerHintsSelect.valueOf(propMode);\n-        } else {\n-            compilerHintsSelect = CompilerHintsSelect.AUTO;\n-        }\n-        switch (compilerHintsSelect) {\n-            case FORCE_ON:\n-                return true;\n-            case FORCE_OFF:\n-                return false;\n+            CompilerHintsSelect forced;\n+            try {\n+                forced = CompilerHintsSelect.valueOf(propMode);\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(COMPILER_HINTS_MODE + \" should be set to FORCE_ON or FORCE_OFF\", e);\n+            }\n+            if (forced.isAuto()) {\n+                throw new IllegalArgumentException(COMPILER_HINTS_MODE + \" should be set to FORCE_ON or FORCE_OFF\");\n+            }\n+            return forced;\n@@ -152,1 +173,1 @@\n-                return true;\n+                return CompilerHintsSelect.AUTO_ON;\n@@ -162,1 +183,1 @@\n-                    return true;\n+                    return CompilerHintsSelect.AUTO_ON;\n@@ -164,1 +185,1 @@\n-                    return true;\n+                    return CompilerHintsSelect.AUTO_ON;\n@@ -171,1 +192,1 @@\n-        return false;\n+        return CompilerHintsSelect.AUTO_OFF;\n@@ -231,0 +252,5 @@\n+        if (compilerHintsSelect() == CompilerHintsSelect.AUTO_OFF) {\n+            System.err.println(\"WARNING: Not a HotSpot compiler command compatible VM (\\\"\"\n+                    + System.getProperty(\"java.vm.name\") + \"-\" + System.getProperty(\"java.version\")\n+                    + \"\\\"), compiler hints are disabled.\");\n+        }\n@@ -232,5 +258,0 @@\n-            if (compilerHintsSelect() == CompilerHintsSelect.AUTO) {\n-                System.err.println(\"WARNING: Not a HotSpot compiler command compatible VM (\\\"\"\n-                        + System.getProperty(\"java.vm.name\") + \"-\" + System.getProperty(\"java.version\")\n-                        + \"\\\"), compilerHints are disabled.\");\n-            }\n@@ -436,2 +457,4 @@\n-        out.print(\"# Compiler hints: \" + (compilerHintsEnabled() ? \"enabled\" : \"disabled\") + \" (\" + compilerHintsSelect().desc() + \")\");\n-        out.println();\n+        if (!compilerHintsSelect().isAuto()) {\n+            out.print(\"# Compiler hints: \" + (compilerHintsEnabled() ? \"enabled\" : \"disabled\") + \" (\" + compilerHintsSelect().desc() + \")\");\n+            out.println();\n+        }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/CompilerHints.java","additions":53,"deletions":30,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+            CompilerHints.resetCompilerHintsSelect();\n@@ -60,0 +61,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n@@ -70,0 +72,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n@@ -79,0 +82,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n@@ -87,0 +91,1 @@\n+        CompilerHints.resetCompilerHintsSelect();\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/CompilerHintsTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}