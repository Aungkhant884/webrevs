{"files":[{"patch":"@@ -42,1 +42,1 @@\n-@State(Scope.Thread)\n+@State(Scope.Benchmark)\n@@ -45,1 +45,1 @@\n-    private static final int SLEEP_TIME_MS = 1;\n+    private static final int SLEEP_TIME_MS = 50;\n@@ -49,1 +49,1 @@\n-    public static class RawCounter {\n+    public static class TimeCounter {\n@@ -51,0 +51,5 @@\n+    }\n+\n+    @AuxCounters(AuxCounters.Type.EVENTS)\n+    @State(Scope.Thread)\n+    public static class OpsCounter {\n@@ -54,0 +59,12 @@\n+    private long startTime;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        startTime = System.nanoTime();\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void tearDown(TimeCounter cnt) {\n+        cnt.time = System.nanoTime() - startTime;\n+    }\n+\n@@ -55,2 +72,1 @@\n-    public void test(RawCounter cnt) throws InterruptedException {\n-        long start = System.nanoTime();\n+    public void test(OpsCounter cnt) throws InterruptedException {\n@@ -58,1 +74,0 @@\n-        long stop = System.nanoTime();\n@@ -60,1 +75,0 @@\n-        cnt.time += (stop - start);\n@@ -116,1 +130,4 @@\n-        Assert.assertTrue(mode + \", \" + batchSize + \": \" + expectedScore + \" vs \" + actualScore,\n+        Assert.assertTrue(\n+                String.format(\"mode = %s, batch size = %d, expected score = %e, actual score = %e; real time = %.5f, real ops = %.5f\",\n+                              mode, batchSize, expectedScore, actualScore,\n+                              realTime, realOps),\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/BatchSizeSanityTest.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static final int SLEEP_TIME_MS = 5;\n+    private static final int SLEEP_TIME_MS = 50;\n@@ -49,1 +49,1 @@\n-    public static class RawCounter {\n+    public static class TimeCounter {\n@@ -51,0 +51,5 @@\n+    }\n+\n+    @AuxCounters(AuxCounters.Type.EVENTS)\n+    @State(Scope.Thread)\n+    public static class OpsCounter {\n@@ -54,0 +59,12 @@\n+    private long startTime;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        startTime = System.nanoTime();\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void tearDown(TimeCounter cnt) {\n+        cnt.time = System.nanoTime() - startTime;\n+    }\n+\n@@ -55,2 +72,1 @@\n-    public void test(RawCounter cnt) throws InterruptedException {\n-        long start = System.nanoTime();\n+    public void test(OpsCounter cnt) throws InterruptedException {\n@@ -58,1 +74,0 @@\n-        long stop = System.nanoTime();\n@@ -60,1 +75,0 @@\n-        cnt.time += (stop - start);\n@@ -118,1 +132,4 @@\n-        Assert.assertTrue(mode + \", \" + opsPerInv + \": \" + expectedScore + \" vs \" + actualScore,\n+        Assert.assertTrue(\n+                String.format(\"mode = %s, ops per inv = %d, expected score = %e, actual score = %e; real time = %.5f, real ops = %.5f\",\n+                        mode, opsPerInv, expectedScore, actualScore,\n+                        realTime, realOps),\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/OpsPerInvSanityTest.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        long allOps = result.getMetadata().getAllOps();\n+        double allOps = result.getMetadata().getAllOps();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/ClassloaderProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-                long allOps = iResult.getMetadata().getAllOps();\n+                double allOps = iResult.getMetadata().getAllOps();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/GCProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-            long totalOpts;\n+            double totalOpts;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/LinuxPerfNormProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-    private final long warmupOps;\n-    private final long measurementOps;\n+    private final double warmupOps;\n+    private final double measurementOps;\n@@ -40,1 +40,1 @@\n-    public BenchmarkResultMetaData(long warmupTime, long measurementTime, long stopTime, long warmupOps, long measurementOps) {\n+    public BenchmarkResultMetaData(long warmupTime, long measurementTime, long stopTime, double warmupOps, double measurementOps) {\n@@ -68,1 +68,1 @@\n-    public long getMeasurementOps() {\n+    public double getMeasurementOps() {\n@@ -72,1 +72,1 @@\n-    public long getWarmupOps() {\n+    public double getWarmupOps() {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/BenchmarkResultMetaData.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    private final long allOperations;\n+    private final double allOperations;\n@@ -40,1 +40,1 @@\n-    private final long measuredOperations;\n+    private final double measuredOperations;\n@@ -44,1 +44,1 @@\n-    public BenchmarkTaskResult(long allOperations, long measuredOperations) {\n+    public BenchmarkTaskResult(double allOperations, double measuredOperations) {\n@@ -58,1 +58,1 @@\n-    public long getAllOps() {\n+    public double getAllOps() {\n@@ -62,1 +62,1 @@\n-    public long getMeasuredOps() {\n+    public double getMeasuredOps() {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/BenchmarkTaskResult.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-    private final long allOps;\n-    private final long measuredOps;\n+    private final double allOps;\n+    private final double measuredOps;\n@@ -36,1 +36,1 @@\n-    public IterationResultMetaData(long allOps, long measuredOps) {\n+    public IterationResultMetaData(double allOps, double measuredOps) {\n@@ -41,1 +41,1 @@\n-    public long getMeasuredOps() {\n+    public double getMeasuredOps() {\n@@ -45,1 +45,1 @@\n-    public long getAllOps() {\n+    public double getAllOps() {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/IterationResultMetaData.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-    public long allOps;\n-    public long measuredOps;\n+    public double allOps;\n+    public double measuredOps;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/RawResults.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -248,2 +248,2 @@\n-        long allWarmup = 0;\n-        long allMeasurement = 0;\n+        double allWarmup = 0;\n+        double allMeasurement = 0;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BaseRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -396,2 +396,2 @@\n-        long allOps = 0;\n-        long measuredOps = 0;\n+        double allOps = 0;\n+        double measuredOps = 0;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkHandler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}