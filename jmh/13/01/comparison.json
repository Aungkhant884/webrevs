{"files":[{"patch":"@@ -42,1 +42,1 @@\n-@State(Scope.Thread)\n+@State(Scope.Benchmark)\n@@ -45,1 +45,1 @@\n-    private static final int SLEEP_TIME_MS = 1;\n+    private static final int SLEEP_TIME_MS = 50;\n@@ -49,1 +49,1 @@\n-    public static class RawCounter {\n+    public static class TimeCounter {\n@@ -51,0 +51,5 @@\n+    }\n+\n+    @AuxCounters(AuxCounters.Type.EVENTS)\n+    @State(Scope.Thread)\n+    public static class OpsCounter {\n@@ -54,0 +59,12 @@\n+    private long startTime;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        startTime = System.nanoTime();\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void tearDown(TimeCounter cnt) {\n+        cnt.time = System.nanoTime() - startTime;\n+    }\n+\n@@ -55,2 +72,1 @@\n-    public void test(RawCounter cnt) throws InterruptedException {\n-        long start = System.nanoTime();\n+    public void test(OpsCounter cnt) throws InterruptedException {\n@@ -58,1 +74,0 @@\n-        long stop = System.nanoTime();\n@@ -60,1 +75,0 @@\n-        cnt.time += (stop - start);\n@@ -116,1 +130,4 @@\n-        Assert.assertTrue(mode + \", \" + batchSize + \": \" + expectedScore + \" vs \" + actualScore,\n+        Assert.assertTrue(\n+                String.format(\"mode = %s, batch size = %d, expected score = %e, actual score = %e; real time = %.5f, real ops = %.5f\",\n+                              mode, batchSize, expectedScore, actualScore,\n+                              realTime, realOps),\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/BatchSizeSanityTest.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static final int SLEEP_TIME_MS = 5;\n+    private static final int SLEEP_TIME_MS = 50;\n@@ -49,1 +49,1 @@\n-    public static class RawCounter {\n+    public static class TimeCounter {\n@@ -51,0 +51,5 @@\n+    }\n+\n+    @AuxCounters(AuxCounters.Type.EVENTS)\n+    @State(Scope.Thread)\n+    public static class OpsCounter {\n@@ -54,0 +59,12 @@\n+    private long startTime;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        startTime = System.nanoTime();\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void tearDown(TimeCounter cnt) {\n+        cnt.time = System.nanoTime() - startTime;\n+    }\n+\n@@ -55,2 +72,1 @@\n-    public void test(RawCounter cnt) throws InterruptedException {\n-        long start = System.nanoTime();\n+    public void test(OpsCounter cnt) throws InterruptedException {\n@@ -58,1 +74,0 @@\n-        long stop = System.nanoTime();\n@@ -60,1 +75,0 @@\n-        cnt.time += (stop - start);\n@@ -118,1 +132,4 @@\n-        Assert.assertTrue(mode + \", \" + opsPerInv + \": \" + expectedScore + \" vs \" + actualScore,\n+        Assert.assertTrue(\n+                String.format(\"mode = %s, ops per inv = %d, expected score = %e, actual score = %e; real time = %.5f, real ops = %.5f\",\n+                        mode, opsPerInv, expectedScore, actualScore,\n+                        realTime, realOps),\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/OpsPerInvSanityTest.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -627,1 +627,1 @@\n-            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult(res.allOps, res.measuredOps);\");\n+            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\");\n@@ -759,1 +759,1 @@\n-            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult(res.allOps, res.measuredOps);\");\n+            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\");\n@@ -916,1 +916,1 @@\n-            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult(res.allOps, res.measuredOps);\");\n+            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\");\n@@ -1025,1 +1025,1 @@\n-            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\");\n+            writer.println(ident(3) + \"BenchmarkTaskResult results = new BenchmarkTaskResult((long)totalOps, (long)totalOps);\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/BenchmarkGenerator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-    public long allOps;\n-    public long measuredOps;\n+    public double allOps;\n+    public double measuredOps;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/RawResults.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}