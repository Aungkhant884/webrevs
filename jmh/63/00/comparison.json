{"files":[{"patch":"@@ -79,0 +79,8 @@\n+    private final ShowCounts showCounts;\n+\n+    public enum ShowCounts {\n+        raw,\n+        norm,\n+        percent_total,\n+    }\n+\n@@ -196,0 +204,7 @@\n+        OptionSpec<ShowCounts> optShowCounts = parser.accepts(\"showCounts\",\n+                        \"How should perfasm show the event counts: \" +\n+                                ShowCounts.raw + \" (unaltered), \" +\n+                                ShowCounts.norm + \" (normalized similar to benchmark calls, similar to perfnorm), \" +\n+                                ShowCounts.percent_total + \" (percent of total events).\")\n+                .withRequiredArg().ofType(ShowCounts.class).describedAs(\"type\").defaultsTo(ShowCounts.percent_total);\n+\n@@ -231,0 +246,2 @@\n+\n+            showCounts = set.valueOf(optShowCounts);\n@@ -331,0 +348,3 @@\n+        BenchmarkResultMetaData md = br.getMetadata();\n+        long ops = md.getMeasurementOps();\n+\n@@ -405,1 +425,1 @@\n-        final List<Region> regions = makeRegions(assembly, events);\n+        final List<Region> regions = makeRegions(assembly, events, ops);\n@@ -430,1 +450,15 @@\n-                    pw.printf(\"Hottest code regions (>%.2f%% \\\"%s\\\" events):%n%n\", regionRateThreshold * 100, mainEvent);\n+                    pw.printf(\"Hottest code regions (>%.2f%% \\\"%s\\\" events):%n\", regionRateThreshold * 100, mainEvent);\n+                    switch (showCounts) {\n+                        case raw:\n+                            pw.println(\" Unaltered event counts are printed.\");\n+                            break;\n+                        case norm:\n+                            pw.println(\" Event counts are normalized per @Benchmark call, in perfnorm-like fashion.\");\n+                            break;\n+                        case percent_total:\n+                            pw.println(\" Event counts are normalized to total event count.\");\n+                            break;\n+                        default:\n+                            throw new IllegalStateException(\"Unhandled enum: \" + showCounts);\n+                    }\n+                    pw.println();\n@@ -440,1 +474,1 @@\n-                    printLine(pw, events, event, r.getEventCount(events, event));\n+                    printLine(pw, events, event, r.getEventCount(events, event), showCounts, ops);\n@@ -471,1 +505,1 @@\n-                        printLine(pw, events, event, r.getEventCount(events, event));\n+                        printLine(pw, events, event, r.getEventCount(events, event), showCounts, ops);\n@@ -486,1 +520,1 @@\n-                    printLine(pw, events, event, other.count(event));\n+                    printLine(pw, events, event, other.count(event), showCounts, ops);\n@@ -493,1 +527,1 @@\n-                printLine(pw, events, event, total.count(event));\n+                printLine(pw, events, event, total.count(event), showCounts, ops);\n@@ -529,1 +563,1 @@\n-                        printLine(pw, events, event, methods.get(event).count(m));\n+                        printLine(pw, events, event, methods.get(event).count(m), showCounts, ops);\n@@ -544,1 +578,1 @@\n-                    printLine(pw, events, event, other.count(event));\n+                    printLine(pw, events, event, other.count(event), showCounts, ops);\n@@ -551,1 +585,1 @@\n-                printLine(pw, events, event, total.count(event));\n+                printLine(pw, events, event, total.count(event), showCounts, ops);\n@@ -565,1 +599,1 @@\n-                    printLine(pw, events, event, methodsByType.get(event).count(m));\n+                    printLine(pw, events, event, methodsByType.get(event).count(m), showCounts, ops);\n@@ -573,1 +607,1 @@\n-                printLine(pw, events, event, methodsByType.get(event).size());\n+                printLine(pw, events, event, methodsByType.get(event).size(), showCounts, ops);\n@@ -653,1 +687,1 @@\n-                        printLine(pwAsm, events, event, count);\n+                        printLine(pwAsm, events, event, count, showCounts, ops);\n@@ -669,1 +703,1 @@\n-    private static void printLine(PrintWriter pw, PerfEvents events, String event, long count) {\n+    private static void printLine(PrintWriter pw, PerfEvents events, String event, long count, ShowCounts showCount, long ops) {\n@@ -671,1 +705,13 @@\n-            pw.printf(\"%6.2f%%  \", 100.0 * count \/ events.getTotalEvents(event));\n+            switch (showCount) {\n+                case raw:\n+                    pw.printf(\"%7d  \", count);\n+                    break;\n+                case norm:\n+                    pw.printf(\"%7.2f  \", 100.0 * count \/ ops);\n+                    break;\n+                case percent_total:\n+                    pw.printf(\"%6.2f%%  \", 100.0 * count \/ events.getTotalEvents(event));\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unhandled enum: \" + showCount);\n+            }\n@@ -698,1 +744,1 @@\n-    private List<Region> makeRegions(Assembly asms, PerfEvents events) {\n+    private List<Region> makeRegions(Assembly asms, PerfEvents events, long ops) {\n@@ -718,1 +764,2 @@\n-                        regionLines, eventfulAddrs, regionTooBigThreshold, drawIntraJumps, drawInterJumps));\n+                        regionLines, eventfulAddrs, regionTooBigThreshold,\n+                        drawIntraJumps, drawInterJumps, showCounts, ops));\n@@ -1148,0 +1195,2 @@\n+        final ShowCounts showCounts;\n+        final long ops;\n@@ -1151,1 +1200,2 @@\n-                        int threshold, boolean drawIntraJumps, boolean drawInterJumps) {\n+                        int threshold, boolean drawIntraJumps, boolean drawInterJumps, ShowCounts showCounts,\n+                        long ops) {\n@@ -1159,0 +1209,2 @@\n+            this.showCounts = showCounts;\n+            this.ops = ops;\n@@ -1197,1 +1249,1 @@\n-                        printLine(pw, events, event, count);\n+                        printLine(pw, events, event, count, showCounts, ops);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AbstractPerfAsmProfiler.java","additions":70,"deletions":18,"binary":false,"changes":88,"status":"modified"}]}