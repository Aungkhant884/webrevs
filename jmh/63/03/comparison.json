{"files":[{"patch":"@@ -79,0 +79,8 @@\n+    private final ShowCounts showCounts;\n+\n+    private enum ShowCounts {\n+        raw,\n+        norm,\n+        percent_total,\n+    }\n+\n@@ -196,0 +204,7 @@\n+        OptionSpec<String> optShowCounts = parser.accepts(\"showCounts\",\n+                        \"How should perfasm show the event counts: \" +\n+                                ShowCounts.raw + \" (unaltered), \" +\n+                                ShowCounts.norm + \" (normalized to @Benchmark calls), \" +\n+                                ShowCounts.percent_total + \" (percent of total events).\")\n+                .withRequiredArg().ofType(String.class).describedAs(\"type\").defaultsTo(ShowCounts.percent_total.toString());\n+\n@@ -231,1 +246,3 @@\n-        } catch (OptionException e) {\n+\n+            showCounts = ShowCounts.valueOf(set.valueOf(optShowCounts));\n+        } catch (OptionException | IllegalArgumentException e) {\n@@ -401,0 +418,37 @@\n+        PrintContext context;\n+        {\n+            BenchmarkResultMetaData md = br.getMetadata();\n+            long ops = Math.max(1, md.getMeasurementOps());\n+            int majorScale;\n+            int minorScale;\n+            switch (showCounts) {\n+                case raw:\n+                    majorScale = 1;\n+                    minorScale = 0;\n+                    for (long c : events.totalCounts.values()) {\n+                        majorScale = Math.max(majorScale, (int)Math.ceil(Math.log10(c)));\n+                    }\n+                    break;\n+                case norm:\n+                    majorScale = 2;\n+                    minorScale = 1;\n+                    for (long c : events.totalCounts.values()) {\n+                        double d = Math.log10(1D * c \/ ops);\n+                        if (d < 0) {\n+                            minorScale = Math.max(minorScale, (int)Math.ceil(-d));\n+                        } else {\n+                            majorScale = Math.max(majorScale, (int)Math.ceil(d));\n+                        }\n+                    }\n+                    break;\n+                case percent_total:\n+                    majorScale = 3;\n+                    minorScale = 2;\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unhandled enum: \" + showCounts);\n+            }\n+\n+            context = new PrintContext(showCounts, ops, majorScale + minorScale + 2, minorScale);\n+        }\n+\n@@ -405,1 +459,1 @@\n-        final List<Region> regions = makeRegions(assembly, events);\n+        final List<Region> regions = makeRegions(assembly, events, context);\n@@ -430,1 +484,15 @@\n-                    pw.printf(\"Hottest code regions (>%.2f%% \\\"%s\\\" events):%n%n\", regionRateThreshold * 100, mainEvent);\n+                    pw.printf(\"Hottest code regions (>%.2f%% \\\"%s\\\" events):%n\", regionRateThreshold * 100, mainEvent);\n+                    switch (showCounts) {\n+                        case raw:\n+                            pw.println(\" Unaltered event counts are printed.\");\n+                            break;\n+                        case norm:\n+                            pw.println(\" Event counts are normalized per @Benchmark call.\");\n+                            break;\n+                        case percent_total:\n+                            pw.println(\" Event counts are percents of total event count.\");\n+                            break;\n+                        default:\n+                            throw new IllegalStateException(\"Unhandled enum: \" + showCounts);\n+                    }\n+                    pw.println();\n@@ -440,1 +508,1 @@\n-                    printLine(pw, events, event, r.getEventCount(events, event));\n+                    printLine(pw, events, event, r.getEventCount(events, event), context);\n@@ -471,1 +539,1 @@\n-                        printLine(pw, events, event, r.getEventCount(events, event));\n+                        printLine(pw, events, event, r.getEventCount(events, event), context);\n@@ -486,1 +554,1 @@\n-                    printLine(pw, events, event, other.count(event));\n+                    printLine(pw, events, event, other.count(event), context);\n@@ -493,1 +561,1 @@\n-                printLine(pw, events, event, total.count(event));\n+                printLine(pw, events, event, total.count(event), context);\n@@ -529,1 +597,1 @@\n-                        printLine(pw, events, event, methods.get(event).count(m));\n+                        printLine(pw, events, event, methods.get(event).count(m), context);\n@@ -544,1 +612,1 @@\n-                    printLine(pw, events, event, other.count(event));\n+                    printLine(pw, events, event, other.count(event), context);\n@@ -551,1 +619,1 @@\n-                printLine(pw, events, event, total.count(event));\n+                printLine(pw, events, event, total.count(event), context);\n@@ -565,1 +633,1 @@\n-                    printLine(pw, events, event, methodsByType.get(event).count(m));\n+                    printLine(pw, events, event, methodsByType.get(event).count(m), context);\n@@ -573,1 +641,1 @@\n-                printLine(pw, events, event, methodsByType.get(event).size());\n+                printLine(pw, events, event, methodsByType.get(event).size(), context);\n@@ -653,1 +721,1 @@\n-                        printLine(pwAsm, events, event, count);\n+                        printLine(pwAsm, events, event, count, context);\n@@ -669,1 +737,1 @@\n-    private static void printLine(PrintWriter pw, PerfEvents events, String event, long count) {\n+    private static void printLine(PrintWriter pw, PerfEvents events, String event, long count, PrintContext context) {\n@@ -671,1 +739,13 @@\n-            pw.printf(\"%6.2f%%  \", 100.0 * count \/ events.getTotalEvents(event));\n+            switch (context.mode) {\n+                case raw:\n+                    pw.printf(\"%\" + context.formatWidth + \"d   \", count);\n+                    break;\n+                case norm:\n+                    pw.printf(\"%\" + context.formatWidth + \".\" + context.formatMinor + \"f   \", 100.0 * count \/ context.ops);\n+                    break;\n+                case percent_total:\n+                    pw.printf(\"%\" + context.formatWidth + \".\" + context.formatMinor + \"f%%  \", 100.0 * count \/ events.getTotalEvents(event));\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unhandled enum: \" + context.mode);\n+            }\n@@ -673,1 +753,1 @@\n-            pw.printf(\"%9s\", \"\");\n+            pw.printf(\"%\" + context.formatWidth + \"s   \", \"\");\n@@ -698,1 +778,1 @@\n-    private List<Region> makeRegions(Assembly asms, PerfEvents events) {\n+    private List<Region> makeRegions(Assembly asms, PerfEvents events, PrintContext context) {\n@@ -718,1 +798,2 @@\n-                        regionLines, eventfulAddrs, regionTooBigThreshold, drawIntraJumps, drawInterJumps));\n+                        regionLines, eventfulAddrs, regionTooBigThreshold,\n+                        drawIntraJumps, drawInterJumps, context));\n@@ -1148,0 +1229,1 @@\n+        final PrintContext context;\n@@ -1151,1 +1233,2 @@\n-                        int threshold, boolean drawIntraJumps, boolean drawInterJumps) {\n+                        int threshold, boolean drawIntraJumps, boolean drawInterJumps,\n+                        PrintContext context) {\n@@ -1159,0 +1242,1 @@\n+            this.context = context;\n@@ -1197,1 +1281,1 @@\n-                        printLine(pw, events, event, count);\n+                        printLine(pw, events, event, count, context);\n@@ -1360,0 +1444,14 @@\n+    private static class PrintContext {\n+        private final ShowCounts mode;\n+        private final long ops;\n+        private final int formatWidth;\n+        private final int formatMinor;\n+\n+        public PrintContext(ShowCounts mode, long ops, int formatWidth, int formatMinor) {\n+            this.mode = mode;\n+            this.ops = ops;\n+            this.formatWidth = formatWidth;\n+            this.formatMinor = formatMinor;\n+        }\n+    }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AbstractPerfAsmProfiler.java","additions":118,"deletions":20,"binary":false,"changes":138,"status":"modified"}]}