{"files":[{"patch":"@@ -59,1 +59,1 @@\n-    public static Collection<BenchmarkListEntry> readBenchmarkList(InputStream stream) throws IOException {\n+    public static List<BenchmarkListEntry> readBenchmarkList(InputStream stream) throws IOException {\n@@ -61,1 +61,1 @@\n-            Collection<BenchmarkListEntry> entries = new ArrayList<>();\n+            List<BenchmarkListEntry> entries = new ArrayList<>();\n@@ -72,1 +72,3 @@\n-            for (BenchmarkListEntry entry : entries) {\n+            List<BenchmarkListEntry> sorted = new ArrayList<>(entries);\n+            Collections.sort(sorted);\n+            for (BenchmarkListEntry entry : sorted) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkList.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -107,3 +107,2 @@\n-        Collection<BenchmarkListEntry> read = BenchmarkList.readBenchmarkList(bis);\n-        BenchmarkListEntry first = read.iterator().next();\n-        assertEquals(\"something.Test.testКонкаррентХэшмап\", first.getUsername());\n+        List<BenchmarkListEntry> read = BenchmarkList.readBenchmarkList(bis);\n+        assertEquals(\"something.Test.testКонкаррентХэшмап\", read.get(0).getUsername());\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkListEncoding.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.runner;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.runner.options.TimeValue;\n+import org.openjdk.jmh.util.Optional;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestBenchmarkListSorting {\n+\n+    private static BenchmarkListEntry stub(String userClassQName, String generatedClassQName, String method, Mode mode) {\n+        BenchmarkListEntry br = new BenchmarkListEntry(\n+                userClassQName,\n+                generatedClassQName,\n+                method,\n+                mode,\n+                Optional.<Integer>none(),\n+                new int[]{1},\n+                Optional.<Collection<String>>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<String>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Map<String, String[]>>none(),\n+                Optional.<TimeUnit>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none()\n+        );\n+        return br;\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+        BenchmarkListEntry br1 = stub(\"something.Test1\",\n+                \"something.generated.Test1\",\n+                \"something.generated.TestMethod\",\n+                Mode.AverageTime);\n+        BenchmarkListEntry br2 = stub(\"something.Test2\",\n+                \"something.generated.Test1\",\n+                \"something.generated.TestMethod\",\n+                Mode.AverageTime);\n+        BenchmarkListEntry br3 = stub(\"something.Test3\",\n+                \"something.generated.Test1\",\n+                \"something.generated.TestMethod\",\n+                Mode.AverageTime);\n+        BenchmarkListEntry br4 = stub(\"something.Test4\",\n+                \"something.generated.Test1\",\n+                \"something.generated.TestMethod\",\n+                Mode.AverageTime);\n+\n+        \/\/ Present to writer in reverse order\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        BenchmarkList.writeBenchmarkList(bos, Arrays.asList(br4, br2, br3, br1));\n+\n+        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n+        List<BenchmarkListEntry> read = BenchmarkList.readBenchmarkList(bis);\n+\n+        \/\/ Assert we read these in proper order\n+        assertEquals(\"something.Test1\", read.get(0).getUserClassQName());\n+        assertEquals(\"something.Test2\", read.get(1).getUserClassQName());\n+        assertEquals(\"something.Test3\", read.get(2).getUserClassQName());\n+        assertEquals(\"something.Test4\", read.get(3).getUserClassQName());\n+    }\n+\n+}\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkListSorting.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}