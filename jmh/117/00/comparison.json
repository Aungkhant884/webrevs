{"files":[{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.benchmarks;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.validation.AffinitySupport;\n+import org.openjdk.jmh.validation.SpinWaitSupport;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@Threads(1)\n+@State(Scope.Thread)\n+public class CoreStabilityBench {\n+\n+    @Param(\"-1\")\n+    int p;\n+\n+    @Setup\n+    public void setup() {\n+        if (p == -1) {\n+            throw new IllegalStateException(\"Should provide a CPU number\");\n+        }\n+        AffinitySupport.bind(p);\n+    }\n+\n+    @Benchmark\n+    public void test() {\n+        Blackhole.consumeCPU(1_000_000);\n+    }\n+}\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/benchmarks\/CoreStabilityBench.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -182,0 +182,3 @@\n+                case core_stability:\n+                    new CoreStabilityTest().runWith(pw, opts);\n+                    break;\n@@ -265,0 +268,1 @@\n+        core_stability,\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/Main.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.validation.tests;\n+\n+import org.openjdk.jmh.benchmarks.CoreStabilityBench;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.runner.options.VerboseMode;\n+import org.openjdk.jmh.util.Utils;\n+import org.openjdk.jmh.validation.AffinitySupport;\n+import org.openjdk.jmh.validation.ValidationTest;\n+\n+import java.io.PrintWriter;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public class CoreStabilityTest extends ValidationTest {\n+\n+    @Override\n+    public void runWith(PrintWriter pw, Options parent) throws RunnerException {\n+        pw.println(\"--------- CORE STABILITY TEST\");\n+        pw.println();\n+\n+        org.openjdk.jmh.util.Utils.reflow(pw,\n+                \"This test verifies the performance for a single test by running it on different CPUs. \" +\n+                        \"For perfectly symmetric machines, the performance should be the same across all CPUs. \" +\n+                        \"If there is a significant difference between the CPUs, this is usually \" +\n+                        \"indicative of asymmetric machine, making the benchmarks that do not explicitly control \" +\n+                        \"affinity less reliable.\",\n+                80, 2);\n+        pw.println();\n+\n+        if (!AffinitySupport.isSupported()) {\n+            pw.println(\"  Affinity control is not available on this machine, skipping the test.\");\n+            pw.println();\n+            return;\n+        }\n+\n+        int threads = Utils.figureOutHotCPUs();\n+\n+        for (int p = 0; p < threads; p++) {\n+            pw.printf(\"  CPU %3d: \", p);\n+            pw.flush();\n+\n+            Options opts = new OptionsBuilder()\n+                    .parent(parent)\n+                    .include(CoreStabilityBench.class.getCanonicalName())\n+                    .param(\"p\", String.valueOf(p))\n+                    .verbosity(VerboseMode.SILENT)\n+                    .build();\n+\n+            RunResult result = new Runner(opts).runSingle();\n+            Result r = result.getPrimaryResult();\n+            pw.printf(\" %16s\", String.format(\"%.2f \\u00b1 %.2f %s%n\", r.getScore(), r.getScoreError(), r.getScoreUnit()));\n+            pw.flush();\n+        }\n+    }\n+}\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/CoreStabilityTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}