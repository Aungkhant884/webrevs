{"files":[{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.profilers;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.profile.GCProfiler;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.results.RunResult;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.util.JDKVersion;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 1, jvmArgs = {\"-Xms1g\", \"-Xmx1g\", \"-XX:+UseParallelGC\"})\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+public class GCProfilerSeparateThreadTest {\n+\n+    static final int SIZE = 1_000_000;\n+\n+    @Benchmark\n+    public void separateAlloc(Blackhole bh) throws InterruptedException {\n+        Thread t = new Thread(() -> bh.consume(new byte[SIZE]));\n+        t.start();\n+        t.join();\n+    }\n+\n+    @Test\n+    public void testDefault() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .addProfiler(GCProfiler.class)\n+                .build();\n+\n+        RunResult rr = new Runner(opts).runSingle();\n+\n+        Map<String, Result> sr = rr.getSecondaryResults();\n+        double allocRateNormB = sr.get(\"Â·gc.alloc.rate.norm\").getScore();\n+\n+        boolean globalProfiler = JDKVersion.parseMajor(System.getProperty(\"java.version\")) >= 21;\n+        String msg = \"Reported by profiler: \" + allocRateNormB + \", target: \" + SIZE;\n+\n+        \/\/ Allow 1% slack\n+        if (globalProfiler && (Math.abs(1 - allocRateNormB \/ SIZE) > 0.01)) {\n+            Assert.fail(\"Allocation rate failure. Reported by profiler: \" + allocRateNormB + \", target: \" + SIZE);\n+        } else {\n+            System.out.println(msg);\n+        }\n+    }\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/GCProfilerSeparateThreadTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -39,1 +39,0 @@\n-import javax.management.Notification;\n@@ -154,1 +153,1 @@\n-            if (beforeAllocated != HotspotAllocationSnapshot.EMPTY) {\n+            if (beforeAllocated != null) {\n@@ -156,1 +155,1 @@\n-                long allocated = newSnapshot.subtract(beforeAllocated);\n+                long allocated = newSnapshot.difference(beforeAllocated);\n@@ -207,2 +206,18 @@\n-    static class HotspotAllocationSnapshot {\n-        public final static HotspotAllocationSnapshot EMPTY = new HotspotAllocationSnapshot(new long[0], new long[0]);\n+    interface HotspotAllocationSnapshot {\n+        long difference(HotspotAllocationSnapshot before);\n+    }\n+\n+    static class GlobalHotspotAllocationSnapshot implements HotspotAllocationSnapshot {\n+        private final long allocatedBytes;\n+\n+        public GlobalHotspotAllocationSnapshot(long allocatedBytes) {\n+            this.allocatedBytes = allocatedBytes;\n+        }\n+\n+        @Override\n+        public long difference(HotspotAllocationSnapshot before) {\n+            if (!(before instanceof GlobalHotspotAllocationSnapshot)) {\n+                throw new IllegalArgumentException();\n+            }\n+\n+            GlobalHotspotAllocationSnapshot other = (GlobalHotspotAllocationSnapshot) before;\n@@ -210,0 +225,11 @@\n+            long beforeAllocs = other.allocatedBytes;\n+            if (allocatedBytes >= beforeAllocs) {\n+                return allocatedBytes - beforeAllocs;\n+            } else {\n+                \/\/ Do not allow negative values\n+                return 0;\n+            }\n+        }\n+    }\n+\n+    static class PerThreadHotspotAllocationSnapshot implements HotspotAllocationSnapshot {\n@@ -213,1 +239,1 @@\n-        private HotspotAllocationSnapshot(long[] threadIds, long[] allocatedBytes) {\n+        private PerThreadHotspotAllocationSnapshot(long[] threadIds, long[] allocatedBytes) {\n@@ -227,1 +253,7 @@\n-        public long subtract(HotspotAllocationSnapshot other) {\n+        public long difference(HotspotAllocationSnapshot before) {\n+            if (!(before instanceof PerThreadHotspotAllocationSnapshot)) {\n+                throw new IllegalArgumentException();\n+            }\n+\n+            PerThreadHotspotAllocationSnapshot other = (PerThreadHotspotAllocationSnapshot) before;\n+\n@@ -257,1 +289,2 @@\n-        private static Method ALLOC_MX_BEAN_GETTER;\n+        private static Method ALLOC_MX_BEAN_GETTER_PER_THREAD;\n+        private static Method ALLOC_MX_BEAN_GETTER_GLOBAL;\n@@ -275,2 +308,0 @@\n-                ALLOC_MX_BEAN_GETTER = internalIntf.getMethod(\"getThreadAllocatedBytes\", long[].class);\n-                getAllocatedBytes(bean.getAllThreadIds());\n@@ -278,0 +309,12 @@\n+                \/\/ See if global getter is available in this JVM\n+                try {\n+                    ALLOC_MX_BEAN_GETTER_GLOBAL = internalIntf.getMethod(\"getTotalThreadAllocatedBytes\");\n+                    getSnapshot();\n+                    return true;\n+                } catch (Exception e) {\n+                    \/\/ Fall through\n+                }\n+\n+                \/\/ See if per-thread getter is available in this JVM\n+                ALLOC_MX_BEAN_GETTER_PER_THREAD = internalIntf.getMethod(\"getThreadAllocatedBytes\", long[].class);\n+                getSnapshot();\n@@ -302,8 +345,0 @@\n-        private static long[] getAllocatedBytes(long[] threadIds) {\n-            try {\n-                return (long[]) ALLOC_MX_BEAN_GETTER.invoke(ALLOC_MX_BEAN, (Object) threadIds);\n-            } catch (InvocationTargetException | IllegalAccessException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n@@ -346,0 +381,14 @@\n+            \/\/ Try the global getter first, if available\n+            if (ALLOC_MX_BEAN_GETTER_GLOBAL != null) {\n+                try {\n+                    long allocatedBytes = (long) ALLOC_MX_BEAN_GETTER_GLOBAL.invoke(ALLOC_MX_BEAN);\n+                    if (allocatedBytes == -1L) {\n+                        throw new IllegalStateException(\"getTotalThreadAllocatedBytes is disabled\");\n+                    }\n+                    return new GlobalHotspotAllocationSnapshot(allocatedBytes);\n+                } catch (InvocationTargetException | IllegalAccessException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            }\n+\n+            \/\/ Fall back to per-thread getter\n@@ -347,2 +396,6 @@\n-            long[] allocatedBytes = getAllocatedBytes(threadIds);\n-            return new HotspotAllocationSnapshot(threadIds, allocatedBytes);\n+            try {\n+                long[] allocatedBytes = (long[]) ALLOC_MX_BEAN_GETTER_PER_THREAD.invoke(ALLOC_MX_BEAN, (Object) threadIds);\n+                return new PerThreadHotspotAllocationSnapshot(threadIds, allocatedBytes);\n+            } catch (InvocationTargetException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/GCProfiler.java","additions":73,"deletions":20,"binary":false,"changes":93,"status":"modified"}]}