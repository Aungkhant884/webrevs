{"files":[{"patch":"@@ -250,1 +250,1 @@\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n@@ -255,4 +255,4 @@\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n@@ -263,9 +263,9 @@\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n@@ -274,24 +274,6 @@\n-    @Benchmark\n-    public void test_Array_1(Blackhole bh) {\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-    }\n-\n-    @Benchmark\n-    public void test_Array_4(Blackhole bh) {\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-    }\n-\n-    @Benchmark\n-    public void test_Array_8(Blackhole bh) {\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n+    private Object cachedObject(int v) {\n+        if (v == 4242\/1414 + 1331) {\n+            return 42;\n+        } else {\n+            return v;\n+        }\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/benchmarks\/BlackholeConsecutiveBench.java","additions":20,"deletions":38,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jmh.util.JDKVersion;\n@@ -156,0 +157,2 @@\n+        boolean testCompilerBlackhole = JDKVersion.parseMajor(System.getProperty(\"java.version\")) >= 16;\n+\n@@ -198,7 +201,15 @@\n-                    setBlackholeInline(false);\n-                    new BlackholePipelinedTest(false, false).runWith(pw, opts);\n-                    new BlackholePipelinedTest(true, false).runWith(pw, opts);\n-                    setBlackholeInline(true);\n-                    new BlackholePipelinedTest(false, true).runWith(pw, opts);\n-                    new BlackholePipelinedTest(true, true).runWith(pw, opts);\n-                    setBlackholeInline(false);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.normal).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.normal).runWith(pw, opts);\n+                    if (testCompilerBlackhole) {\n+                        setBlackholeOpts(BlackholeTestMode.compiler);\n+                        new BlackholePipelinedTest(false, BlackholeTestMode.compiler).runWith(pw, opts);\n+                        new BlackholePipelinedTest(true, BlackholeTestMode.compiler).runWith(pw, opts);\n+                    }\n+                    setBlackholeOpts(BlackholeTestMode.full_dontinline);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.full_dontinline).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.full_dontinline).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.full);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.full).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.full).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n@@ -207,5 +218,11 @@\n-                    setBlackholeInline(false);\n-                    new BlackholeConsecutiveTest(false).runWith(pw, opts);\n-                    setBlackholeInline(true);\n-                    new BlackholeConsecutiveTest(true).runWith(pw, opts);\n-                    setBlackholeInline(false);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.normal).runWith(pw, opts);\n+                    if (testCompilerBlackhole) {\n+                        setBlackholeOpts(BlackholeTestMode.compiler);\n+                        new BlackholeConsecutiveTest(BlackholeTestMode.compiler).runWith(pw, opts);\n+                    }\n+                    setBlackholeOpts(BlackholeTestMode.full_dontinline);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.full_dontinline).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.full);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.full).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n@@ -239,2 +256,16 @@\n-    private static void setBlackholeInline(boolean inline) {\n-        System.getProperties().setProperty(\"jmh.blackhole.forceInline\", String.valueOf(inline));\n+    private static void setBlackholeOpts(BlackholeTestMode mode) {\n+        switch (mode) {\n+            case normal:\n+                \/\/ Do nothing\n+                System.getProperties().remove(\"jmh.blackhole.mode\");\n+                break;\n+            case compiler:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"COMPILER\");\n+                break;\n+            case full_dontinline:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"FULL_DONTINLINE\");\n+                break;\n+            case full:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"FULL\");\n+                break;\n+        }\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/Main.java","additions":45,"deletions":14,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jmh.validation.tests.BlackholeTestMode;\n@@ -32,1 +33,1 @@\n-public interface ValidationTest {\n+public abstract class ValidationTest {\n@@ -34,1 +35,48 @@\n-    void runWith(PrintWriter pw, Options parent) throws RunnerException;\n+    public abstract void runWith(PrintWriter pw, Options parent) throws RunnerException;\n+\n+    protected String blackholeModeString(BlackholeTestMode mode) {\n+        switch (mode) {\n+            case normal:\n+                return \"DEFAULT\";\n+            case compiler:\n+                return \"COMPILER BLACKHOLE\";\n+            case full_dontinline:\n+                return \"FULL BLACKHOLE, NO INLINE\";\n+            case full:\n+                return \"FULL BLACKHOLE\";\n+            default:\n+                throw new IllegalStateException(\"Unknown blackhole mode: \" + mode);\n+        }\n+    }\n+\n+    protected void blackholeModeMessage(PrintWriter pw, BlackholeTestMode mode) {\n+        switch (mode) {\n+            case normal:\n+                break;\n+            case compiler:\n+                org.openjdk.jmh.util.Utils.reflow(pw,\n+                        \"This particular test mode enables the compiler-assisted blackholes. \" +\n+                        \"It should provide the most consistent performance across all types. \" +\n+                        \"This mode is only available in modern JDKs.\",\n+                        80, 2);\n+                pw.println();\n+                break;\n+            case full_dontinline:\n+                org.openjdk.jmh.util.Utils.reflow(pw,\n+                        \"This particular test mode omits the compiler-assisted blackholes. \" +\n+                            \"It should provide the basic level of safety for all JDKs.\",\n+                        80, 2);\n+                pw.println();\n+                break;\n+            case full:\n+                org.openjdk.jmh.util.Utils.reflow(pw,\n+                        \"This particular test mode forces the inline of Blackhole methods, and so demolishes two of the layers \" +\n+                                \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n+                                \"JMH will have to provide more contingencies.\",\n+                        80, 2);\n+                pw.println();\n+                break;\n+            default:\n+                throw new IllegalStateException(\"Unknown blackhole mode: \" + mode);\n+        }\n+    }\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/ValidationTest.java","additions":50,"deletions":2,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-public class BlackholeConsecutiveTest implements ValidationTest {\n-    private final boolean inlined;\n+public class BlackholeConsecutiveTest extends ValidationTest {\n+    private final BlackholeTestMode mode;\n@@ -43,2 +43,2 @@\n-    public BlackholeConsecutiveTest(boolean inlined) {\n-        this.inlined = inlined;\n+    public BlackholeConsecutiveTest(BlackholeTestMode mode) {\n+        this.mode = mode;\n@@ -49,1 +49,1 @@\n-        pw.println(\"--------- BLACKHOLE MERGING TEST\" + (!inlined ? \" (NORMAL)\" : \" (INLINE HINTS BROKEN)\"));\n+        pw.println(\"--------- BLACKHOLE MERGING TEST (\" + blackholeModeString(mode) + \")\");\n@@ -60,8 +60,1 @@\n-        if (inlined) {\n-            org.openjdk.jmh.util.Utils.reflow(pw,\n-                    \"This particular test mode forces the inline of Blackhole methods, and so demolishes one of the layers \" +\n-                            \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n-                            \"JMH will have to provide more contingencies.\",\n-                    80, 2);\n-            pw.println();\n-        }\n+        blackholeModeMessage(pw, mode);\n@@ -73,1 +66,0 @@\n-                \"Array\",\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeConsecutiveTest.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class BlackholeConsumeCPUTest implements ValidationTest {\n+public class BlackholeConsumeCPUTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeConsumeCPUTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-public class BlackholePipelinedTest implements ValidationTest {\n+public class BlackholePipelinedTest extends ValidationTest {\n@@ -43,1 +43,1 @@\n-    private final boolean inlined;\n+    private final BlackholeTestMode mode;\n@@ -45,1 +45,1 @@\n-    public BlackholePipelinedTest(boolean payload, boolean inlined) {\n+    public BlackholePipelinedTest(boolean payload, BlackholeTestMode mode) {\n@@ -47,1 +47,1 @@\n-        this.inlined = inlined;\n+        this.mode = mode;\n@@ -52,1 +52,1 @@\n-        pw.println(\"--------- BLACKHOLE PIPELINED TEST\" + (payload ? \" + REAL PAYLOAD\" : \"\") + (!inlined ? \" (NORMAL)\" : \" (INLINE HINTS BROKEN)\"));\n+        pw.println(\"--------- BLACKHOLE PIPELINED TEST\" + (payload ? \" + REAL PAYLOAD\" : \"\") + \" (\" + blackholeModeString(mode) + \")\");\n@@ -67,9 +67,2 @@\n-        if (inlined) {\n-            org.openjdk.jmh.util.Utils.reflow(pw,\n-                    \"This particular test mode forces the inline of Blackhole methods, and so demolishes one of the layers \" +\n-                            \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n-                            \"JMH will have to provide more contingencies.\",\n-                    80, 2);\n-            pw.println();\n-        }\n-        pw.println();\n+\n+        blackholeModeMessage(pw, mode);\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholePipelinedTest.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class BlackholeSingleTest implements ValidationTest {\n+public class BlackholeSingleTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeSingleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.validation.tests;\n+\n+public enum BlackholeTestMode {\n+    normal,\n+    compiler,\n+    full_dontinline,\n+    full,\n+}\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeTestMode.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -40,1 +40,1 @@\n-public class CompilerHintsTest implements ValidationTest {\n+public class CompilerHintsTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/CompilerHintsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-public class HelperMethodsTest implements ValidationTest {\n+public class HelperMethodsTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/HelperMethodsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class ScoreStabilityTest implements ValidationTest {\n+public class ScoreStabilityTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/ScoreStabilityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class ThermalRundownTest implements ValidationTest {\n+public class ThermalRundownTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/ThermalRundownTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class ThreadScalingTest implements ValidationTest {\n+public class ThreadScalingTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/ThreadScalingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class TimingMeasurementsTest implements ValidationTest {\n+public class TimingMeasurementsTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/TimingMeasurementsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jmh.util.JDKVersion;\n@@ -29,4 +30,1 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.Reader;\n+import java.io.*;\n@@ -47,1 +45,0 @@\n-\n@@ -52,0 +49,2 @@\n+    static final String BLACKHOLE_PROP_NAME = \"jmh.blackhole.mode\";\n+\n@@ -65,4 +64,3 @@\n-                if (Boolean.getBoolean(\"jmh.blackhole.forceInline\")) {\n-                    hints.add(\"inline,org\/openjdk\/jmh\/infra\/Blackhole.*\");\n-                } else {\n-                    hints.add(\"dontinline,org\/openjdk\/jmh\/infra\/Blackhole.*\");\n+                BlackholeMode bhMode = blackholeMode();\n+                if (bhMode.shouldBlackhole()) {\n+                    hints.add(\"blackhole,org\/openjdk\/jmh\/infra\/Blackhole.consume\");\n@@ -70,0 +68,4 @@\n+                if (bhMode.shouldNotInline()) {\n+                    hints.add(\"dontinline,org\/openjdk\/jmh\/infra\/Blackhole.consume\");\n+                }\n+                hints.add(\"dontinline,org\/openjdk\/jmh\/infra\/Blackhole.consumeCPU\");\n@@ -195,0 +197,5 @@\n+\n+        if (needsDiagnosticUnlock()) {\n+            command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        }\n+\n@@ -227,0 +234,63 @@\n+\n+    private static BlackholeMode blackholeMode() {\n+        String prop = System.getProperty(BLACKHOLE_PROP_NAME);\n+        if (prop != null) {\n+            try {\n+                return BlackholeMode.valueOf(prop);\n+            } catch (IllegalArgumentException iae) {\n+                throw new IllegalStateException(\"Unknown Blackhole mode: \" + prop);\n+            }\n+        }\n+        return BlackholeMode.FULL_DONTINLINE;\n+    }\n+\n+    public static void printBlackholeMode(PrintStream out) {\n+        BlackholeMode mode = blackholeMode();\n+        out.print(\"# JMH blackhole mode: \" + mode.desc());\n+\n+        \/\/ Experimental: since JDK 16, Compiler blackholing is available.\n+        \/\/ Tell user they can enable it explicitly. We need to consider enabling\n+        \/\/ this by default when JDK 16 stabilizes.\n+        if (!mode.shouldBlackhole() && compilerBlackholeAvailable()) {\n+            out.print(\"; set -D\" + BLACKHOLE_PROP_NAME + \"=\" + BlackholeMode.COMPILER.name() + \" to get compiler-assisted ones\");\n+        }\n+\n+        out.println();\n+    }\n+\n+    private static boolean compilerBlackholeAvailable() {\n+        \/\/ See https:\/\/bugs.openjdk.java.net\/browse\/JDK-8252505.\n+        return JDKVersion.parseMajor(System.getProperty(\"java.version\")) >= 16;\n+    }\n+\n+    private static boolean needsDiagnosticUnlock() {\n+        return blackholeMode() == BlackholeMode.COMPILER;\n+    }\n+\n+    private enum BlackholeMode {\n+        COMPILER(true, false, \"compiler-assisted blackhole\"),\n+        FULL_DONTINLINE(false, true, \"full blackhole + dont-inline hint\"),\n+        FULL(false, false, \"full blackhole\"),\n+        ;\n+\n+        private final boolean shouldBlackhole;\n+        private final boolean shouldNotInline;\n+        private final String desc;\n+\n+        BlackholeMode(boolean shouldBlackhole, boolean shouldNotInline, String desc) {\n+            this.shouldBlackhole = shouldBlackhole;\n+            this.shouldNotInline = shouldNotInline;\n+            this.desc = desc;\n+        }\n+\n+        public boolean shouldBlackhole() {\n+            return shouldBlackhole;\n+        }\n+\n+        public boolean shouldNotInline() {\n+            return shouldNotInline;\n+        }\n+\n+        public String desc() { return desc; }\n+    }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/CompilerHints.java","additions":79,"deletions":9,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import org.openjdk.jmh.runner.CompilerHints;\n@@ -83,0 +84,2 @@\n+        CompilerHints.printBlackholeMode(out);\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/format\/TextReportFormat.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}