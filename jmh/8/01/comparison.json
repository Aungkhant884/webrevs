{"files":[{"patch":"@@ -250,1 +250,1 @@\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n@@ -255,4 +255,4 @@\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n@@ -263,9 +263,9 @@\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n-        bh.consume(Double.valueOf(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n+        bh.consume(cachedObject(x \/ y + 1331));\n@@ -274,24 +274,6 @@\n-    @Benchmark\n-    public void test_Array_1(Blackhole bh) {\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-    }\n-\n-    @Benchmark\n-    public void test_Array_4(Blackhole bh) {\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-    }\n-\n-    @Benchmark\n-    public void test_Array_8(Blackhole bh) {\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n-        bh.consume(new Double[]{Double.valueOf(x \/ y + 1331)});\n+    private Object cachedObject(int v) {\n+        if (v == 4242\/1414 + 1331) {\n+            return 42;\n+        } else {\n+            return v;\n+        }\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/benchmarks\/BlackholeConsecutiveBench.java","additions":20,"deletions":38,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -198,7 +198,10 @@\n-                    setBlackholeInline(false);\n-                    new BlackholePipelinedTest(false, false).runWith(pw, opts);\n-                    new BlackholePipelinedTest(true, false).runWith(pw, opts);\n-                    setBlackholeInline(true);\n-                    new BlackholePipelinedTest(false, true).runWith(pw, opts);\n-                    new BlackholePipelinedTest(true, true).runWith(pw, opts);\n-                    setBlackholeInline(false);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.normal).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.normal).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.noblackhole);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.noblackhole).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.noblackhole).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.noblackhole_inline);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.noblackhole_inline).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.noblackhole_inline).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n@@ -207,5 +210,7 @@\n-                    setBlackholeInline(false);\n-                    new BlackholeConsecutiveTest(false).runWith(pw, opts);\n-                    setBlackholeInline(true);\n-                    new BlackholeConsecutiveTest(true).runWith(pw, opts);\n-                    setBlackholeInline(false);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.normal).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.noblackhole);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.noblackhole).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.noblackhole_inline);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.noblackhole_inline).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.normal);\n@@ -239,2 +244,13 @@\n-    private static void setBlackholeInline(boolean inline) {\n-        System.getProperties().setProperty(\"jmh.blackhole.forceInline\", String.valueOf(inline));\n+    private static void setBlackholeOpts(BlackholeTestMode mode) {\n+        switch (mode) {\n+            case normal:\n+                \/\/ Do nothing\n+                System.getProperties().remove(\"jmh.blackhole.mode\");\n+                break;\n+            case noblackhole:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"DONTINLINE\");\n+                break;\n+            case noblackhole_inline:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"NOTHING\");\n+                break;\n+        }\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/Main.java","additions":30,"deletions":14,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jmh.validation.tests.BlackholeTestMode;\n@@ -32,1 +33,1 @@\n-public interface ValidationTest {\n+public abstract class ValidationTest {\n@@ -34,1 +35,39 @@\n-    void runWith(PrintWriter pw, Options parent) throws RunnerException;\n+    public abstract void runWith(PrintWriter pw, Options parent) throws RunnerException;\n+\n+    protected String blackholeModeString(BlackholeTestMode mode) {\n+        switch (mode) {\n+            case normal:\n+                return \"NORMAL\";\n+            case noblackhole:\n+                return \"COMPILER BLACKHOLE BROKEN\";\n+            case noblackhole_inline:\n+                return \"COMPILER BLACKHOLE BROKEN + INLINE HINTS BROKEN\";\n+            default:\n+                throw new IllegalStateException(\"Unknown blackhole mode: \" + mode);\n+        }\n+    }\n+\n+    protected void blackholeModeMessage(PrintWriter pw, BlackholeTestMode mode) {\n+        switch (mode) {\n+            case normal:\n+                break;\n+            case noblackhole:\n+                org.openjdk.jmh.util.Utils.reflow(pw,\n+                        \"This particular test mode omits the JIT\/AOT compiler blackholing of Blackhole arguments, and so demolishes one of the layers \" +\n+                                \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n+                                \"JMH will have to provide more contingencies.\",\n+                        80, 2);\n+                pw.println();\n+                break;\n+            case noblackhole_inline:\n+                org.openjdk.jmh.util.Utils.reflow(pw,\n+                        \"This particular test mode forces the inline of Blackhole methods, and so demolishes two of the layers \" +\n+                                \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n+                                \"JMH will have to provide more contingencies.\",\n+                        80, 2);\n+                pw.println();\n+                break;\n+            default:\n+                throw new IllegalStateException(\"Unknown blackhole mode: \" + mode);\n+        }\n+    }\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/ValidationTest.java","additions":41,"deletions":2,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-public class BlackholeConsecutiveTest implements ValidationTest {\n-    private final boolean inlined;\n+public class BlackholeConsecutiveTest extends ValidationTest {\n+    private final BlackholeTestMode mode;\n@@ -43,2 +43,2 @@\n-    public BlackholeConsecutiveTest(boolean inlined) {\n-        this.inlined = inlined;\n+    public BlackholeConsecutiveTest(BlackholeTestMode mode) {\n+        this.mode = mode;\n@@ -49,1 +49,1 @@\n-        pw.println(\"--------- BLACKHOLE MERGING TEST\" + (!inlined ? \" (NORMAL)\" : \" (INLINE HINTS BROKEN)\"));\n+        pw.println(\"--------- BLACKHOLE MERGING TEST (\" + blackholeModeString(mode) + \")\");\n@@ -60,8 +60,1 @@\n-        if (inlined) {\n-            org.openjdk.jmh.util.Utils.reflow(pw,\n-                    \"This particular test mode forces the inline of Blackhole methods, and so demolishes one of the layers \" +\n-                            \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n-                            \"JMH will have to provide more contingencies.\",\n-                    80, 2);\n-            pw.println();\n-        }\n+        blackholeModeMessage(pw, mode);\n@@ -73,1 +66,0 @@\n-                \"Array\",\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeConsecutiveTest.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class BlackholeConsumeCPUTest implements ValidationTest {\n+public class BlackholeConsumeCPUTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeConsumeCPUTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-public class BlackholePipelinedTest implements ValidationTest {\n+public class BlackholePipelinedTest extends ValidationTest {\n@@ -43,1 +43,1 @@\n-    private final boolean inlined;\n+    private final BlackholeTestMode mode;\n@@ -45,1 +45,1 @@\n-    public BlackholePipelinedTest(boolean payload, boolean inlined) {\n+    public BlackholePipelinedTest(boolean payload, BlackholeTestMode mode) {\n@@ -47,1 +47,1 @@\n-        this.inlined = inlined;\n+        this.mode = mode;\n@@ -52,1 +52,1 @@\n-        pw.println(\"--------- BLACKHOLE PIPELINED TEST\" + (payload ? \" + REAL PAYLOAD\" : \"\") + (!inlined ? \" (NORMAL)\" : \" (INLINE HINTS BROKEN)\"));\n+        pw.println(\"--------- BLACKHOLE PIPELINED TEST\" + (payload ? \" + REAL PAYLOAD\" : \"\") + \" (\" + blackholeModeString(mode) + \")\");\n@@ -67,9 +67,2 @@\n-        if (inlined) {\n-            org.openjdk.jmh.util.Utils.reflow(pw,\n-                    \"This particular test mode forces the inline of Blackhole methods, and so demolishes one of the layers \" +\n-                            \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n-                            \"JMH will have to provide more contingencies.\",\n-                    80, 2);\n-            pw.println();\n-        }\n-        pw.println();\n+\n+        blackholeModeMessage(pw, mode);\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholePipelinedTest.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class BlackholeSingleTest implements ValidationTest {\n+public class BlackholeSingleTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeSingleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,5 +25,1 @@\n-package org.openjdk.jmh.results;\n-\n-public class Defaults {\n-\n-    public static final String PREFIX = \"\\u00b7\";\n+package org.openjdk.jmh.validation.tests;\n@@ -31,0 +27,4 @@\n+public enum BlackholeTestMode {\n+    normal,\n+    noblackhole,\n+    noblackhole_inline,\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeTestMode.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/Defaults.java","status":"copied"},{"patch":"@@ -40,1 +40,1 @@\n-public class CompilerHintsTest implements ValidationTest {\n+public class CompilerHintsTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/CompilerHintsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-public class HelperMethodsTest implements ValidationTest {\n+public class HelperMethodsTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/HelperMethodsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class ScoreStabilityTest implements ValidationTest {\n+public class ScoreStabilityTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/ScoreStabilityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class ThermalRundownTest implements ValidationTest {\n+public class ThermalRundownTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/ThermalRundownTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class ThreadScalingTest implements ValidationTest {\n+public class ThreadScalingTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/ThreadScalingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class TimingMeasurementsTest implements ValidationTest {\n+public class TimingMeasurementsTest extends ValidationTest {\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/TimingMeasurementsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jmh.util.JDKVersion;\n@@ -47,1 +48,0 @@\n-\n@@ -65,3 +65,5 @@\n-                if (Boolean.getBoolean(\"jmh.blackhole.forceInline\")) {\n-                    hints.add(\"inline,org\/openjdk\/jmh\/infra\/Blackhole.*\");\n-                } else {\n+                BlackholeMode bhMode = BlackholeMode.current();\n+                if (bhMode.shouldBlackhole()) {\n+                    hints.add(\"blackhole,org\/openjdk\/jmh\/infra\/Blackhole.consume\");\n+                }\n+                if (bhMode.shouldNotInline()) {\n@@ -69,0 +71,2 @@\n+                } else {\n+                    hints.add(\"inline,org\/openjdk\/jmh\/infra\/Blackhole.*\");\n@@ -227,0 +231,44 @@\n+\n+    private enum BlackholeMode {\n+        BLACKHOLE_DONTINLINE(true, true),\n+        BLACKHOLE(true, false),\n+        DONTINLINE(false, true),\n+        NOTHING(false, false),\n+        ;\n+\n+        private final boolean shouldBlackhole, shouldNotInline;\n+\n+        BlackholeMode(boolean shouldBlackhole, boolean shouldNotInline) {\n+            this.shouldBlackhole = shouldBlackhole;\n+            this.shouldNotInline = shouldNotInline;\n+        }\n+\n+        public boolean shouldBlackhole() {\n+            return shouldBlackhole;\n+        }\n+\n+        public boolean shouldNotInline() {\n+            return shouldNotInline;\n+        }\n+\n+        private static BlackholeMode current() {\n+            String prop = System.getProperty(\"jmh.blackhole.mode\");\n+            if (prop != null) {\n+                try {\n+                    return BlackholeMode.valueOf(prop);\n+                } catch (IllegalArgumentException iae) {\n+                    throw new IllegalStateException(\"Unknown Blackhole mode: \" + prop);\n+                }\n+            } else {\n+                \/\/ Try auto-detection\n+                int majorVer = JDKVersion.parseMajor(System.getProperty(\"java.version\"));\n+                if (majorVer >= 16) {\n+                    \/\/ Experimental: since JDK 16, Compiler blackholing is available.\n+                    \/\/ See https:\/\/bugs.openjdk.java.net\/browse\/JDK-8252505.\n+                    return BLACKHOLE;\n+                } else {\n+                    return DONTINLINE;\n+                }\n+            }\n+        }\n+    }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/CompilerHints.java","additions":52,"deletions":4,"binary":false,"changes":56,"status":"modified"}]}