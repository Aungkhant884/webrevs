{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jmh.util.JDKVersion;\n@@ -156,0 +157,2 @@\n+        boolean testCompilerBlackhole = JDKVersion.parseMajor(System.getProperty(\"java.version\")) >= 16;\n+\n@@ -201,6 +204,11 @@\n-                    setBlackholeOpts(BlackholeTestMode.noblackhole);\n-                    new BlackholePipelinedTest(false, BlackholeTestMode.noblackhole).runWith(pw, opts);\n-                    new BlackholePipelinedTest(true, BlackholeTestMode.noblackhole).runWith(pw, opts);\n-                    setBlackholeOpts(BlackholeTestMode.nothing);\n-                    new BlackholePipelinedTest(false, BlackholeTestMode.nothing).runWith(pw, opts);\n-                    new BlackholePipelinedTest(true, BlackholeTestMode.nothing).runWith(pw, opts);\n+                    if (testCompilerBlackhole) {\n+                        setBlackholeOpts(BlackholeTestMode.compiler);\n+                        new BlackholePipelinedTest(false, BlackholeTestMode.compiler).runWith(pw, opts);\n+                        new BlackholePipelinedTest(true, BlackholeTestMode.compiler).runWith(pw, opts);\n+                    }\n+                    setBlackholeOpts(BlackholeTestMode.full_dontinline);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.full_dontinline).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.full_dontinline).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.full);\n+                    new BlackholePipelinedTest(false, BlackholeTestMode.full).runWith(pw, opts);\n+                    new BlackholePipelinedTest(true, BlackholeTestMode.full).runWith(pw, opts);\n@@ -212,4 +220,8 @@\n-                    setBlackholeOpts(BlackholeTestMode.noblackhole);\n-                    new BlackholeConsecutiveTest(BlackholeTestMode.noblackhole).runWith(pw, opts);\n-                    setBlackholeOpts(BlackholeTestMode.nothing);\n-                    new BlackholeConsecutiveTest(BlackholeTestMode.nothing).runWith(pw, opts);\n+                    if (testCompilerBlackhole) {\n+                        setBlackholeOpts(BlackholeTestMode.compiler);\n+                        new BlackholeConsecutiveTest(BlackholeTestMode.compiler).runWith(pw, opts);\n+                    }\n+                    setBlackholeOpts(BlackholeTestMode.full_dontinline);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.full_dontinline).runWith(pw, opts);\n+                    setBlackholeOpts(BlackholeTestMode.full);\n+                    new BlackholeConsecutiveTest(BlackholeTestMode.full).runWith(pw, opts);\n@@ -250,2 +262,5 @@\n-            case noblackhole:\n-                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"DONTINLINE\");\n+            case compiler:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"COMPILER\");\n+                break;\n+            case full_dontinline:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"FULL_DONTINLINE\");\n@@ -253,2 +268,2 @@\n-            case nothing:\n-                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"NOTHING\");\n+            case full:\n+                System.getProperties().setProperty(\"jmh.blackhole.mode\", \"FULL\");\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/Main.java","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -40,5 +40,7 @@\n-                return \"NORMAL\";\n-            case noblackhole:\n-                return \"COMPILER BLACKHOLE BROKEN, NO INLINE\";\n-            case nothing:\n-                return \"COMPILER BLACKHOLE BROKEN, NO INLINE BROKEN\";\n+                return \"DEFAULT\";\n+            case compiler:\n+                return \"COMPILER BLACKHOLE\";\n+            case full_dontinline:\n+                return \"FULL BLACKHOLE, NO INLINE\";\n+            case full:\n+                return \"FULL BLACKHOLE\";\n@@ -54,1 +56,1 @@\n-            case noblackhole:\n+            case compiler:\n@@ -56,3 +58,10 @@\n-                        \"This particular test mode omits the JIT\/AOT compiler blackholing of Blackhole arguments, and so demolishes one of the layers \" +\n-                                \"in defence in depth. If this layer is broken, Blackhole should also survive. If it isn't, then \" +\n-                                \"JMH will have to provide more contingencies.\",\n+                        \"This particular test mode enables the compiler-assisted blackholes. \" +\n+                        \"It should provide the most consistent performance across all types. \" +\n+                        \"This mode is only available in modern JDKs.\",\n+                        80, 2);\n+                pw.println();\n+                break;\n+            case full_dontinline:\n+                org.openjdk.jmh.util.Utils.reflow(pw,\n+                        \"This particular test mode omits the compiler-assisted blackholes. \" +\n+                            \"It should provide the basic level of safety for all JDKs.\",\n@@ -62,1 +71,1 @@\n-            case nothing:\n+            case full:\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/ValidationTest.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n@@ -29,2 +29,3 @@\n-    noblackhole,\n-    nothing,\n+    compiler,\n+    full_dontinline,\n+    full,\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/validation\/tests\/BlackholeTestMode.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.Reader;\n+import java.io.*;\n@@ -52,0 +49,2 @@\n+    static final String BLACKHOLE_PROP_NAME = \"jmh.blackhole.mode\";\n+\n@@ -65,1 +64,1 @@\n-                BlackholeMode bhMode = BlackholeMode.current();\n+                BlackholeMode bhMode = blackholeMode();\n@@ -231,0 +230,32 @@\n+    private static BlackholeMode blackholeMode() {\n+        String prop = System.getProperty(BLACKHOLE_PROP_NAME);\n+        if (prop != null) {\n+            try {\n+                return BlackholeMode.valueOf(prop);\n+            } catch (IllegalArgumentException iae) {\n+                throw new IllegalStateException(\"Unknown Blackhole mode: \" + prop);\n+            }\n+        }\n+        return BlackholeMode.FULL_DONTINLINE;\n+    }\n+\n+    public static void printBlackholeMode(PrintStream out) {\n+        BlackholeMode mode = blackholeMode();\n+        out.print(\"# JMH blackhole mode: \" + mode.desc());\n+\n+        \/\/ Experimental: since JDK 16, Compiler blackholing is available.\n+        \/\/ Tell user they can enable it explicitly. We need to consider enabling\n+        \/\/ this by default when JDK 16 stabilizes.\n+        int majorVer = JDKVersion.parseMajor(System.getProperty(\"java.version\"));\n+        if (!mode.shouldBlackhole() && compilerBlackholeAvailable()) {\n+            out.print(\"; set -D\" + BLACKHOLE_PROP_NAME + \"=\" + BlackholeMode.COMPILER.name() + \" to get compiler-assisted ones\");\n+        }\n+\n+        out.println();\n+    }\n+\n+    private static boolean compilerBlackholeAvailable() {\n+        \/\/ See https:\/\/bugs.openjdk.java.net\/browse\/JDK-8252505.\n+        return JDKVersion.parseMajor(System.getProperty(\"java.version\")) >= 16;\n+    }\n+\n@@ -232,4 +263,3 @@\n-        BLACKHOLE_DONTINLINE(true, true),\n-        BLACKHOLE(true, false),\n-        DONTINLINE(false, true),\n-        NOTHING(false, false),\n+        COMPILER(true, false, \"compiler-assisted blackhole\"),\n+        FULL_DONTINLINE(false, true, \"full blackhole + dont-inline hint\"),\n+        FULL(false, false, \"full blackhole\"),\n@@ -238,1 +268,3 @@\n-        private final boolean shouldBlackhole, shouldNotInline;\n+        private final boolean shouldBlackhole;\n+        private final boolean shouldNotInline;\n+        private final String desc;\n@@ -240,1 +272,1 @@\n-        BlackholeMode(boolean shouldBlackhole, boolean shouldNotInline) {\n+        BlackholeMode(boolean shouldBlackhole, boolean shouldNotInline, String desc) {\n@@ -243,0 +275,1 @@\n+            this.desc = desc;\n@@ -253,20 +286,1 @@\n-        private static BlackholeMode current() {\n-            String prop = System.getProperty(\"jmh.blackhole.mode\");\n-            if (prop != null) {\n-                try {\n-                    return BlackholeMode.valueOf(prop);\n-                } catch (IllegalArgumentException iae) {\n-                    throw new IllegalStateException(\"Unknown Blackhole mode: \" + prop);\n-                }\n-            } else {\n-                \/\/ Try auto-detection\n-                int majorVer = JDKVersion.parseMajor(System.getProperty(\"java.version\"));\n-                if (majorVer >= 16) {\n-                    \/\/ Experimental: since JDK 16, Compiler blackholing is available.\n-                    \/\/ See https:\/\/bugs.openjdk.java.net\/browse\/JDK-8252505.\n-                    return BLACKHOLE;\n-                } else {\n-                    return DONTINLINE;\n-                }\n-            }\n-        }\n+        public String desc() { return desc; }\n@@ -274,0 +288,1 @@\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/CompilerHints.java","additions":46,"deletions":31,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import org.openjdk.jmh.runner.CompilerHints;\n@@ -83,0 +84,2 @@\n+        CompilerHints.printBlackholeMode(out);\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/format\/TextReportFormat.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}