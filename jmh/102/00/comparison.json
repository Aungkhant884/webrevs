{"files":[{"patch":"@@ -183,1 +183,1 @@\n-                return Executors.newCachedThreadPool(new WorkerThreadFactory(prefix));\n+                return Executors.newCachedThreadPool(WorkerThreadFactories.getPlatformWorkerFactory(prefix));\n@@ -193,1 +193,11 @@\n-                return Executors.newFixedThreadPool(maxThreads, new WorkerThreadFactory(prefix));\n+                return Executors.newFixedThreadPool(maxThreads, WorkerThreadFactories.getPlatformWorkerFactory(prefix));\n+            }\n+        },\n+\n+        \/**\n+         * Use FixedThreadPool with virtual threads\n+         *\/\n+        VIRTUAL_TPE {\n+            @Override\n+            ExecutorService createExecutor(int maxThreads, String prefix) {\n+                return Executors.newFixedThreadPool(maxThreads, WorkerThreadFactories.getVirtualWorkerFactory(prefix));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkHandler.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.runner;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+class WorkerThreadFactories {\n+\n+    static class WorkerThreadFactory implements ThreadFactory {\n+\n+        private final AtomicInteger counter;\n+        private final String prefix;\n+        private final ThreadFactory factory;\n+\n+        public WorkerThreadFactory(String prefix) {\n+            this.counter = new AtomicInteger();\n+            this.prefix = prefix;\n+            this.factory = Executors.defaultThreadFactory();\n+        }\n+\n+        @Override\n+        public Thread newThread(Runnable r) {\n+            Thread thread = factory.newThread(r);\n+            thread.setName(prefix + \"-jmh-worker-\" + counter.incrementAndGet());\n+            thread.setDaemon(true);\n+            return thread;\n+        }\n+    }\n+\n+    static ThreadFactory getPlatformWorkerFactory(String prefix) {\n+        return new WorkerThreadFactory(prefix);\n+    }\n+\n+    static ThreadFactory getVirtualWorkerFactory(String prefix) {\n+        \/\/ requires reflection to be compilable in pre JDK 21\n+        try {\n+            Method m = Class.forName(\"java.lang.Thread\").getMethod(\"ofVirtual\");\n+            Object threadBuilder = m.invoke(null);\n+            Class<?> threadBuilderClazz = Class.forName(\"java.lang.Thread$Builder\");\n+            m = threadBuilderClazz.getMethod(\"name\", String.class, long.class);\n+            m.invoke(threadBuilder, prefix + \"-jmh-worker-\", 1L);\n+            m = threadBuilderClazz.getMethod(\"factory\");\n+            return (ThreadFactory) m.invoke(threadBuilder);\n+        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException |\n+                 ClassNotFoundException  | NullPointerException e) {\n+            throw new RuntimeException(\"Can't instantiate VirtualThreadFactory\", e);\n+        }\n+    }\n+\n+}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/WorkerThreadFactories.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.runner;\n-\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-class WorkerThreadFactory implements ThreadFactory {\n-\n-    private final AtomicInteger counter;\n-    private final String prefix;\n-    private final ThreadFactory factory;\n-\n-    public WorkerThreadFactory(String prefix) {\n-        this.counter = new AtomicInteger();\n-        this.prefix = prefix;\n-        this.factory = Executors.defaultThreadFactory();\n-    }\n-\n-    @Override\n-    public Thread newThread(Runnable r) {\n-        Thread thread = factory.newThread(r);\n-        thread.setName(prefix + \"-jmh-worker-\" + counter.incrementAndGet());\n-        thread.setDaemon(true);\n-        return thread;\n-    }\n-}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/WorkerThreadFactory.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"}]}