{"files":[{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.it.profilers;\n-\n-import junit.framework.Assert;\n-import org.junit.Test;\n-import org.openjdk.jmh.it.Fixtures;\n-import org.openjdk.jmh.profile.HotspotClassloadingProfiler;\n-import org.openjdk.jmh.profile.ProfilerException;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.RunnerException;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-public class HotspotClassloadingProfilerTest extends AbstractHotspotProfilerTest {\n-\n-    @Test\n-    public void test() throws RunnerException {\n-        try {\n-            new HotspotClassloadingProfiler();\n-        } catch (ProfilerException e) {\n-            Assert.assertFalse(\"HotSpot VMs should support this profiler\", isHotspotVM());\n-            return;\n-        }\n-        Options opts = new OptionsBuilder()\n-                .include(Fixtures.getTestMask(this.getClass()))\n-                .addProfiler(HotspotClassloadingProfiler.class)\n-                .build();\n-        new Runner(opts).run();\n-    }\n-}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/HotspotClassloadingProfilerTest.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.it.profilers;\n-\n-import junit.framework.Assert;\n-import org.junit.Test;\n-import org.openjdk.jmh.it.Fixtures;\n-import org.openjdk.jmh.profile.HotspotClassloadingProfiler;\n-import org.openjdk.jmh.profile.HotspotCompilationProfiler;\n-import org.openjdk.jmh.profile.ProfilerException;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.RunnerException;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-public class HotspotCompilationProfilerTest extends AbstractHotspotProfilerTest {\n-\n-    @Test\n-    public void test() throws RunnerException {\n-        try {\n-            new HotspotCompilationProfiler();\n-        } catch (ProfilerException e) {\n-            Assert.assertFalse(\"HotSpot VMs should support this profiler\", isHotspotVM());\n-            return;\n-        }\n-        Options opts = new OptionsBuilder()\n-                .include(Fixtures.getTestMask(this.getClass()))\n-                .addProfiler(HotspotCompilationProfiler.class)\n-                .build();\n-        new Runner(opts).run();\n-    }\n-}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/HotspotCompilationProfilerTest.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.it.profilers;\n-\n-import junit.framework.Assert;\n-import org.junit.Test;\n-import org.openjdk.jmh.it.Fixtures;\n-import org.openjdk.jmh.profile.HotspotCompilationProfiler;\n-import org.openjdk.jmh.profile.HotspotMemoryProfiler;\n-import org.openjdk.jmh.profile.ProfilerException;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.RunnerException;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-public class HotspotMemoryProfilerTest extends AbstractHotspotProfilerTest {\n-\n-    @Test\n-    public void test() throws RunnerException {\n-        try {\n-            new HotspotMemoryProfiler();\n-        } catch (ProfilerException e) {\n-            Assert.assertFalse(\"HotSpot VMs should support this profiler\", isHotspotVM());\n-            return;\n-        }\n-        Options opts = new OptionsBuilder()\n-                .include(Fixtures.getTestMask(this.getClass()))\n-                .addProfiler(HotspotMemoryProfiler.class)\n-                .build();\n-        new Runner(opts).run();\n-    }\n-}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/HotspotMemoryProfilerTest.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.it.profilers;\n-\n-import junit.framework.Assert;\n-import org.junit.Test;\n-import org.openjdk.jmh.it.Fixtures;\n-import org.openjdk.jmh.profile.HotspotMemoryProfiler;\n-import org.openjdk.jmh.profile.HotspotRuntimeProfiler;\n-import org.openjdk.jmh.profile.ProfilerException;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.RunnerException;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-public class HotspotRuntimeProfilerTest extends AbstractHotspotProfilerTest {\n-\n-    @Test\n-    public void test() throws RunnerException {\n-        try {\n-            new HotspotRuntimeProfiler();\n-        } catch (ProfilerException e) {\n-            Assert.assertFalse(\"HotSpot VMs should support this profiler\", isHotspotVM());\n-            return;\n-        }\n-        Options opts = new OptionsBuilder()\n-                .include(Fixtures.getTestMask(this.getClass()))\n-                .addProfiler(HotspotRuntimeProfiler.class)\n-                .build();\n-        new Runner(opts).run();\n-    }\n-}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/HotspotRuntimeProfilerTest.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.it.profilers;\n-\n-import junit.framework.Assert;\n-import org.junit.Test;\n-import org.openjdk.jmh.it.Fixtures;\n-import org.openjdk.jmh.profile.HotspotRuntimeProfiler;\n-import org.openjdk.jmh.profile.HotspotThreadProfiler;\n-import org.openjdk.jmh.profile.ProfilerException;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.RunnerException;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-public class HotspotThreadProfilerTest extends AbstractHotspotProfilerTest {\n-\n-    @Test\n-    public void test() throws RunnerException {\n-        try {\n-            new HotspotThreadProfiler();\n-        } catch (ProfilerException e) {\n-            Assert.assertFalse(\"HotSpot VMs should support this profiler\", isHotspotVM());\n-            return;\n-        }\n-        Options opts = new OptionsBuilder()\n-                .include(Fixtures.getTestMask(this.getClass()))\n-                .addProfiler(HotspotThreadProfiler.class)\n-                .build();\n-        new Runner(opts).run();\n-    }\n-}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/HotspotThreadProfilerTest.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,203 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.profile;\n-\n-import org.openjdk.jmh.infra.BenchmarkParams;\n-import org.openjdk.jmh.infra.IterationParams;\n-import org.openjdk.jmh.results.*;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.*;\n-\n-abstract class AbstractHotspotProfiler implements InternalProfiler {\n-\n-    private final Method getListMethod;\n-    private final Object bean;\n-\n-    private Map<String, Long> prevs;\n-\n-    public AbstractHotspotProfiler(String beanName, String methodName) throws ProfilerException {\n-        try {\n-            Class<?> helper = Class.forName(\"sun.management.ManagementFactoryHelper\");\n-            bean = helper.getMethod(\"get\" + beanName).invoke(null);\n-            getListMethod = bean.getClass().getMethod(methodName);\n-            getListMethod.setAccessible(true);\n-            getListMethod.invoke(bean); \/\/ try\n-        } catch (ClassNotFoundException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n-            throw new ProfilerException(\"Problem initializing profiler (\" + e.getMessage() + \"), are you running HotSpot VM?\");\n-        }\n-    }\n-\n-    @Override\n-    public Collection<? extends Result> afterIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n-        HotspotInternalResult res = counters();\n-        Collection<ScalarResult> results = new ArrayList<>();\n-        for (Map.Entry<String, Long> e : res.getDiff().entrySet()) {\n-            results.add(new ScalarResult(Defaults.PREFIX + e.getKey(), e.getValue(), \"?\", AggregationPolicy.AVG));\n-        }\n-        return results;\n-    }\n-\n-    @Override\n-    public void beforeIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams) {\n-        prevs = new HashMap<>();\n-        for (HotspotCounter counter : getCounters()) {\n-            prevs.put(counter.getName(), convert(counter.getValue()));\n-        }\n-    }\n-\n-    public static Long convert(Object o) {\n-        try {\n-            return Long.valueOf(String.valueOf(o));\n-        } catch (IllegalArgumentException iae) {\n-            return null;\n-        }\n-    }\n-\n-    protected HotspotInternalResult counters() {\n-        Map<String, Long> difference = new TreeMap<>();\n-        Map<String, Long> current = new TreeMap<>();\n-        for (HotspotCounter counter : getCounters()) {\n-            Long prev = prevs.get(counter.getName());\n-            if (prev != null) {\n-                long diff = convert(counter.getValue()) - prev;\n-                difference.put(counter.getName(), diff);\n-                current.put(counter.getName(), convert(counter.getValue()));\n-            }\n-        }\n-\n-        return new HotspotInternalResult(current, difference);\n-    }\n-\n-    public List<HotspotCounter> getCounters() {\n-        try {\n-            List<HotspotCounter> counters = new ArrayList<>();\n-            for (Object c : (List) getListMethod.invoke(bean)) {\n-                try {\n-                    counters.add(new HotspotCounter(c));\n-                } catch (UnsupportedOperationException e) {\n-                    \/\/ ignore this counter\n-                }\n-            }\n-            return counters;\n-        } catch (IllegalAccessException | InvocationTargetException e) {\n-            throw new IllegalStateException(\"Should not be here\", e);\n-        }\n-    }\n-\n-    \/**\n-     * Represents the HotSpot profiling result.\n-     *\/\n-    static class HotspotInternalResult {\n-        private final Map<String, Long> current;\n-        private final Map<String, Long> diff;\n-\n-        public HotspotInternalResult(Map<String, Long> current, Map<String, Long> diff) {\n-            this.current = current;\n-            this.diff = diff;\n-        }\n-\n-        public Map<String, Long> getCurrent() {\n-            return current;\n-        }\n-\n-        public Map<String, Long> getDiff() {\n-            return diff;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"difference: \" + diff.toString();\n-        }\n-    }\n-\n-    \/**\n-     * Reflective proxy for Hotspot counters to dodge compatibility problems.\n-     *\/\n-    private static class HotspotCounter {\n-        private static final Method GET_VALUE;\n-        private static final Method GET_NAME;\n-\n-        static {\n-            Method name = null;\n-            Method value = null;\n-            try {\n-                Class<?> cntClass = Class.forName(\"sun.management.counter.Counter\");\n-                if (cntClass != null) {\n-                    try {\n-                        name = cntClass.getMethod(\"getName\");\n-                    } catch (NoSuchMethodException e) {\n-                        \/\/ do nothing\n-                    }\n-                    try {\n-                        value = cntClass.getMethod(\"getValue\");\n-                    } catch (NoSuchMethodException e) {\n-                        \/\/ do nothing\n-                    }\n-                }\n-            } catch (ClassNotFoundException e) {\n-                \/\/ no nothing\n-            }\n-\n-            GET_NAME = name;\n-            GET_VALUE = value;\n-        }\n-\n-        private final Object proxy;\n-\n-        public HotspotCounter(Object proxy) throws UnsupportedOperationException {\n-            this.proxy = proxy;\n-\n-            \/\/ Try these right now\n-            if (GET_NAME == null || GET_VALUE == null)  {\n-                throw new UnsupportedOperationException();\n-            }\n-            try {\n-                String k = (String) GET_NAME.invoke(proxy);\n-                Object v = GET_VALUE.invoke(proxy);\n-            } catch (IllegalAccessException | InvocationTargetException e) {\n-                throw new UnsupportedOperationException(e);\n-            }\n-        }\n-\n-        public String getName() {\n-            try {\n-                return (String) GET_NAME.invoke(proxy);\n-            } catch (IllegalAccessException | InvocationTargetException e) {\n-                throw new IllegalStateException(\"Cannot be here\");\n-            }\n-        }\n-\n-        public Object getValue() {\n-            try {\n-                return GET_VALUE.invoke(proxy);\n-            } catch (IllegalAccessException | InvocationTargetException e) {\n-                throw new IllegalStateException(\"Cannot be here\");\n-            }\n-        }\n-    }\n-\n-}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AbstractHotspotProfiler.java","additions":0,"deletions":203,"binary":false,"changes":203,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.profile;\n-\n-public class HotspotClassloadingProfiler extends AbstractHotspotProfiler {\n-\n-    public HotspotClassloadingProfiler() throws ProfilerException {\n-        super(\"HotspotClassLoadingMBean\", \"getInternalClassLoadingCounters\");\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return \"HotSpot (tm) classloader profiling via implementation-specific MBeans\";\n-    }\n-}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/HotspotClassloadingProfiler.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.profile;\n-\n-import org.openjdk.jmh.infra.BenchmarkParams;\n-import org.openjdk.jmh.infra.IterationParams;\n-import org.openjdk.jmh.results.*;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-public class HotspotCompilationProfiler extends AbstractHotspotProfiler {\n-\n-    public HotspotCompilationProfiler() throws ProfilerException {\n-        super(\"HotspotCompilationMBean\", \"getInternalCompilerCounters\");\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return \"HotSpot (tm) JIT compiler profiling via implementation-specific MBeans\";\n-    }\n-\n-    @Override\n-    public Collection<? extends Result> afterIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n-        Map<String, Long> current = counters().getCurrent();\n-        return Arrays.asList(\n-                new ScalarResult(Defaults.PREFIX + \"compiler.totalTime\",\n-                        current.get(\"java.ci.totalTime\") * 1D \/ TimeUnit.MILLISECONDS.toNanos(1),\n-                        \"ms\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.totalCompiles\",\n-                        current.get(\"sun.ci.totalCompiles\"),\n-                        \"methods\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.totalBailouts\",\n-                        current.get(\"sun.ci.totalBailouts\"),\n-                        \"methods\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.totalInvalidates\",\n-                        current.get(\"sun.ci.totalInvalidates\"),\n-                        \"methods\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.nmethodCodeSize\",\n-                        current.get(\"sun.ci.nmethodCodeSize\") \/ 1024d,\n-                        \"Kb\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.nmethodSize\",\n-                        current.get(\"sun.ci.nmethodSize\") \/ 1024d,\n-                        \"Kb\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.osrCompiles\",\n-                        current.get(\"sun.ci.osrCompiles\"),\n-                        \"methods\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.osrBytes\",\n-                        current.get(\"sun.ci.osrBytes\") \/ 1024d,\n-                        \"Kb\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.osrTime\",\n-                        current.get(\"sun.ci.osrTime\") * 1d \/ TimeUnit.MILLISECONDS.toNanos(1),\n-                        \"ms\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.standardCompiles\",\n-                        current.get(\"sun.ci.standardCompiles\"),\n-                        \"methods\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.standardBytes\",\n-                        current.get(\"sun.ci.standardBytes\") \/ 1024d,\n-                        \"Kb\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"compiler.standardTime\",\n-                        current.get(\"sun.ci.standardTime\") * 1d \/ TimeUnit.MILLISECONDS.toNanos(1),\n-                        \"ms\", AggregationPolicy.MAX)\n-        );\n-    }\n-\n-}\n-\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/HotspotCompilationProfiler.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.profile;\n-\n-public class HotspotMemoryProfiler extends AbstractHotspotProfiler {\n-\n-    public HotspotMemoryProfiler() throws ProfilerException {\n-        super(\"HotspotMemoryMBean\", \"getInternalMemoryCounters\");\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return \"HotSpot (tm) memory manager (GC) profiling via implementation-specific MBeans\";\n-    }\n-}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/HotspotMemoryProfiler.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.profile;\n-\n-import org.openjdk.jmh.infra.BenchmarkParams;\n-import org.openjdk.jmh.infra.IterationParams;\n-import org.openjdk.jmh.results.*;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-public class HotspotRuntimeProfiler extends AbstractHotspotProfiler {\n-\n-    public HotspotRuntimeProfiler() throws ProfilerException {\n-        super(\"HotspotRuntimeMBean\", \"getInternalRuntimeCounters\");\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return \"HotSpot (tm) runtime profiling via implementation-specific MBeans\";\n-    }\n-\n-    @Override\n-    public Collection<? extends Result> afterIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n-        Map<String, Long> current = counters().getCurrent();\n-        return Arrays.asList(\n-                new ScalarResult(Defaults.PREFIX + \"rt.sync.fatMonitors\",\n-                        current.get(\"sun.rt._sync_MonExtant\"),\n-                        \"monitors\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.sync.monitorInflations\",\n-                        current.get(\"sun.rt._sync_Inflations\"),\n-                        \"monitors\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.sync.monitorDeflations\",\n-                        current.get(\"sun.rt._sync_Deflations\"),\n-                        \"monitors\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.sync.contendedLockAttempts\",\n-                        current.get(\"sun.rt._sync_ContendedLockAttempts\"),\n-                        \"locks\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.sync.parks\",\n-                        current.get(\"sun.rt._sync_Parks\"),\n-                        \"counts\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.sync.notifications\",\n-                        current.get(\"sun.rt._sync_Notifications\"),\n-                        \"counts\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.sync.futileWakeups\",\n-                        current.get(\"sun.rt._sync_FutileWakeups\"),\n-                        \"counts\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.safepoints\",\n-                        current.get(\"sun.rt.safepoints\"),\n-                        \"counts\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.safepointSyncTime\",\n-                        current.get(\"sun.rt.safepointSyncTime\") * 1d \/ TimeUnit.MILLISECONDS.toNanos(1),\n-                        \"ms\", AggregationPolicy.MAX),\n-\n-                new ScalarResult(Defaults.PREFIX + \"rt.safepointTime\",\n-                        current.get(\"sun.rt.safepointTime\") * 1d \/ TimeUnit.MILLISECONDS.toNanos(1),\n-                        \"ms\", AggregationPolicy.MAX)\n-        );\n-    }\n-\n-}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/HotspotRuntimeProfiler.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jmh.profile;\n-\n-import org.openjdk.jmh.infra.BenchmarkParams;\n-import org.openjdk.jmh.infra.IterationParams;\n-import org.openjdk.jmh.results.*;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-public class HotspotThreadProfiler extends AbstractHotspotProfiler {\n-\n-    public HotspotThreadProfiler() throws ProfilerException {\n-        super(\"HotspotThreadMBean\", \"getInternalThreadingCounters\");\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return \"HotSpot (tm) threading subsystem via implementation-specific MBeans\";\n-    }\n-\n-    @Override\n-    public Collection<? extends Result> afterIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n-        Map<String, Long> current = counters().getCurrent();\n-        return Arrays.asList(\n-                new ScalarResult(Defaults.PREFIX + \"threads.alive\",\n-                        current.get(\"java.threads.live\"),\n-                        \"threads\", AggregationPolicy.AVG),\n-\n-                new ScalarResult(Defaults.PREFIX + \"threads.daemon\",\n-                        current.get(\"java.threads.daemon\"),\n-                        \"threads\", AggregationPolicy.AVG),\n-\n-                new ScalarResult(Defaults.PREFIX + \"threads.started\",\n-                        current.get(\"java.threads.started\"),\n-                        \"threads\", AggregationPolicy.MAX)\n-        );\n-    }\n-\n-}\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/HotspotThreadProfiler.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -171,5 +171,0 @@\n-        BUILT_IN.put(\"hs_cl\",    HotspotClassloadingProfiler.class);\n-        BUILT_IN.put(\"hs_comp\",  HotspotCompilationProfiler.class);\n-        BUILT_IN.put(\"hs_gc\",    HotspotMemoryProfiler.class);\n-        BUILT_IN.put(\"hs_rt\",    HotspotRuntimeProfiler.class);\n-        BUILT_IN.put(\"hs_thr\",   HotspotThreadProfiler.class);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/ProfilerFactory.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}