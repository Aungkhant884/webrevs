{"files":[{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.profile;\n+\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+import org.openjdk.jmh.infra.IterationParams;\n+import org.openjdk.jmh.results.*;\n+\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public class MemPoolProfiler implements InternalProfiler {\n+    static final double BYTES_PER_KIB = 1024D;\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Memory pool\/footprint profiling via standard MBeans\";\n+    }\n+\n+    @Override\n+    public void beforeIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams) {\n+        for (MemoryPoolMXBean b : ManagementFactory.getMemoryPoolMXBeans()) {\n+            b.resetPeakUsage();\n+        }\n+    }\n+\n+    @Override\n+    public Collection<? extends Result> afterIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n+        List<Result> results = new ArrayList<>();\n+\n+        long sumCodeHeap = 0L;\n+        long sum = 0L;\n+        for (MemoryPoolMXBean bean : ManagementFactory.getMemoryPoolMXBeans()) {\n+            long used = bean.getPeakUsage().getUsed();\n+            if (bean.getName().contains(\"CodeHeap\")) {\n+                sumCodeHeap += used;\n+            }\n+            sum += used;\n+\n+            results.add(new ScalarResult(Defaults.PREFIX + \"mempool.\" + bean.getName() + \".used\", used \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n+        }\n+\n+        results.add(new ScalarResult(Defaults.PREFIX + \"mempool.total.codeheap.used\", sumCodeHeap \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n+        results.add(new ScalarResult(Defaults.PREFIX + \"mempool.total.used\", sum \/ BYTES_PER_KIB, \"KiB\", AggregationPolicy.MAX));\n+        return results;\n+    }\n+}\n\\ No newline at end of file\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/MemPoolProfiler.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -176,0 +176,1 @@\n+        BUILT_IN.put(\"mempool\",  MemPoolProfiler.class);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/ProfilerFactory.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}