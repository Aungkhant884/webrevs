{"files":[{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.jvmoption;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.util.Utils;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+@Measurement(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(1)\n+@State(Scope.Thread)\n+public class JvmOption {\n+\n+    @Param(\"\")\n+    public String x;\n+\n+    @Benchmark\n+    public void test() {\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void test_api() throws RunnerException {\n+        Path currentJvm = Paths.get(Utils.getCurrentJvm());\n+        \/\/ Construct an alternative path to the JVM to exercise PrintPropertiesMain\n+        Path alternativePathToJvm = currentJvm.getParent().resolve(\".\").resolve(currentJvm.getFileName());\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .shouldFailOnError(true)\n+                .jvm(alternativePathToJvm.toString())\n+                .build();\n+\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/jvmoption\/JvmOption.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -29,0 +29,5 @@\n+import java.io.BufferedOutputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n@@ -38,4 +43,9 @@\n-        Utils.getRecordedSystemProperties().storeToXML(\n-                System.out,\n-                \"JMH properties export for target JVM\",\n-                \"UTF-8\");\n+        if (argv.length != 1) {\n+            throw new IllegalArgumentException(\"Usage: java \" + PrintPropertiesMain.class.getName() + \" <xml-output-file>\");\n+        }\n+        try (OutputStream os = new BufferedOutputStream(Files.newOutputStream(Paths.get(argv[0])))) {\n+            Utils.getRecordedSystemProperties().storeToXML(\n+                    os,\n+                    \"JMH properties export for target JVM\",\n+                    \"UTF-8\");\n+        }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/PrintPropertiesMain.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.nio.file.Files;\n@@ -577,1 +578,0 @@\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n@@ -579,5 +579,4 @@\n-            Process p = new ProcessBuilder(cmd).start();\n-\n-            \/\/ drain streams, else we might lock up\n-            InputStreamDrainer errDrainer = new InputStreamDrainer(p.getErrorStream(), System.err);\n-            InputStreamDrainer outDrainer = new InputStreamDrainer(p.getInputStream(), baos);\n+            File tempFile = FileUtils.tempFile(\"properties\");\n+            List<String> cmdWithFile = new ArrayList<>(cmd);\n+            cmdWithFile.add(tempFile.getAbsolutePath());\n+            Collection<String> errs = tryWith(cmdWithFile.toArray(new String[0]));\n@@ -585,13 +584,7 @@\n-            errDrainer.start();\n-            outDrainer.start();\n-\n-            int err = p.waitFor();\n-\n-            errDrainer.join();\n-            outDrainer.join();\n-            out.loadFromXML(new ByteArrayInputStream(baos.toByteArray()));\n-        } catch (InvalidPropertiesFormatException ex) {\n-            \/\/ Maybe some VM output has preceded the XML content?\n-            String output = new String(baos.toByteArray(), Utils.guessConsoleEncoding());\n-            String msg = \"Unable to parse output of PrintPropertiesMain as XML: \" + System.lineSeparator() + output;\n-            throw new RuntimeException(msg, ex);\n+            if (!errs.isEmpty()) {\n+                throw new RuntimeException(\"Unable to extract forked JVM properties using: '\" + join(cmd, \" \") + \"'; \" + errs);\n+            }\n+            try (InputStream in = new BufferedInputStream(new FileInputStream(tempFile))) {\n+                \/\/ This will automatically pick UTF-8 based on the encoding in the XML declaration.\n+                out.loadFromXML(in);\n+            }\n@@ -600,2 +593,0 @@\n-        } catch (InterruptedException ex) {\n-            throw new IllegalStateException(ex);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"}]}