{"files":[{"patch":"@@ -92,1 +92,1 @@\n-                    \" annotation does not support final classes. This class is not \" , state);\n+                    \" annotation does not support final classes.\" , state);\n@@ -107,1 +107,4 @@\n-            hasDefaultConstructor |= (constructor.getParameters().isEmpty() && constructor.isPublic());\n+            if (constructor.getParameters().isEmpty()) {\n+                hasDefaultConstructor = constructor.isPublic();\n+                break;\n+            }\n@@ -742,20 +745,2 @@\n-            result.add(\"        if (val != null) {\");\n-            result.add(\"            return val;\");\n-            result.add(\"        }\");\n-            result.add(\"        val = new \" + so.type + \"();\");\n-            if (!so.getParamsLabels().isEmpty()) {\n-                result.add(\"        Field f;\");\n-            }\n-            for (String paramName : so.getParamsLabels()) {\n-                for (FieldInfo paramField : so.getParam(paramName)) {\n-                    result.add(\"        f = \" + paramField.getDeclaringClass().getQualifiedName() + \".class.getDeclaredField(\\\"\" + paramName + \"\\\");\");\n-                    result.add(\"        f.setAccessible(true);\");\n-                    result.add(\"        f.set(val, \" + so.getParamAccessor(paramField) + \");\");\n-                }\n-            }\n-            for (HelperMethodInvocation hmi : so.getHelpers()) {\n-                if (hmi.helperLevel != Level.Trial) continue;\n-                if (hmi.type != HelperType.SETUP) continue;\n-                Collection<String> args = so.helperArgs.get(hmi.method.getQualifiedName());\n-                result.add(\"        val.\" + hmi.method.getName() + \"(\" + Utils.join(args, \",\") + \");\");\n-            }\n+            addStateInitializersParamsLabels(result, so);\n+            addStateInitializersHelpers(result, so);\n@@ -795,6 +780,1 @@\n-            for (HelperMethodInvocation hmi : so.getHelpers()) {\n-                if (hmi.helperLevel != Level.Trial) continue;\n-                if (hmi.type != HelperType.SETUP) continue;\n-                Collection<String> args = so.helperArgs.get(hmi.method.getQualifiedName());\n-                result.add(\"        val.\" + hmi.method.getName() + \"(\" + Utils.join(args, \",\") + \");\");\n-            }\n+            addStateInitializersHelpers(result, so);\n@@ -823,20 +803,2 @@\n-            result.add(\"        if (val != null) {\");\n-            result.add(\"            return val;\");\n-            result.add(\"        }\");\n-            result.add(\"        val = new \" + so.type + \"();\");\n-            if (!so.getParamsLabels().isEmpty()) {\n-                result.add(\"        Field f;\");\n-            }\n-            for (String paramName : so.getParamsLabels()) {\n-                for(FieldInfo paramField : so.getParam(paramName)) {\n-                    result.add(\"        f = \" + paramField.getDeclaringClass().getQualifiedName() + \".class.getDeclaredField(\\\"\" + paramName + \"\\\");\");\n-                    result.add(\"        f.setAccessible(true);\");\n-                    result.add(\"        f.set(val, \" + so.getParamAccessor(paramField) + \");\");\n-                }\n-            }\n-            for (HelperMethodInvocation hmi : so.getHelpers()) {\n-                if (hmi.helperLevel != Level.Trial) continue;\n-                if (hmi.type != HelperType.SETUP) continue;\n-                Collection<String> args = so.helperArgs.get(hmi.method.getQualifiedName());\n-                result.add(\"        val.\" + hmi.method.getName() + \"(\" + Utils.join(args, \",\") + \");\");\n-            }\n+            addStateInitializersParamsLabels(result, so);\n+            addStateInitializersHelpers(result, so);\n@@ -856,0 +818,26 @@\n+    private void addStateInitializersHelpers(List<String> result, StateObject so) {\n+        for (HelperMethodInvocation hmi : so.getHelpers()) {\n+            if (hmi.helperLevel != Level.Trial) continue;\n+            if (hmi.type != HelperType.SETUP) continue;\n+            Collection<String> args = so.helperArgs.get(hmi.method.getQualifiedName());\n+            result.add(\"        val.\" + hmi.method.getName() + \"(\" + Utils.join(args, \",\") + \");\");\n+        }\n+    }\n+\n+    private void addStateInitializersParamsLabels(List<String> result, StateObject so) {\n+        result.add(\"        if (val != null) {\");\n+        result.add(\"            return val;\");\n+        result.add(\"        }\");\n+        result.add(\"        val = new \" + so.type + \"();\");\n+        if (!so.getParamsLabels().isEmpty()) {\n+            result.add(\"        Field f;\");\n+        }\n+        for (String paramName : so.getParamsLabels()) {\n+            for (FieldInfo paramField : so.getParam(paramName)) {\n+                result.add(\"        f = \" + paramField.getDeclaringClass().getQualifiedName() + \".class.getDeclaredField(\\\"\" + paramName + \"\\\");\");\n+                result.add(\"        f.setAccessible(true);\");\n+                result.add(\"        f.set(val, \" + so.getParamAccessor(paramField) + \");\");\n+            }\n+        }\n+    }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/StateObjectHandler.java","additions":36,"deletions":48,"binary":false,"changes":84,"status":"modified"}]}