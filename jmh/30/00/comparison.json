{"files":[{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.separatecl;\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+public class SeparateClassLoaderTest {\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.All)\n+    @Warmup(iterations = 0)\n+    @Measurement(iterations = 1, time = 1, timeUnit = TimeUnit.MILLISECONDS)\n+    @Fork(1)\n+    public void test() {\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void invokeAPI() throws RunnerException {\n+        Options opts = new OptionsBuilder()\n+                .include(Fixtures.getTestMask(this.getClass()))\n+                .shouldFailOnError(true)\n+                .jvmArgsAppend(\"-Djmh.separateClassLoader=true\")\n+                .build();\n+        new Runner(opts).run();\n+    }\n+\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/separatecl\/SeparateClassLoaderTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -75,1 +76,1 @@\n-            \/\/ load the class in a different classloader\n+            \/\/ Load the class in a different classloader\n@@ -83,1 +84,1 @@\n-                    throw new RuntimeException(\"Error parsing the value of property java.class.path: \" + classPathValue, ex);\n+                    throw new IllegalStateException(\"Error parsing the value of property java.class.path: \" + classPathValue, ex);\n@@ -87,2 +88,5 @@\n-            URLClassLoader loader = new URLClassLoader(classPathUrl);\n-            return loader.loadClass(className);\n+            try (URLClassLoader loader = new URLClassLoader(classPathUrl)) {\n+                return loader.loadClass(className);\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/ClassUtils.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}