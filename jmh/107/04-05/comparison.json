{"files":[{"patch":"@@ -47,0 +47,3 @@\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -55,7 +58,7 @@\n-    private Thread setupRunThread;\n-    private Thread setupIterationThread;\n-    private Thread setupInvocationThread;\n-    private Thread teardownRunThread;\n-    private Thread teardownIterationThread;\n-    private Thread teardownInvocationThread;\n-    private Thread testInvocationThread;\n+    private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<>());\n@@ -65,1 +68,1 @@\n-        setupRunThread = Thread.currentThread();\n+        setupRunThread.add(Thread.currentThread());\n@@ -70,1 +73,1 @@\n-        setupIterationThread = Thread.currentThread();\n+        setupIterationThread.add(Thread.currentThread());\n@@ -75,1 +78,1 @@\n-        setupInvocationThread = Thread.currentThread();\n+        setupInvocationThread.add(Thread.currentThread());\n@@ -80,1 +83,1 @@\n-        teardownRunThread = Thread.currentThread();\n+        teardownRunThread.add(Thread.currentThread());\n@@ -86,0 +89,3 @@\n+        } else {\n+            Assert.assertTrue(\"test <: setupRun\",           testInvocationThread.containsAll(setupRunThread));\n+            Assert.assertTrue(\"test <: teardownRunThread\",  testInvocationThread.containsAll(teardownRunThread));\n@@ -91,1 +97,1 @@\n-        teardownIterationThread = Thread.currentThread();\n+        teardownIterationThread.add(Thread.currentThread());\n@@ -102,1 +108,1 @@\n-        teardownInvocationThread = Thread.currentThread();\n+        teardownInvocationThread.add(Thread.currentThread());\n@@ -112,1 +118,1 @@\n-        testInvocationThread = Thread.currentThread();\n+        testInvocationThread.add(Thread.currentThread());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/ThreadBenchSameThreadTest.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -57,7 +60,7 @@\n-        private Thread setupRunThread;\n-        private Thread setupIterationThread;\n-        private Thread setupInvocationThread;\n-        private Thread teardownRunThread;\n-        private Thread teardownIterationThread;\n-        private Thread teardownInvocationThread;\n-        private Thread testInvocationThread;\n+        private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<>());\n@@ -67,1 +70,1 @@\n-            setupRunThread = Thread.currentThread();\n+            setupRunThread.add(Thread.currentThread());\n@@ -72,1 +75,1 @@\n-            setupIterationThread = Thread.currentThread();\n+            setupIterationThread.add(Thread.currentThread());\n@@ -77,1 +80,1 @@\n-            setupInvocationThread = Thread.currentThread();\n+            setupInvocationThread.add(Thread.currentThread());\n@@ -82,1 +85,1 @@\n-            teardownRunThread = Thread.currentThread();\n+            teardownRunThread.add(Thread.currentThread());\n@@ -88,0 +91,3 @@\n+            } else {\n+                Assert.assertTrue(\"test <: setupRun\",           testInvocationThread.containsAll(setupRunThread));\n+                Assert.assertTrue(\"test <: teardownRunThread\",  testInvocationThread.containsAll(teardownRunThread));\n@@ -93,1 +99,1 @@\n-            teardownIterationThread = Thread.currentThread();\n+            teardownIterationThread.add(Thread.currentThread());\n@@ -104,1 +110,1 @@\n-            teardownInvocationThread = Thread.currentThread();\n+            teardownInvocationThread.add(Thread.currentThread());\n@@ -115,1 +121,1 @@\n-        state.testInvocationThread = Thread.currentThread();\n+        state.testInvocationThread.add(Thread.currentThread());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/ThreadStateSameThreadTest.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-            boolean hasStableThreads() {\n+            boolean stableThreads() {\n@@ -220,1 +220,1 @@\n-         * Use ForkJoinPool.\n+         * Use ForkJoinPool\n@@ -230,1 +230,1 @@\n-         * Use ForkJoinPool.commonPool (JDK 8+)\n+         * Use ForkJoinPool.commonPool\n@@ -240,3 +240,3 @@\n-            boolean shutdownForbidden() {\n-                \/\/ this is a system-wide executor, don't shutdown\n-                return true;\n+            boolean shutdownCapable() {\n+                \/\/ This is a system-wide executor, do not shutdown.\n+                return false;\n@@ -247,0 +247,3 @@\n+        \/**\n+         * Use custom executor\n+         *\/\n@@ -260,2 +263,5 @@\n-        boolean shutdownForbidden() {\n-            return false;\n+        \/**\n+         * @return Should we shutdown executor after use?\n+         *\/\n+        boolean shutdownCapable() {\n+            return true;\n@@ -264,1 +270,4 @@\n-        boolean hasStableThreads() { return false; }\n+        \/**\n+         * @return Executor always reuses the same threads?\n+         *\/\n+        boolean stableThreads() { return false; }\n@@ -296,1 +305,1 @@\n-        if (EXECUTOR_TYPE.shutdownForbidden() || (executor == null)) {\n+        if (!EXECUTOR_TYPE.shutdownCapable() || (executor == null)) {\n@@ -478,1 +487,1 @@\n-            if (EXECUTOR_TYPE.hasStableThreads()) {\n+            if (EXECUTOR_TYPE.stableThreads()) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/BenchmarkHandler.java","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"}]}