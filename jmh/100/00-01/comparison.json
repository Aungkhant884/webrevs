{"files":[{"patch":"@@ -911,1 +911,8 @@\n-                List<Long> addrs = parseAddresses(line, true);\n+                String trim = line.trim();\n+                if (trim.isEmpty()) {\n+                    \/\/ Filter out empty lines for denser output, more efficient matching,\n+                    \/\/ and trustworthy prevLine.\n+                    continue;\n+                }\n+\n+                List<Long> addrs = parseAddresses(trim, true, true);\n@@ -937,1 +944,1 @@\n-                        List<Long> stubAddrs = parseAddresses(line, false);\n+                        List<Long> stubAddrs = parseAddresses(trim, true, false);\n@@ -971,1 +978,1 @@\n-                        List<Long> entryAddrs = parseAddresses(map.get(\"entry\"), true);\n+                        List<Long> entryAddrs = parseAddresses(map.get(\"entry\"), true, true);\n@@ -1007,4 +1014,3 @@\n-    static List<Long> parseAddresses(String line, boolean shouldStartWithAddr) {\n-        line = line.trim();\n-        if (line.isEmpty()) {\n-            return EMPTY_LIST_LONGS;\n+    static List<Long> parseAddresses(String line, boolean alreadyTrimmed, boolean shouldStartWithAddr) {\n+        if (!alreadyTrimmed) {\n+            line = line.trim();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AbstractPerfAsmProfiler.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+        List<Long> empty = new ArrayList<>();\n@@ -75,1 +76,0 @@\n-            List<Long> actual = AbstractPerfAsmProfiler.parseAddresses(line, true);\n@@ -77,1 +77,11 @@\n-            Assert.assertEquals(line, expected, actual);\n+\n+            String leadingSpace = \"  \" + line;\n+            String trailingSpace = line + \"  \";\n+\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(line,            false, true));\n+\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(leadingSpace,    false, true));\n+            Assert.assertEquals(line, empty,    AbstractPerfAsmProfiler.parseAddresses(leadingSpace,     true, true));\n+\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(trailingSpace,   false, true));\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(trailingSpace,    true, true));\n@@ -83,0 +93,1 @@\n+        List<Long> empty = new ArrayList<>();\n@@ -84,4 +95,0 @@\n-            String testLine = \"something \" + line;\n-            Assert.assertEquals(new ArrayList<>(), AbstractPerfAsmProfiler.parseAddresses(testLine, true));\n-\n-            List<Long> actual = AbstractPerfAsmProfiler.parseAddresses(testLine, false);\n@@ -89,1 +96,20 @@\n-            Assert.assertEquals(line, expected, actual);\n+\n+            String prefixedLine = \"something \" + line;\n+            String prefixedLeadingLine = \"  something \" + line;\n+            String prefixedTrailingLine = \"something \" + line + \"  \";\n+\n+            Assert.assertEquals(line, empty,    AbstractPerfAsmProfiler.parseAddresses(prefixedLine,         false, true));\n+            Assert.assertEquals(line, empty,    AbstractPerfAsmProfiler.parseAddresses(prefixedLeadingLine,  false, true));\n+            Assert.assertEquals(line, empty,    AbstractPerfAsmProfiler.parseAddresses(prefixedTrailingLine, false, true));\n+\n+            Assert.assertEquals(line, empty,    AbstractPerfAsmProfiler.parseAddresses(prefixedLine,          true, true));\n+            Assert.assertEquals(line, empty,    AbstractPerfAsmProfiler.parseAddresses(prefixedLeadingLine,   true, true));\n+            Assert.assertEquals(line, empty,    AbstractPerfAsmProfiler.parseAddresses(prefixedTrailingLine,  true, true));\n+\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(prefixedLine,         false, false));\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(prefixedLeadingLine,  false, false));\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(prefixedTrailingLine, false, false));\n+\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(prefixedLine,          true, false));\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(prefixedLeadingLine,   true, false));\n+            Assert.assertEquals(line, expected, AbstractPerfAsmProfiler.parseAddresses(prefixedTrailingLine,  true, false));\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/profile\/PerfAsmAddressTest.java","additions":33,"deletions":7,"binary":false,"changes":40,"status":"modified"}]}