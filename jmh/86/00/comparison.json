{"files":[{"patch":"@@ -19,1 +19,1 @@\n-        java: [7, 8, 11, 17, 19-ea]\n+        java: [8, 11, 17, 19-ea]\n","filename":".github\/workflows\/pre-integration.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,5 +69,0 @@\n-                <configuration>\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n-                <\/configuration>\n","filename":"jmh-core-benchmarks\/pom.xml","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            arrays[c] = new Double[]{Double.valueOf(c)};\n+            arrays[c] = new Double[]{(double) c};\n","filename":"jmh-core-benchmarks\/src\/main\/java\/org\/openjdk\/jmh\/benchmarks\/BlackholePipelinePayloadBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,3 +105,0 @@\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n","filename":"jmh-core-ct\/pom.xml","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -123,5 +123,0 @@\n-                        <configuration>\n-                            <compilerVersion>1.7<\/compilerVersion>\n-                            <source>1.7<\/source>\n-                            <target>1.7<\/target>\n-                        <\/configuration>\n@@ -151,3 +146,0 @@\n-                            <compilerVersion>1.7<\/compilerVersion>\n-                            <source>1.7<\/source>\n-                            <target>1.7<\/target>\n@@ -238,3 +230,0 @@\n-                            <compilerVersion>1.7<\/compilerVersion>\n-                            <source>1.7<\/source>\n-                            <target>1.7<\/target>\n","filename":"jmh-core-it\/pom.xml","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-    private final Set<Thread> test1threads = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> test2threads = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> test1threads = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> test2threads = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/asymm\/ExactThreadCountTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-    private final Set<Thread> test1threads = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> test2threads = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> test1threads = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> test2threads = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/asymm\/Zero1ThreadCountTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-    private final Set<Thread> test1threads = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> test2threads = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> test1threads = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> test2threads = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/asymm\/Zero2ThreadCountTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,8 +47,5 @@\n-                new Thread() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            TimeUnit.DAYS.sleep(1);\n-                        } catch (InterruptedException e) {\n-                            e.printStackTrace();\n-                        }\n+                new Thread(() -> {\n+                    try {\n+                        TimeUnit.DAYS.sleep(1);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n@@ -56,1 +53,1 @@\n-                }\n+                })\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedStuckShutdownHookTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,8 +46,5 @@\n-        Thread t = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    TimeUnit.DAYS.sleep(1);\n-                } catch (InterruptedException e) {\n-                    e.printStackTrace();\n-                }\n+        Thread t = new Thread(() -> {\n+            try {\n+                TimeUnit.DAYS.sleep(1);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/errors\/ForkedStuckThreadTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        set = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<BenchmarkParams, Boolean>()));\n+        set = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<>()));\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/infraparams\/BenchmarkParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        set = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<IterationParams, Boolean>()));\n+        set = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<>()));\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/infraparams\/IterationParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        set = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<ThreadParams, Boolean>()));\n+        set = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<>()));\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/infraparams\/ThreadParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/BenchmarkBenchSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/BenchmarkStateSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/GroupBenchSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/GroupDefaultBenchSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/GroupDefaultStateSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/GroupStateSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+    final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/ThreadBenchSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<Thread>());\n+        final Set<Thread> visitors = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/sharing\/ThreadStateSharingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,7 +58,7 @@\n-    private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/BenchmarkBenchSameThreadTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,7 +60,7 @@\n-        private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n+        private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/BenchmarkStateSameThreadTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,7 +59,7 @@\n-    private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/GroupBenchSameThreadTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -61,7 +61,7 @@\n-        private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n-        private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<Thread>());\n+        private final Set<Thread> setupRunThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> setupIterationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> setupInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownRunThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownIterationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> teardownInvocationThread = Collections.synchronizedSet(new HashSet<>());\n+        private final Set<Thread> testInvocationThread = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/GroupStateSameThreadTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -51,3 +51,3 @@\n-    private final Set<Thread> abc = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> def = Collections.synchronizedSet(new HashSet<Thread>());\n-    private final Set<Thread> ghi = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> abc = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> def = Collections.synchronizedSet(new HashSet<>());\n+    private final Set<Thread> ghi = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/GroupThreadGroupOrderTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private final Set<Thread> threads = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> threads = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/MaxThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private final Set<Thread> threads = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> threads = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/OneThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private final Set<Thread> threads = Collections.synchronizedSet(new HashSet<Thread>());\n+    private final Set<Thread> threads = Collections.synchronizedSet(new HashSet<>());\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/TwoThreadCountTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,3 +81,0 @@\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n","filename":"jmh-core\/pom.xml","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,6 +44,1 @@\n-    private final Set<MethodInfo> defaultForceInlineMethods = new TreeSet<>(new Comparator<MethodInfo>() {\n-        @Override\n-        public int compare(MethodInfo o1, MethodInfo o2) {\n-            return o1.getQualifiedName().compareTo(o2.getQualifiedName());\n-        }\n-    });\n+    private final Set<MethodInfo> defaultForceInlineMethods = new TreeSet<>(Comparator.comparing(MethodInfo::getQualifiedName));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/CompilerControlPlugin.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,6 +36,1 @@\n-    public static final Comparator<StateObject> ID_COMPARATOR = new Comparator<StateObject>() {\n-        @Override\n-        public int compare(StateObject o1, StateObject o2) {\n-            return o1.fieldIdentifier.compareTo(o2.fieldIdentifier);\n-        }\n-    };\n+    public static final Comparator<StateObject> ID_COMPARATOR = Comparator.comparing(o -> o.fieldIdentifier);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/StateObject.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -456,7 +456,2 @@\n-        Collections.sort(regions, new Comparator<Region>() {\n-            @Override\n-            public int compare(Region o1, Region o2) {\n-                return Long.compare(o2.getEventCount(events, mainEvent),\n-                                    o1.getEventCount(events, mainEvent));\n-            }\n-        });\n+        regions.sort((o1, o2) -> Long.compare(o2.getEventCount(events, mainEvent),\n+                      o1.getEventCount(events, mainEvent)));\n@@ -559,2 +554,2 @@\n-            methodsByType.put(event, new HashMultiset<String>());\n-            methods.put(event, new HashMultiset<MethodDesc>());\n+            methodsByType.put(event, new HashMultiset<>());\n+            methods.put(event, new HashMultiset<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AbstractPerfAsmProfiler.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -270,17 +270,14 @@\n-                return new NotificationListener() {\n-                    @Override\n-                    public void handleNotification(Notification n, Object o) {\n-                        try {\n-                            if (n.getType().equals(notifNameField.get(null))) {\n-                                Object info = infoMethod.invoke(null, n.getUserData());\n-                                Object gcInfo = getGcInfo.invoke(info);\n-                                Map<String, MemoryUsage> mapBefore = (Map<String, MemoryUsage>) getMemoryUsageBeforeGc.invoke(gcInfo);\n-                                Map<String, MemoryUsage> mapAfter = (Map<String, MemoryUsage>) getMemoryUsageAfterGc.invoke(gcInfo);\n-                                for (Map.Entry<String, MemoryUsage> entry : mapAfter.entrySet()) {\n-                                    String name = entry.getKey();\n-                                    MemoryUsage after = entry.getValue();\n-                                    MemoryUsage before = mapBefore.get(name);\n-                                    long c = before.getUsed() - after.getUsed();\n-                                    if (c > 0) {\n-                                        churn.add(name, c);\n-                                    }\n+                return (n, o) -> {\n+                    try {\n+                        if (n.getType().equals(notifNameField.get(null))) {\n+                            Object info = infoMethod.invoke(null, n.getUserData());\n+                            Object gcInfo = getGcInfo.invoke(info);\n+                            Map<String, MemoryUsage> mapBefore = (Map<String, MemoryUsage>) getMemoryUsageBeforeGc.invoke(gcInfo);\n+                            Map<String, MemoryUsage> mapAfter = (Map<String, MemoryUsage>) getMemoryUsageAfterGc.invoke(gcInfo);\n+                            for (Map.Entry<String, MemoryUsage> entry : mapAfter.entrySet()) {\n+                                String name = entry.getKey();\n+                                MemoryUsage after = entry.getValue();\n+                                MemoryUsage before = mapBefore.get(name);\n+                                long c = before.getUsed() - after.getUsed();\n+                                if (c > 0) {\n+                                    churn.add(name, c);\n@@ -289,2 +286,0 @@\n-                        } catch (IllegalAccessException | InvocationTargetException e) {\n-                            \/\/ Do nothing, counters would not get populated\n@@ -292,0 +287,2 @@\n+                    } catch (IllegalAccessException | InvocationTargetException e) {\n+                        \/\/ Do nothing, counters would not get populated\n@@ -346,1 +343,1 @@\n-            return (churn != null) ? churn : new HashMultiset<String>();\n+            return (churn != null) ? churn : new HashMultiset<>();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/GCProfiler.java","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-                events.put(evName, new TreeMultiset<Long>());\n+                events.put(evName, new TreeMultiset<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/LinuxPerfAsmProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-                stacks.put(s, new HashMultiset<StackRecord>());\n+                stacks.put(s, new HashMultiset<>());\n@@ -282,1 +282,1 @@\n-            Collections.sort(sortedStates, new Comparator<Thread.State>() {\n+            sortedStates.sort(new Comparator<Thread.State>() {\n@@ -386,1 +386,1 @@\n-                        sum.put(entry.getKey(), new HashMultiset<StackRecord>());\n+                        sum.put(entry.getKey(), new HashMultiset<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/StackProfiler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-                events.put(evName, new TreeMultiset<Long>());\n+                events.put(evName, new TreeMultiset<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/WinPerfAsmProfiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,6 +93,1 @@\n-    public static final Comparator<RunResult> DEFAULT_SORT_COMPARATOR = new Comparator<RunResult>() {\n-        @Override\n-        public int compare(RunResult o1, RunResult o2) {\n-            return o1.params.compareTo(o2.params);\n-        }\n-    };\n+    public static final Comparator<RunResult> DEFAULT_SORT_COMPARATOR = Comparator.comparing(o -> o.params);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/RunResult.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,12 +44,9 @@\n-        return new ResultFormat() {\n-            @Override\n-            public void writeOut(Collection<RunResult> results) {\n-                try {\n-                    PrintStream pw = new PrintStream(file, \"UTF-8\");\n-                    ResultFormat rf = getInstance(type, pw);\n-                    rf.writeOut(results);\n-                    pw.flush();\n-                    pw.close();\n-                } catch (IOException e) {\n-                    throw new IllegalStateException(e);\n-                }\n+        return results -> {\n+            try {\n+                PrintStream pw = new PrintStream(file, \"UTF-8\");\n+                ResultFormat rf = getInstance(type, pw);\n+                rf.writeOut(results);\n+                pw.flush();\n+                pw.close();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/results\/format\/ResultFormatFactory.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -85,6 +85,3 @@\n-                new InvocationHandler() {\n-                    @Override\n-                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-                        pushFrame(new OutputFormatFrame(ClassConventions.getMethodName(method), args));\n-                        return null; \/\/ expect null\n-                    }\n+                (proxy, method, args) -> {\n+                    pushFrame(new OutputFormatFrame(ClassConventions.getMethodName(method), args));\n+                    return null; \/\/ expect null\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/link\/BinaryLinkClient.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        results = new AtomicReference<List<IterationResult>>(new ArrayList<IterationResult>());\n+        results = new AtomicReference<>(new ArrayList<>());\n@@ -145,1 +145,1 @@\n-        List<IterationResult> res = results.getAndSet(new ArrayList<IterationResult>());\n+        List<IterationResult> res = results.getAndSet(new ArrayList<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/link\/BinaryLinkServer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        super(new HashMap<K, Collection<V>>());\n+        super(new HashMap<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/HashMultimap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-        super(new HashMap<T, Long>());\n+        super(new HashMap<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/HashMultiset.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        super(new HashMap<K, Collection<V>>());\n+        super(new HashMap<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/HashsetMultimap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,6 +32,1 @@\n-        Queue<Map.Entry<T, Long>> q = new BoundedPriorityQueue<>(top, new Comparator<Map.Entry<T, Long>>() {\n-            @Override\n-            public int compare(Map.Entry<T, Long> o1, Map.Entry<T, Long> o2) {\n-                return o2.getValue().compareTo(o1.getValue());\n-            }\n-        });\n+        Queue<Map.Entry<T, Long>> q = new BoundedPriorityQueue<>(top, Map.Entry.<T, Long>comparingByValue().reversed());\n@@ -55,9 +50,2 @@\n-        List<T> sorted = new ArrayList<>();\n-        sorted.addAll(set.keys());\n-\n-        Collections.sort(sorted, new Comparator<T>() {\n-            @Override\n-            public int compare(T o1, T o2) {\n-                return Long.compare(set.count(o2), set.count(o1));\n-            }\n-        });\n+        List<T> sorted = new ArrayList<>(set.keys());\n+        sorted.sort((o1, o2) -> Long.compare(set.count(o2), set.count(o1)));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Multisets.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        super(new TreeMap<K, Collection<V>>());\n+        super(new TreeMap<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/TreeMultimap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-        super(new TreeMap<T, Long>());\n+        super(new TreeMap<>());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/TreeMultiset.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -605,6 +605,1 @@\n-        return new Iterable<T>() {\n-            @Override\n-            public Iterator<T> iterator() {\n-                return it;\n-            }\n-        };\n+        return () -> it;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -63,3 +63,0 @@\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n","filename":"jmh-generator-annprocess\/pom.xml","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,6 +60,1 @@\n-        Collection<TypeElement> discoveredClasses = new TreeSet<>(new Comparator<TypeElement>() {\n-            @Override\n-            public int compare(TypeElement o1, TypeElement o2) {\n-                return o1.getQualifiedName().toString().compareTo(o2.getQualifiedName().toString());\n-            }\n-        });\n+        Collection<TypeElement> discoveredClasses = new TreeSet<>(Comparator.comparing(o -> o.getQualifiedName().toString()));\n","filename":"jmh-generator-annprocess\/src\/main\/java\/org\/openjdk\/jmh\/generators\/annotations\/APGeneratorSource.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -71,3 +71,0 @@\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n","filename":"jmh-generator-asm\/pom.xml","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        super(Opcodes.ASM4);\n+        super(Opcodes.ASM5);\n","filename":"jmh-generator-asm\/src\/main\/java\/org\/openjdk\/jmh\/generators\/asm\/ASMClassInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        super(Opcodes.ASM4, fieldVisitor);\n+        super(Opcodes.ASM5, fieldVisitor);\n","filename":"jmh-generator-asm\/src\/main\/java\/org\/openjdk\/jmh\/generators\/asm\/ASMFieldInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        super(Opcodes.ASM4, methodVisitor);\n+        super(Opcodes.ASM5, methodVisitor);\n","filename":"jmh-generator-asm\/src\/main\/java\/org\/openjdk\/jmh\/generators\/asm\/ASMMethodInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        super(Opcodes.ASM4, annotationVisitor);\n+        super(Opcodes.ASM5, annotationVisitor);\n@@ -214,1 +214,1 @@\n-        return new AnnotationVisitor(Opcodes.ASM4, super.visitArray(name)) {\n+        return new AnnotationVisitor(Opcodes.ASM5, super.visitArray(name)) {\n","filename":"jmh-generator-asm\/src\/main\/java\/org\/openjdk\/jmh\/generators\/asm\/AnnotationInvocationHandler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,3 +72,0 @@\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n","filename":"jmh-generator-bytecode\/pom.xml","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,3 +62,0 @@\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n","filename":"jmh-generator-reflection\/pom.xml","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,3 +77,0 @@\n-                    <compilerVersion>1.7<\/compilerVersion>\n-                    <source>1.7<\/source>\n-                    <target>1.7<\/target>\n","filename":"jmh-samples\/pom.xml","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -175,0 +175,5 @@\n+                    <configuration>\n+                        <compilerVersion>1.8<\/compilerVersion>\n+                        <source>1.8<\/source>\n+                        <target>1.8<\/target>\n+                    <\/configuration>\n","filename":"pom.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}