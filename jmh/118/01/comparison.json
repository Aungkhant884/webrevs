{"files":[{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jmh.it.threads;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.it.Fixtures;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.All)\n+@State(Scope.Benchmark)\n+public class HalfMaxThreadCountTest {\n+\n+    private final Set<Thread> threads = Collections.synchronizedSet(new HashSet<>());\n+\n+    @TearDown(Level.Iteration)\n+    public void tearDown() {\n+        if (Fixtures.expectStableThreads()) {\n+            Assert.assertEquals(threads.size(), Runtime.getRuntime().availableProcessors() \/ 2);\n+        } else {\n+            Assert.assertTrue(threads.size() >= Runtime.getRuntime().availableProcessors() \/ 2);\n+        }\n+    }\n+\n+    @Benchmark\n+    @Measurement(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+    @Warmup(iterations = 0)\n+    @Fork(1)\n+    @Threads(Threads.HALF_MAX)\n+    public void test1() {\n+        threads.add(Thread.currentThread());\n+        Fixtures.work();\n+    }\n+\n+    @Benchmark\n+    @Measurement(iterations = 1, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n+    @Warmup(iterations = 0)\n+    @Fork(1)\n+    public void test2() {\n+        threads.add(Thread.currentThread());\n+        Fixtures.work();\n+    }\n+\n+    @Test\n+    public void invokeAPI_1() throws RunnerException {\n+        for (int c = 0; c < Fixtures.repetitionCount(); c++) {\n+            Options opt = new OptionsBuilder()\n+                    .include(Fixtures.getTestMask(this.getClass()) + \".*test1\")\n+                    .shouldFailOnError(true)\n+                    .build();\n+            new Runner(opt).run();\n+        }\n+    }\n+\n+    @Test\n+    public void invokeAPI_2() throws RunnerException {\n+        for (int c = 0; c < Fixtures.repetitionCount(); c++) {\n+            Options opt = new OptionsBuilder()\n+                    .include(Fixtures.getTestMask(this.getClass()) + \".*test2\")\n+                    .shouldFailOnError(true)\n+                    .threads(Threads.HALF_MAX)\n+                    .build();\n+            new Runner(opt).run();\n+        }\n+    }\n+}\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/threads\/HalfMaxThreadCountTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -52,0 +52,6 @@\n+    \/**\n+     * The magic value for MAX\/2 threads.\n+     * This means Runtime.getRuntime().availableProcessors()\/2 threads.\n+     *\/\n+    int HALF_MAX = -2;\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/annotations\/Threads.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -393,1 +393,1 @@\n-        if (threads == Threads.MAX) {\n+        if (threads == Threads.MAX || threads == Threads.HALF_MAX) {\n@@ -399,1 +399,5 @@\n-            threads = cpuCount;\n+            if (threads == Threads.HALF_MAX) {\n+                threads = (cpuCount + 1) \/ 2;\n+            } else {\n+                threads = cpuCount;\n+            }\n@@ -401,1 +405,0 @@\n-\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/Runner.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-                \"maximum number of hardware threads available on the machine, figured out by JMH itself. \" +\n+                \"maximum number of hardware threads available on the machine, figured out by JMH itself. 'halfmax' means 'max\/2'\" +\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/options\/CommandLineOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-        if (count != Threads.MAX) {\n+        if (count != Threads.MAX && count != Threads.HALF_MAX) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/options\/OptionsBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+        } else if (value.equalsIgnoreCase(\"halfmax\")) {\n+            return Threads.HALF_MAX;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/options\/ThreadsValueConverter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -241,0 +241,7 @@\n+    @Test\n+    public void testThreads_HalfMax() throws Exception {\n+        CommandLineOptions cmdLine = new CommandLineOptions(\"-t\", \"halfmax\");\n+        Options builder = new OptionsBuilder().threads(Threads.HALF_MAX).build();\n+        Assert.assertEquals(builder.getThreads(), cmdLine.getThreads());\n+    }\n+\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/options\/TestOptions.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}